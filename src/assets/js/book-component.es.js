function Q_(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var cf = {}, f3 = {
  get exports() {
    return cf;
  },
  set exports(n) {
    cf = n;
  }
}, rg = {}, ge = {}, h3 = {
  get exports() {
    return ge;
  },
  set exports(n) {
    ge = n;
  }
}, Bt = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Jf = Symbol.for("react.element"), d3 = Symbol.for("react.portal"), p3 = Symbol.for("react.fragment"), m3 = Symbol.for("react.strict_mode"), g3 = Symbol.for("react.profiler"), v3 = Symbol.for("react.provider"), y3 = Symbol.for("react.context"), _3 = Symbol.for("react.forward_ref"), x3 = Symbol.for("react.suspense"), S3 = Symbol.for("react.memo"), M3 = Symbol.for("react.lazy"), TM = Symbol.iterator;
function w3(n) {
  return n === null || typeof n != "object" ? null : (n = TM && n[TM] || n["@@iterator"], typeof n == "function" ? n : null);
}
var TA = { isMounted: function() {
  return !1;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, AA = Object.assign, CA = {};
function Lu(n, e, t) {
  this.props = n, this.context = e, this.refs = CA, this.updater = t || TA;
}
Lu.prototype.isReactComponent = {};
Lu.prototype.setState = function(n, e) {
  if (typeof n != "object" && typeof n != "function" && n != null)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, n, e, "setState");
};
Lu.prototype.forceUpdate = function(n) {
  this.updater.enqueueForceUpdate(this, n, "forceUpdate");
};
function RA() {
}
RA.prototype = Lu.prototype;
function $_(n, e, t) {
  this.props = n, this.context = e, this.refs = CA, this.updater = t || TA;
}
var ex = $_.prototype = new RA();
ex.constructor = $_;
AA(ex, Lu.prototype);
ex.isPureReactComponent = !0;
var AM = Array.isArray, bA = Object.prototype.hasOwnProperty, tx = { current: null }, PA = { key: !0, ref: !0, __self: !0, __source: !0 };
function IA(n, e, t) {
  var i, r = {}, s = null, o = null;
  if (e != null)
    for (i in e.ref !== void 0 && (o = e.ref), e.key !== void 0 && (s = "" + e.key), e)
      bA.call(e, i) && !PA.hasOwnProperty(i) && (r[i] = e[i]);
  var a = arguments.length - 2;
  if (a === 1)
    r.children = t;
  else if (1 < a) {
    for (var c = Array(a), f = 0; f < a; f++)
      c[f] = arguments[f + 2];
    r.children = c;
  }
  if (n && n.defaultProps)
    for (i in a = n.defaultProps, a)
      r[i] === void 0 && (r[i] = a[i]);
  return { $$typeof: Jf, type: n, key: s, ref: o, props: r, _owner: tx.current };
}
function E3(n, e) {
  return { $$typeof: Jf, type: n.type, key: e, ref: n.ref, props: n.props, _owner: n._owner };
}
function nx(n) {
  return typeof n == "object" && n !== null && n.$$typeof === Jf;
}
function T3(n) {
  var e = { "=": "=0", ":": "=2" };
  return "$" + n.replace(/[=:]/g, function(t) {
    return e[t];
  });
}
var CM = /\/+/g;
function iv(n, e) {
  return typeof n == "object" && n !== null && n.key != null ? T3("" + n.key) : e.toString(36);
}
function Up(n, e, t, i, r) {
  var s = typeof n;
  (s === "undefined" || s === "boolean") && (n = null);
  var o = !1;
  if (n === null)
    o = !0;
  else
    switch (s) {
      case "string":
      case "number":
        o = !0;
        break;
      case "object":
        switch (n.$$typeof) {
          case Jf:
          case d3:
            o = !0;
        }
    }
  if (o)
    return o = n, r = r(o), n = i === "" ? "." + iv(o, 0) : i, AM(r) ? (t = "", n != null && (t = n.replace(CM, "$&/") + "/"), Up(r, e, t, "", function(f) {
      return f;
    })) : r != null && (nx(r) && (r = E3(r, t + (!r.key || o && o.key === r.key ? "" : ("" + r.key).replace(CM, "$&/") + "/") + n)), e.push(r)), 1;
  if (o = 0, i = i === "" ? "." : i + ":", AM(n))
    for (var a = 0; a < n.length; a++) {
      s = n[a];
      var c = i + iv(s, a);
      o += Up(s, e, t, c, r);
    }
  else if (c = w3(n), typeof c == "function")
    for (n = c.call(n), a = 0; !(s = n.next()).done; )
      s = s.value, c = i + iv(s, a++), o += Up(s, e, t, c, r);
  else if (s === "object")
    throw e = String(n), Error("Objects are not valid as a React child (found: " + (e === "[object Object]" ? "object with keys {" + Object.keys(n).join(", ") + "}" : e) + "). If you meant to render a collection of children, use an array instead.");
  return o;
}
function pd(n, e, t) {
  if (n == null)
    return n;
  var i = [], r = 0;
  return Up(n, i, "", "", function(s) {
    return e.call(t, s, r++);
  }), i;
}
function A3(n) {
  if (n._status === -1) {
    var e = n._result;
    e = e(), e.then(function(t) {
      (n._status === 0 || n._status === -1) && (n._status = 1, n._result = t);
    }, function(t) {
      (n._status === 0 || n._status === -1) && (n._status = 2, n._result = t);
    }), n._status === -1 && (n._status = 0, n._result = e);
  }
  if (n._status === 1)
    return n._result.default;
  throw n._result;
}
var Pi = { current: null }, Op = { transition: null }, C3 = { ReactCurrentDispatcher: Pi, ReactCurrentBatchConfig: Op, ReactCurrentOwner: tx };
Bt.Children = { map: pd, forEach: function(n, e, t) {
  pd(n, function() {
    e.apply(this, arguments);
  }, t);
}, count: function(n) {
  var e = 0;
  return pd(n, function() {
    e++;
  }), e;
}, toArray: function(n) {
  return pd(n, function(e) {
    return e;
  }) || [];
}, only: function(n) {
  if (!nx(n))
    throw Error("React.Children.only expected to receive a single React element child.");
  return n;
} };
Bt.Component = Lu;
Bt.Fragment = p3;
Bt.Profiler = g3;
Bt.PureComponent = $_;
Bt.StrictMode = m3;
Bt.Suspense = x3;
Bt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = C3;
Bt.cloneElement = function(n, e, t) {
  if (n == null)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + n + ".");
  var i = AA({}, n.props), r = n.key, s = n.ref, o = n._owner;
  if (e != null) {
    if (e.ref !== void 0 && (s = e.ref, o = tx.current), e.key !== void 0 && (r = "" + e.key), n.type && n.type.defaultProps)
      var a = n.type.defaultProps;
    for (c in e)
      bA.call(e, c) && !PA.hasOwnProperty(c) && (i[c] = e[c] === void 0 && a !== void 0 ? a[c] : e[c]);
  }
  var c = arguments.length - 2;
  if (c === 1)
    i.children = t;
  else if (1 < c) {
    a = Array(c);
    for (var f = 0; f < c; f++)
      a[f] = arguments[f + 2];
    i.children = a;
  }
  return { $$typeof: Jf, type: n.type, key: r, ref: s, props: i, _owner: o };
};
Bt.createContext = function(n) {
  return n = { $$typeof: y3, _currentValue: n, _currentValue2: n, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, n.Provider = { $$typeof: v3, _context: n }, n.Consumer = n;
};
Bt.createElement = IA;
Bt.createFactory = function(n) {
  var e = IA.bind(null, n);
  return e.type = n, e;
};
Bt.createRef = function() {
  return { current: null };
};
Bt.forwardRef = function(n) {
  return { $$typeof: _3, render: n };
};
Bt.isValidElement = nx;
Bt.lazy = function(n) {
  return { $$typeof: M3, _payload: { _status: -1, _result: n }, _init: A3 };
};
Bt.memo = function(n, e) {
  return { $$typeof: S3, type: n, compare: e === void 0 ? null : e };
};
Bt.startTransition = function(n) {
  var e = Op.transition;
  Op.transition = {};
  try {
    n();
  } finally {
    Op.transition = e;
  }
};
Bt.unstable_act = function() {
  throw Error("act(...) is not supported in production builds of React.");
};
Bt.useCallback = function(n, e) {
  return Pi.current.useCallback(n, e);
};
Bt.useContext = function(n) {
  return Pi.current.useContext(n);
};
Bt.useDebugValue = function() {
};
Bt.useDeferredValue = function(n) {
  return Pi.current.useDeferredValue(n);
};
Bt.useEffect = function(n, e) {
  return Pi.current.useEffect(n, e);
};
Bt.useId = function() {
  return Pi.current.useId();
};
Bt.useImperativeHandle = function(n, e, t) {
  return Pi.current.useImperativeHandle(n, e, t);
};
Bt.useInsertionEffect = function(n, e) {
  return Pi.current.useInsertionEffect(n, e);
};
Bt.useLayoutEffect = function(n, e) {
  return Pi.current.useLayoutEffect(n, e);
};
Bt.useMemo = function(n, e) {
  return Pi.current.useMemo(n, e);
};
Bt.useReducer = function(n, e, t) {
  return Pi.current.useReducer(n, e, t);
};
Bt.useRef = function(n) {
  return Pi.current.useRef(n);
};
Bt.useState = function(n) {
  return Pi.current.useState(n);
};
Bt.useSyncExternalStore = function(n, e, t) {
  return Pi.current.useSyncExternalStore(n, e, t);
};
Bt.useTransition = function() {
  return Pi.current.useTransition();
};
Bt.version = "18.2.0";
(function(n) {
  n.exports = Bt;
})(h3);
const ix = /* @__PURE__ */ Q_(ge);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var R3 = ge, b3 = Symbol.for("react.element"), P3 = Symbol.for("react.fragment"), I3 = Object.prototype.hasOwnProperty, L3 = R3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, D3 = { key: !0, ref: !0, __self: !0, __source: !0 };
function LA(n, e, t) {
  var i, r = {}, s = null, o = null;
  t !== void 0 && (s = "" + t), e.key !== void 0 && (s = "" + e.key), e.ref !== void 0 && (o = e.ref);
  for (i in e)
    I3.call(e, i) && !D3.hasOwnProperty(i) && (r[i] = e[i]);
  if (n && n.defaultProps)
    for (i in e = n.defaultProps, e)
      r[i] === void 0 && (r[i] = e[i]);
  return { $$typeof: b3, type: n, key: s, ref: o, props: r, _owner: L3.current };
}
rg.Fragment = P3;
rg.jsx = LA;
rg.jsxs = LA;
(function(n) {
  n.exports = rg;
})(f3);
const rx = cf.Fragment, en = cf.jsx, DA = cf.jsxs;
var Ly = {}, Jp = {}, N3 = {
  get exports() {
    return Jp;
  },
  set exports(n) {
    Jp = n;
  }
}, lr = {}, Dy = {}, U3 = {
  get exports() {
    return Dy;
  },
  set exports(n) {
    Dy = n;
  }
}, NA = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(n) {
  function e(z, te) {
    var ne = z.length;
    z.push(te);
    e:
      for (; 0 < ne; ) {
        var he = ne - 1 >>> 1, Se = z[he];
        if (0 < r(Se, te))
          z[he] = te, z[ne] = Se, ne = he;
        else
          break e;
      }
  }
  function t(z) {
    return z.length === 0 ? null : z[0];
  }
  function i(z) {
    if (z.length === 0)
      return null;
    var te = z[0], ne = z.pop();
    if (ne !== te) {
      z[0] = ne;
      e:
        for (var he = 0, Se = z.length, ke = Se >>> 1; he < ke; ) {
          var ce = 2 * (he + 1) - 1, we = z[ce], Ee = ce + 1, De = z[Ee];
          if (0 > r(we, ne))
            Ee < Se && 0 > r(De, we) ? (z[he] = De, z[Ee] = ne, he = Ee) : (z[he] = we, z[ce] = ne, he = ce);
          else if (Ee < Se && 0 > r(De, ne))
            z[he] = De, z[Ee] = ne, he = Ee;
          else
            break e;
        }
    }
    return te;
  }
  function r(z, te) {
    var ne = z.sortIndex - te.sortIndex;
    return ne !== 0 ? ne : z.id - te.id;
  }
  if (typeof performance == "object" && typeof performance.now == "function") {
    var s = performance;
    n.unstable_now = function() {
      return s.now();
    };
  } else {
    var o = Date, a = o.now();
    n.unstable_now = function() {
      return o.now() - a;
    };
  }
  var c = [], f = [], h = 1, d = null, p = 3, v = !1, y = !1, w = !1, x = typeof setTimeout == "function" ? setTimeout : null, g = typeof clearTimeout == "function" ? clearTimeout : null, S = typeof setImmediate < "u" ? setImmediate : null;
  typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function M(z) {
    for (var te = t(f); te !== null; ) {
      if (te.callback === null)
        i(f);
      else if (te.startTime <= z)
        i(f), te.sortIndex = te.expirationTime, e(c, te);
      else
        break;
      te = t(f);
    }
  }
  function T(z) {
    if (w = !1, M(z), !y)
      if (t(c) !== null)
        y = !0, J(U);
      else {
        var te = t(f);
        te !== null && oe(T, te.startTime - z);
      }
  }
  function U(z, te) {
    y = !1, w && (w = !1, g(R), R = -1), v = !0;
    var ne = p;
    try {
      for (M(te), d = t(c); d !== null && (!(d.expirationTime > te) || z && !N()); ) {
        var he = d.callback;
        if (typeof he == "function") {
          d.callback = null, p = d.priorityLevel;
          var Se = he(d.expirationTime <= te);
          te = n.unstable_now(), typeof Se == "function" ? d.callback = Se : d === t(c) && i(c), M(te);
        } else
          i(c);
        d = t(c);
      }
      if (d !== null)
        var ke = !0;
      else {
        var ce = t(f);
        ce !== null && oe(T, ce.startTime - te), ke = !1;
      }
      return ke;
    } finally {
      d = null, p = ne, v = !1;
    }
  }
  var P = !1, D = null, R = -1, C = 5, A = -1;
  function N() {
    return !(n.unstable_now() - A < C);
  }
  function G() {
    if (D !== null) {
      var z = n.unstable_now();
      A = z;
      var te = !0;
      try {
        te = D(!0, z);
      } finally {
        te ? W() : (P = !1, D = null);
      }
    } else
      P = !1;
  }
  var W;
  if (typeof S == "function")
    W = function() {
      S(G);
    };
  else if (typeof MessageChannel < "u") {
    var j = new MessageChannel(), Q = j.port2;
    j.port1.onmessage = G, W = function() {
      Q.postMessage(null);
    };
  } else
    W = function() {
      x(G, 0);
    };
  function J(z) {
    D = z, P || (P = !0, W());
  }
  function oe(z, te) {
    R = x(function() {
      z(n.unstable_now());
    }, te);
  }
  n.unstable_IdlePriority = 5, n.unstable_ImmediatePriority = 1, n.unstable_LowPriority = 4, n.unstable_NormalPriority = 3, n.unstable_Profiling = null, n.unstable_UserBlockingPriority = 2, n.unstable_cancelCallback = function(z) {
    z.callback = null;
  }, n.unstable_continueExecution = function() {
    y || v || (y = !0, J(U));
  }, n.unstable_forceFrameRate = function(z) {
    0 > z || 125 < z ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : C = 0 < z ? Math.floor(1e3 / z) : 5;
  }, n.unstable_getCurrentPriorityLevel = function() {
    return p;
  }, n.unstable_getFirstCallbackNode = function() {
    return t(c);
  }, n.unstable_next = function(z) {
    switch (p) {
      case 1:
      case 2:
      case 3:
        var te = 3;
        break;
      default:
        te = p;
    }
    var ne = p;
    p = te;
    try {
      return z();
    } finally {
      p = ne;
    }
  }, n.unstable_pauseExecution = function() {
  }, n.unstable_requestPaint = function() {
  }, n.unstable_runWithPriority = function(z, te) {
    switch (z) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        z = 3;
    }
    var ne = p;
    p = z;
    try {
      return te();
    } finally {
      p = ne;
    }
  }, n.unstable_scheduleCallback = function(z, te, ne) {
    var he = n.unstable_now();
    switch (typeof ne == "object" && ne !== null ? (ne = ne.delay, ne = typeof ne == "number" && 0 < ne ? he + ne : he) : ne = he, z) {
      case 1:
        var Se = -1;
        break;
      case 2:
        Se = 250;
        break;
      case 5:
        Se = 1073741823;
        break;
      case 4:
        Se = 1e4;
        break;
      default:
        Se = 5e3;
    }
    return Se = ne + Se, z = { id: h++, callback: te, priorityLevel: z, startTime: ne, expirationTime: Se, sortIndex: -1 }, ne > he ? (z.sortIndex = ne, e(f, z), t(c) === null && z === t(f) && (w ? (g(R), R = -1) : w = !0, oe(T, ne - he))) : (z.sortIndex = Se, e(c, z), y || v || (y = !0, J(U))), z;
  }, n.unstable_shouldYield = N, n.unstable_wrapCallback = function(z) {
    var te = p;
    return function() {
      var ne = p;
      p = te;
      try {
        return z.apply(this, arguments);
      } finally {
        p = ne;
      }
    };
  };
})(NA);
(function(n) {
  n.exports = NA;
})(U3);
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var UA = ge, or = Dy;
function Oe(n) {
  for (var e = "https://reactjs.org/docs/error-decoder.html?invariant=" + n, t = 1; t < arguments.length; t++)
    e += "&args[]=" + encodeURIComponent(arguments[t]);
  return "Minified React error #" + n + "; visit " + e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var OA = /* @__PURE__ */ new Set(), ff = {};
function Qa(n, e) {
  yu(n, e), yu(n + "Capture", e);
}
function yu(n, e) {
  for (ff[n] = e, n = 0; n < e.length; n++)
    OA.add(e[n]);
}
var Ws = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), Ny = Object.prototype.hasOwnProperty, O3 = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, RM = {}, bM = {};
function F3(n) {
  return Ny.call(bM, n) ? !0 : Ny.call(RM, n) ? !1 : O3.test(n) ? bM[n] = !0 : (RM[n] = !0, !1);
}
function k3(n, e, t, i) {
  if (t !== null && t.type === 0)
    return !1;
  switch (typeof e) {
    case "function":
    case "symbol":
      return !0;
    case "boolean":
      return i ? !1 : t !== null ? !t.acceptsBooleans : (n = n.toLowerCase().slice(0, 5), n !== "data-" && n !== "aria-");
    default:
      return !1;
  }
}
function z3(n, e, t, i) {
  if (e === null || typeof e > "u" || k3(n, e, t, i))
    return !0;
  if (i)
    return !1;
  if (t !== null)
    switch (t.type) {
      case 3:
        return !e;
      case 4:
        return e === !1;
      case 5:
        return isNaN(e);
      case 6:
        return isNaN(e) || 1 > e;
    }
  return !1;
}
function Ii(n, e, t, i, r, s, o) {
  this.acceptsBooleans = e === 2 || e === 3 || e === 4, this.attributeName = i, this.attributeNamespace = r, this.mustUseProperty = t, this.propertyName = n, this.type = e, this.sanitizeURL = s, this.removeEmptyString = o;
}
var ri = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(n) {
  ri[n] = new Ii(n, 0, !1, n, null, !1, !1);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(n) {
  var e = n[0];
  ri[e] = new Ii(e, 1, !1, n[1], null, !1, !1);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(n) {
  ri[n] = new Ii(n, 2, !1, n.toLowerCase(), null, !1, !1);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(n) {
  ri[n] = new Ii(n, 2, !1, n, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(n) {
  ri[n] = new Ii(n, 3, !1, n.toLowerCase(), null, !1, !1);
});
["checked", "multiple", "muted", "selected"].forEach(function(n) {
  ri[n] = new Ii(n, 3, !0, n, null, !1, !1);
});
["capture", "download"].forEach(function(n) {
  ri[n] = new Ii(n, 4, !1, n, null, !1, !1);
});
["cols", "rows", "size", "span"].forEach(function(n) {
  ri[n] = new Ii(n, 6, !1, n, null, !1, !1);
});
["rowSpan", "start"].forEach(function(n) {
  ri[n] = new Ii(n, 5, !1, n.toLowerCase(), null, !1, !1);
});
var sx = /[\-:]([a-z])/g;
function ox(n) {
  return n[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(n) {
  var e = n.replace(
    sx,
    ox
  );
  ri[e] = new Ii(e, 1, !1, n, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(n) {
  var e = n.replace(sx, ox);
  ri[e] = new Ii(e, 1, !1, n, "http://www.w3.org/1999/xlink", !1, !1);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(n) {
  var e = n.replace(sx, ox);
  ri[e] = new Ii(e, 1, !1, n, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
["tabIndex", "crossOrigin"].forEach(function(n) {
  ri[n] = new Ii(n, 1, !1, n.toLowerCase(), null, !1, !1);
});
ri.xlinkHref = new Ii("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
["src", "href", "action", "formAction"].forEach(function(n) {
  ri[n] = new Ii(n, 1, !1, n.toLowerCase(), null, !0, !0);
});
function ax(n, e, t, i) {
  var r = ri.hasOwnProperty(e) ? ri[e] : null;
  (r !== null ? r.type !== 0 : i || !(2 < e.length) || e[0] !== "o" && e[0] !== "O" || e[1] !== "n" && e[1] !== "N") && (z3(e, t, r, i) && (t = null), i || r === null ? F3(e) && (t === null ? n.removeAttribute(e) : n.setAttribute(e, "" + t)) : r.mustUseProperty ? n[r.propertyName] = t === null ? r.type === 3 ? !1 : "" : t : (e = r.attributeName, i = r.attributeNamespace, t === null ? n.removeAttribute(e) : (r = r.type, t = r === 3 || r === 4 && t === !0 ? "" : "" + t, i ? n.setAttributeNS(i, e, t) : n.setAttribute(e, t))));
}
var Zs = UA.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, md = Symbol.for("react.element"), Yl = Symbol.for("react.portal"), ql = Symbol.for("react.fragment"), lx = Symbol.for("react.strict_mode"), Uy = Symbol.for("react.profiler"), FA = Symbol.for("react.provider"), kA = Symbol.for("react.context"), ux = Symbol.for("react.forward_ref"), Oy = Symbol.for("react.suspense"), Fy = Symbol.for("react.suspense_list"), cx = Symbol.for("react.memo"), go = Symbol.for("react.lazy"), zA = Symbol.for("react.offscreen"), PM = Symbol.iterator;
function rc(n) {
  return n === null || typeof n != "object" ? null : (n = PM && n[PM] || n["@@iterator"], typeof n == "function" ? n : null);
}
var wn = Object.assign, rv;
function Oc(n) {
  if (rv === void 0)
    try {
      throw Error();
    } catch (t) {
      var e = t.stack.trim().match(/\n( *(at )?)/);
      rv = e && e[1] || "";
    }
  return `
` + rv + n;
}
var sv = !1;
function ov(n, e) {
  if (!n || sv)
    return "";
  sv = !0;
  var t = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (e)
      if (e = function() {
        throw Error();
      }, Object.defineProperty(e.prototype, "props", { set: function() {
        throw Error();
      } }), typeof Reflect == "object" && Reflect.construct) {
        try {
          Reflect.construct(e, []);
        } catch (f) {
          var i = f;
        }
        Reflect.construct(n, [], e);
      } else {
        try {
          e.call();
        } catch (f) {
          i = f;
        }
        n.call(e.prototype);
      }
    else {
      try {
        throw Error();
      } catch (f) {
        i = f;
      }
      n();
    }
  } catch (f) {
    if (f && i && typeof f.stack == "string") {
      for (var r = f.stack.split(`
`), s = i.stack.split(`
`), o = r.length - 1, a = s.length - 1; 1 <= o && 0 <= a && r[o] !== s[a]; )
        a--;
      for (; 1 <= o && 0 <= a; o--, a--)
        if (r[o] !== s[a]) {
          if (o !== 1 || a !== 1)
            do
              if (o--, a--, 0 > a || r[o] !== s[a]) {
                var c = `
` + r[o].replace(" at new ", " at ");
                return n.displayName && c.includes("<anonymous>") && (c = c.replace("<anonymous>", n.displayName)), c;
              }
            while (1 <= o && 0 <= a);
          break;
        }
    }
  } finally {
    sv = !1, Error.prepareStackTrace = t;
  }
  return (n = n ? n.displayName || n.name : "") ? Oc(n) : "";
}
function B3(n) {
  switch (n.tag) {
    case 5:
      return Oc(n.type);
    case 16:
      return Oc("Lazy");
    case 13:
      return Oc("Suspense");
    case 19:
      return Oc("SuspenseList");
    case 0:
    case 2:
    case 15:
      return n = ov(n.type, !1), n;
    case 11:
      return n = ov(n.type.render, !1), n;
    case 1:
      return n = ov(n.type, !0), n;
    default:
      return "";
  }
}
function ky(n) {
  if (n == null)
    return null;
  if (typeof n == "function")
    return n.displayName || n.name || null;
  if (typeof n == "string")
    return n;
  switch (n) {
    case ql:
      return "Fragment";
    case Yl:
      return "Portal";
    case Uy:
      return "Profiler";
    case lx:
      return "StrictMode";
    case Oy:
      return "Suspense";
    case Fy:
      return "SuspenseList";
  }
  if (typeof n == "object")
    switch (n.$$typeof) {
      case kA:
        return (n.displayName || "Context") + ".Consumer";
      case FA:
        return (n._context.displayName || "Context") + ".Provider";
      case ux:
        var e = n.render;
        return n = n.displayName, n || (n = e.displayName || e.name || "", n = n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef"), n;
      case cx:
        return e = n.displayName || null, e !== null ? e : ky(n.type) || "Memo";
      case go:
        e = n._payload, n = n._init;
        try {
          return ky(n(e));
        } catch {
        }
    }
  return null;
}
function H3(n) {
  var e = n.type;
  switch (n.tag) {
    case 24:
      return "Cache";
    case 9:
      return (e.displayName || "Context") + ".Consumer";
    case 10:
      return (e._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return n = e.render, n = n.displayName || n.name || "", e.displayName || (n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return e;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return ky(e);
    case 8:
      return e === lx ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if (typeof e == "function")
        return e.displayName || e.name || null;
      if (typeof e == "string")
        return e;
  }
  return null;
}
function Uo(n) {
  switch (typeof n) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return n;
    case "object":
      return n;
    default:
      return "";
  }
}
function BA(n) {
  var e = n.type;
  return (n = n.nodeName) && n.toLowerCase() === "input" && (e === "checkbox" || e === "radio");
}
function V3(n) {
  var e = BA(n) ? "checked" : "value", t = Object.getOwnPropertyDescriptor(n.constructor.prototype, e), i = "" + n[e];
  if (!n.hasOwnProperty(e) && typeof t < "u" && typeof t.get == "function" && typeof t.set == "function") {
    var r = t.get, s = t.set;
    return Object.defineProperty(n, e, { configurable: !0, get: function() {
      return r.call(this);
    }, set: function(o) {
      i = "" + o, s.call(this, o);
    } }), Object.defineProperty(n, e, { enumerable: t.enumerable }), { getValue: function() {
      return i;
    }, setValue: function(o) {
      i = "" + o;
    }, stopTracking: function() {
      n._valueTracker = null, delete n[e];
    } };
  }
}
function gd(n) {
  n._valueTracker || (n._valueTracker = V3(n));
}
function HA(n) {
  if (!n)
    return !1;
  var e = n._valueTracker;
  if (!e)
    return !0;
  var t = e.getValue(), i = "";
  return n && (i = BA(n) ? n.checked ? "true" : "false" : n.value), n = i, n !== t ? (e.setValue(n), !0) : !1;
}
function Qp(n) {
  if (n = n || (typeof document < "u" ? document : void 0), typeof n > "u")
    return null;
  try {
    return n.activeElement || n.body;
  } catch {
    return n.body;
  }
}
function zy(n, e) {
  var t = e.checked;
  return wn({}, e, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: t ?? n._wrapperState.initialChecked });
}
function IM(n, e) {
  var t = e.defaultValue == null ? "" : e.defaultValue, i = e.checked != null ? e.checked : e.defaultChecked;
  t = Uo(e.value != null ? e.value : t), n._wrapperState = { initialChecked: i, initialValue: t, controlled: e.type === "checkbox" || e.type === "radio" ? e.checked != null : e.value != null };
}
function VA(n, e) {
  e = e.checked, e != null && ax(n, "checked", e, !1);
}
function By(n, e) {
  VA(n, e);
  var t = Uo(e.value), i = e.type;
  if (t != null)
    i === "number" ? (t === 0 && n.value === "" || n.value != t) && (n.value = "" + t) : n.value !== "" + t && (n.value = "" + t);
  else if (i === "submit" || i === "reset") {
    n.removeAttribute("value");
    return;
  }
  e.hasOwnProperty("value") ? Hy(n, e.type, t) : e.hasOwnProperty("defaultValue") && Hy(n, e.type, Uo(e.defaultValue)), e.checked == null && e.defaultChecked != null && (n.defaultChecked = !!e.defaultChecked);
}
function LM(n, e, t) {
  if (e.hasOwnProperty("value") || e.hasOwnProperty("defaultValue")) {
    var i = e.type;
    if (!(i !== "submit" && i !== "reset" || e.value !== void 0 && e.value !== null))
      return;
    e = "" + n._wrapperState.initialValue, t || e === n.value || (n.value = e), n.defaultValue = e;
  }
  t = n.name, t !== "" && (n.name = ""), n.defaultChecked = !!n._wrapperState.initialChecked, t !== "" && (n.name = t);
}
function Hy(n, e, t) {
  (e !== "number" || Qp(n.ownerDocument) !== n) && (t == null ? n.defaultValue = "" + n._wrapperState.initialValue : n.defaultValue !== "" + t && (n.defaultValue = "" + t));
}
var Fc = Array.isArray;
function cu(n, e, t, i) {
  if (n = n.options, e) {
    e = {};
    for (var r = 0; r < t.length; r++)
      e["$" + t[r]] = !0;
    for (t = 0; t < n.length; t++)
      r = e.hasOwnProperty("$" + n[t].value), n[t].selected !== r && (n[t].selected = r), r && i && (n[t].defaultSelected = !0);
  } else {
    for (t = "" + Uo(t), e = null, r = 0; r < n.length; r++) {
      if (n[r].value === t) {
        n[r].selected = !0, i && (n[r].defaultSelected = !0);
        return;
      }
      e !== null || n[r].disabled || (e = n[r]);
    }
    e !== null && (e.selected = !0);
  }
}
function Vy(n, e) {
  if (e.dangerouslySetInnerHTML != null)
    throw Error(Oe(91));
  return wn({}, e, { value: void 0, defaultValue: void 0, children: "" + n._wrapperState.initialValue });
}
function DM(n, e) {
  var t = e.value;
  if (t == null) {
    if (t = e.children, e = e.defaultValue, t != null) {
      if (e != null)
        throw Error(Oe(92));
      if (Fc(t)) {
        if (1 < t.length)
          throw Error(Oe(93));
        t = t[0];
      }
      e = t;
    }
    e == null && (e = ""), t = e;
  }
  n._wrapperState = { initialValue: Uo(t) };
}
function GA(n, e) {
  var t = Uo(e.value), i = Uo(e.defaultValue);
  t != null && (t = "" + t, t !== n.value && (n.value = t), e.defaultValue == null && n.defaultValue !== t && (n.defaultValue = t)), i != null && (n.defaultValue = "" + i);
}
function NM(n) {
  var e = n.textContent;
  e === n._wrapperState.initialValue && e !== "" && e !== null && (n.value = e);
}
function WA(n) {
  switch (n) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function Gy(n, e) {
  return n == null || n === "http://www.w3.org/1999/xhtml" ? WA(e) : n === "http://www.w3.org/2000/svg" && e === "foreignObject" ? "http://www.w3.org/1999/xhtml" : n;
}
var vd, XA = function(n) {
  return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(e, t, i, r) {
    MSApp.execUnsafeLocalFunction(function() {
      return n(e, t, i, r);
    });
  } : n;
}(function(n, e) {
  if (n.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in n)
    n.innerHTML = e;
  else {
    for (vd = vd || document.createElement("div"), vd.innerHTML = "<svg>" + e.valueOf().toString() + "</svg>", e = vd.firstChild; n.firstChild; )
      n.removeChild(n.firstChild);
    for (; e.firstChild; )
      n.appendChild(e.firstChild);
  }
});
function hf(n, e) {
  if (e) {
    var t = n.firstChild;
    if (t && t === n.lastChild && t.nodeType === 3) {
      t.nodeValue = e;
      return;
    }
  }
  n.textContent = e;
}
var Vc = {
  animationIterationCount: !0,
  aspectRatio: !0,
  borderImageOutset: !0,
  borderImageSlice: !0,
  borderImageWidth: !0,
  boxFlex: !0,
  boxFlexGroup: !0,
  boxOrdinalGroup: !0,
  columnCount: !0,
  columns: !0,
  flex: !0,
  flexGrow: !0,
  flexPositive: !0,
  flexShrink: !0,
  flexNegative: !0,
  flexOrder: !0,
  gridArea: !0,
  gridRow: !0,
  gridRowEnd: !0,
  gridRowSpan: !0,
  gridRowStart: !0,
  gridColumn: !0,
  gridColumnEnd: !0,
  gridColumnSpan: !0,
  gridColumnStart: !0,
  fontWeight: !0,
  lineClamp: !0,
  lineHeight: !0,
  opacity: !0,
  order: !0,
  orphans: !0,
  tabSize: !0,
  widows: !0,
  zIndex: !0,
  zoom: !0,
  fillOpacity: !0,
  floodOpacity: !0,
  stopOpacity: !0,
  strokeDasharray: !0,
  strokeDashoffset: !0,
  strokeMiterlimit: !0,
  strokeOpacity: !0,
  strokeWidth: !0
}, G3 = ["Webkit", "ms", "Moz", "O"];
Object.keys(Vc).forEach(function(n) {
  G3.forEach(function(e) {
    e = e + n.charAt(0).toUpperCase() + n.substring(1), Vc[e] = Vc[n];
  });
});
function YA(n, e, t) {
  return e == null || typeof e == "boolean" || e === "" ? "" : t || typeof e != "number" || e === 0 || Vc.hasOwnProperty(n) && Vc[n] ? ("" + e).trim() : e + "px";
}
function qA(n, e) {
  n = n.style;
  for (var t in e)
    if (e.hasOwnProperty(t)) {
      var i = t.indexOf("--") === 0, r = YA(t, e[t], i);
      t === "float" && (t = "cssFloat"), i ? n.setProperty(t, r) : n[t] = r;
    }
}
var W3 = wn({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
function Wy(n, e) {
  if (e) {
    if (W3[n] && (e.children != null || e.dangerouslySetInnerHTML != null))
      throw Error(Oe(137, n));
    if (e.dangerouslySetInnerHTML != null) {
      if (e.children != null)
        throw Error(Oe(60));
      if (typeof e.dangerouslySetInnerHTML != "object" || !("__html" in e.dangerouslySetInnerHTML))
        throw Error(Oe(61));
    }
    if (e.style != null && typeof e.style != "object")
      throw Error(Oe(62));
  }
}
function Xy(n, e) {
  if (n.indexOf("-") === -1)
    return typeof e.is == "string";
  switch (n) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;
    default:
      return !0;
  }
}
var Yy = null;
function fx(n) {
  return n = n.target || n.srcElement || window, n.correspondingUseElement && (n = n.correspondingUseElement), n.nodeType === 3 ? n.parentNode : n;
}
var qy = null, fu = null, hu = null;
function UM(n) {
  if (n = eh(n)) {
    if (typeof qy != "function")
      throw Error(Oe(280));
    var e = n.stateNode;
    e && (e = ug(e), qy(n.stateNode, n.type, e));
  }
}
function jA(n) {
  fu ? hu ? hu.push(n) : hu = [n] : fu = n;
}
function ZA() {
  if (fu) {
    var n = fu, e = hu;
    if (hu = fu = null, UM(n), e)
      for (n = 0; n < e.length; n++)
        UM(e[n]);
  }
}
function KA(n, e) {
  return n(e);
}
function JA() {
}
var av = !1;
function QA(n, e, t) {
  if (av)
    return n(e, t);
  av = !0;
  try {
    return KA(n, e, t);
  } finally {
    av = !1, (fu !== null || hu !== null) && (JA(), ZA());
  }
}
function df(n, e) {
  var t = n.stateNode;
  if (t === null)
    return null;
  var i = ug(t);
  if (i === null)
    return null;
  t = i[e];
  e:
    switch (e) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (i = !i.disabled) || (n = n.type, i = !(n === "button" || n === "input" || n === "select" || n === "textarea")), n = !i;
        break e;
      default:
        n = !1;
    }
  if (n)
    return null;
  if (t && typeof t != "function")
    throw Error(Oe(231, e, typeof t));
  return t;
}
var jy = !1;
if (Ws)
  try {
    var sc = {};
    Object.defineProperty(sc, "passive", { get: function() {
      jy = !0;
    } }), window.addEventListener("test", sc, sc), window.removeEventListener("test", sc, sc);
  } catch {
    jy = !1;
  }
function X3(n, e, t, i, r, s, o, a, c) {
  var f = Array.prototype.slice.call(arguments, 3);
  try {
    e.apply(t, f);
  } catch (h) {
    this.onError(h);
  }
}
var Gc = !1, $p = null, em = !1, Zy = null, Y3 = { onError: function(n) {
  Gc = !0, $p = n;
} };
function q3(n, e, t, i, r, s, o, a, c) {
  Gc = !1, $p = null, X3.apply(Y3, arguments);
}
function j3(n, e, t, i, r, s, o, a, c) {
  if (q3.apply(this, arguments), Gc) {
    if (Gc) {
      var f = $p;
      Gc = !1, $p = null;
    } else
      throw Error(Oe(198));
    em || (em = !0, Zy = f);
  }
}
function $a(n) {
  var e = n, t = n;
  if (n.alternate)
    for (; e.return; )
      e = e.return;
  else {
    n = e;
    do
      e = n, e.flags & 4098 && (t = e.return), n = e.return;
    while (n);
  }
  return e.tag === 3 ? t : null;
}
function $A(n) {
  if (n.tag === 13) {
    var e = n.memoizedState;
    if (e === null && (n = n.alternate, n !== null && (e = n.memoizedState)), e !== null)
      return e.dehydrated;
  }
  return null;
}
function OM(n) {
  if ($a(n) !== n)
    throw Error(Oe(188));
}
function Z3(n) {
  var e = n.alternate;
  if (!e) {
    if (e = $a(n), e === null)
      throw Error(Oe(188));
    return e !== n ? null : n;
  }
  for (var t = n, i = e; ; ) {
    var r = t.return;
    if (r === null)
      break;
    var s = r.alternate;
    if (s === null) {
      if (i = r.return, i !== null) {
        t = i;
        continue;
      }
      break;
    }
    if (r.child === s.child) {
      for (s = r.child; s; ) {
        if (s === t)
          return OM(r), n;
        if (s === i)
          return OM(r), e;
        s = s.sibling;
      }
      throw Error(Oe(188));
    }
    if (t.return !== i.return)
      t = r, i = s;
    else {
      for (var o = !1, a = r.child; a; ) {
        if (a === t) {
          o = !0, t = r, i = s;
          break;
        }
        if (a === i) {
          o = !0, i = r, t = s;
          break;
        }
        a = a.sibling;
      }
      if (!o) {
        for (a = s.child; a; ) {
          if (a === t) {
            o = !0, t = s, i = r;
            break;
          }
          if (a === i) {
            o = !0, i = s, t = r;
            break;
          }
          a = a.sibling;
        }
        if (!o)
          throw Error(Oe(189));
      }
    }
    if (t.alternate !== i)
      throw Error(Oe(190));
  }
  if (t.tag !== 3)
    throw Error(Oe(188));
  return t.stateNode.current === t ? n : e;
}
function eC(n) {
  return n = Z3(n), n !== null ? tC(n) : null;
}
function tC(n) {
  if (n.tag === 5 || n.tag === 6)
    return n;
  for (n = n.child; n !== null; ) {
    var e = tC(n);
    if (e !== null)
      return e;
    n = n.sibling;
  }
  return null;
}
var nC = or.unstable_scheduleCallback, FM = or.unstable_cancelCallback, K3 = or.unstable_shouldYield, J3 = or.unstable_requestPaint, In = or.unstable_now, Q3 = or.unstable_getCurrentPriorityLevel, hx = or.unstable_ImmediatePriority, iC = or.unstable_UserBlockingPriority, tm = or.unstable_NormalPriority, $3 = or.unstable_LowPriority, rC = or.unstable_IdlePriority, sg = null, hs = null;
function eI(n) {
  if (hs && typeof hs.onCommitFiberRoot == "function")
    try {
      hs.onCommitFiberRoot(sg, n, void 0, (n.current.flags & 128) === 128);
    } catch {
    }
}
var Xr = Math.clz32 ? Math.clz32 : iI, tI = Math.log, nI = Math.LN2;
function iI(n) {
  return n >>>= 0, n === 0 ? 32 : 31 - (tI(n) / nI | 0) | 0;
}
var yd = 64, _d = 4194304;
function kc(n) {
  switch (n & -n) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return n & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return n & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return n;
  }
}
function nm(n, e) {
  var t = n.pendingLanes;
  if (t === 0)
    return 0;
  var i = 0, r = n.suspendedLanes, s = n.pingedLanes, o = t & 268435455;
  if (o !== 0) {
    var a = o & ~r;
    a !== 0 ? i = kc(a) : (s &= o, s !== 0 && (i = kc(s)));
  } else
    o = t & ~r, o !== 0 ? i = kc(o) : s !== 0 && (i = kc(s));
  if (i === 0)
    return 0;
  if (e !== 0 && e !== i && !(e & r) && (r = i & -i, s = e & -e, r >= s || r === 16 && (s & 4194240) !== 0))
    return e;
  if (i & 4 && (i |= t & 16), e = n.entangledLanes, e !== 0)
    for (n = n.entanglements, e &= i; 0 < e; )
      t = 31 - Xr(e), r = 1 << t, i |= n[t], e &= ~r;
  return i;
}
function rI(n, e) {
  switch (n) {
    case 1:
    case 2:
    case 4:
      return e + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return e + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function sI(n, e) {
  for (var t = n.suspendedLanes, i = n.pingedLanes, r = n.expirationTimes, s = n.pendingLanes; 0 < s; ) {
    var o = 31 - Xr(s), a = 1 << o, c = r[o];
    c === -1 ? (!(a & t) || a & i) && (r[o] = rI(a, e)) : c <= e && (n.expiredLanes |= a), s &= ~a;
  }
}
function Ky(n) {
  return n = n.pendingLanes & -1073741825, n !== 0 ? n : n & 1073741824 ? 1073741824 : 0;
}
function sC() {
  var n = yd;
  return yd <<= 1, !(yd & 4194240) && (yd = 64), n;
}
function lv(n) {
  for (var e = [], t = 0; 31 > t; t++)
    e.push(n);
  return e;
}
function Qf(n, e, t) {
  n.pendingLanes |= e, e !== 536870912 && (n.suspendedLanes = 0, n.pingedLanes = 0), n = n.eventTimes, e = 31 - Xr(e), n[e] = t;
}
function oI(n, e) {
  var t = n.pendingLanes & ~e;
  n.pendingLanes = e, n.suspendedLanes = 0, n.pingedLanes = 0, n.expiredLanes &= e, n.mutableReadLanes &= e, n.entangledLanes &= e, e = n.entanglements;
  var i = n.eventTimes;
  for (n = n.expirationTimes; 0 < t; ) {
    var r = 31 - Xr(t), s = 1 << r;
    e[r] = 0, i[r] = -1, n[r] = -1, t &= ~s;
  }
}
function dx(n, e) {
  var t = n.entangledLanes |= e;
  for (n = n.entanglements; t; ) {
    var i = 31 - Xr(t), r = 1 << i;
    r & e | n[i] & e && (n[i] |= e), t &= ~r;
  }
}
var tn = 0;
function oC(n) {
  return n &= -n, 1 < n ? 4 < n ? n & 268435455 ? 16 : 536870912 : 4 : 1;
}
var aC, px, lC, uC, cC, Jy = !1, xd = [], Co = null, Ro = null, bo = null, pf = /* @__PURE__ */ new Map(), mf = /* @__PURE__ */ new Map(), _o = [], aI = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function kM(n, e) {
  switch (n) {
    case "focusin":
    case "focusout":
      Co = null;
      break;
    case "dragenter":
    case "dragleave":
      Ro = null;
      break;
    case "mouseover":
    case "mouseout":
      bo = null;
      break;
    case "pointerover":
    case "pointerout":
      pf.delete(e.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      mf.delete(e.pointerId);
  }
}
function oc(n, e, t, i, r, s) {
  return n === null || n.nativeEvent !== s ? (n = { blockedOn: e, domEventName: t, eventSystemFlags: i, nativeEvent: s, targetContainers: [r] }, e !== null && (e = eh(e), e !== null && px(e)), n) : (n.eventSystemFlags |= i, e = n.targetContainers, r !== null && e.indexOf(r) === -1 && e.push(r), n);
}
function lI(n, e, t, i, r) {
  switch (e) {
    case "focusin":
      return Co = oc(Co, n, e, t, i, r), !0;
    case "dragenter":
      return Ro = oc(Ro, n, e, t, i, r), !0;
    case "mouseover":
      return bo = oc(bo, n, e, t, i, r), !0;
    case "pointerover":
      var s = r.pointerId;
      return pf.set(s, oc(pf.get(s) || null, n, e, t, i, r)), !0;
    case "gotpointercapture":
      return s = r.pointerId, mf.set(s, oc(mf.get(s) || null, n, e, t, i, r)), !0;
  }
  return !1;
}
function fC(n) {
  var e = Aa(n.target);
  if (e !== null) {
    var t = $a(e);
    if (t !== null) {
      if (e = t.tag, e === 13) {
        if (e = $A(t), e !== null) {
          n.blockedOn = e, cC(n.priority, function() {
            lC(t);
          });
          return;
        }
      } else if (e === 3 && t.stateNode.current.memoizedState.isDehydrated) {
        n.blockedOn = t.tag === 3 ? t.stateNode.containerInfo : null;
        return;
      }
    }
  }
  n.blockedOn = null;
}
function Fp(n) {
  if (n.blockedOn !== null)
    return !1;
  for (var e = n.targetContainers; 0 < e.length; ) {
    var t = Qy(n.domEventName, n.eventSystemFlags, e[0], n.nativeEvent);
    if (t === null) {
      t = n.nativeEvent;
      var i = new t.constructor(t.type, t);
      Yy = i, t.target.dispatchEvent(i), Yy = null;
    } else
      return e = eh(t), e !== null && px(e), n.blockedOn = t, !1;
    e.shift();
  }
  return !0;
}
function zM(n, e, t) {
  Fp(n) && t.delete(e);
}
function uI() {
  Jy = !1, Co !== null && Fp(Co) && (Co = null), Ro !== null && Fp(Ro) && (Ro = null), bo !== null && Fp(bo) && (bo = null), pf.forEach(zM), mf.forEach(zM);
}
function ac(n, e) {
  n.blockedOn === e && (n.blockedOn = null, Jy || (Jy = !0, or.unstable_scheduleCallback(or.unstable_NormalPriority, uI)));
}
function gf(n) {
  function e(r) {
    return ac(r, n);
  }
  if (0 < xd.length) {
    ac(xd[0], n);
    for (var t = 1; t < xd.length; t++) {
      var i = xd[t];
      i.blockedOn === n && (i.blockedOn = null);
    }
  }
  for (Co !== null && ac(Co, n), Ro !== null && ac(Ro, n), bo !== null && ac(bo, n), pf.forEach(e), mf.forEach(e), t = 0; t < _o.length; t++)
    i = _o[t], i.blockedOn === n && (i.blockedOn = null);
  for (; 0 < _o.length && (t = _o[0], t.blockedOn === null); )
    fC(t), t.blockedOn === null && _o.shift();
}
var du = Zs.ReactCurrentBatchConfig, im = !0;
function cI(n, e, t, i) {
  var r = tn, s = du.transition;
  du.transition = null;
  try {
    tn = 1, mx(n, e, t, i);
  } finally {
    tn = r, du.transition = s;
  }
}
function fI(n, e, t, i) {
  var r = tn, s = du.transition;
  du.transition = null;
  try {
    tn = 4, mx(n, e, t, i);
  } finally {
    tn = r, du.transition = s;
  }
}
function mx(n, e, t, i) {
  if (im) {
    var r = Qy(n, e, t, i);
    if (r === null)
      yv(n, e, i, rm, t), kM(n, i);
    else if (lI(r, n, e, t, i))
      i.stopPropagation();
    else if (kM(n, i), e & 4 && -1 < aI.indexOf(n)) {
      for (; r !== null; ) {
        var s = eh(r);
        if (s !== null && aC(s), s = Qy(n, e, t, i), s === null && yv(n, e, i, rm, t), s === r)
          break;
        r = s;
      }
      r !== null && i.stopPropagation();
    } else
      yv(n, e, i, null, t);
  }
}
var rm = null;
function Qy(n, e, t, i) {
  if (rm = null, n = fx(i), n = Aa(n), n !== null)
    if (e = $a(n), e === null)
      n = null;
    else if (t = e.tag, t === 13) {
      if (n = $A(e), n !== null)
        return n;
      n = null;
    } else if (t === 3) {
      if (e.stateNode.current.memoizedState.isDehydrated)
        return e.tag === 3 ? e.stateNode.containerInfo : null;
      n = null;
    } else
      e !== n && (n = null);
  return rm = n, null;
}
function hC(n) {
  switch (n) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (Q3()) {
        case hx:
          return 1;
        case iC:
          return 4;
        case tm:
        case $3:
          return 16;
        case rC:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var wo = null, gx = null, kp = null;
function dC() {
  if (kp)
    return kp;
  var n, e = gx, t = e.length, i, r = "value" in wo ? wo.value : wo.textContent, s = r.length;
  for (n = 0; n < t && e[n] === r[n]; n++)
    ;
  var o = t - n;
  for (i = 1; i <= o && e[t - i] === r[s - i]; i++)
    ;
  return kp = r.slice(n, 1 < i ? 1 - i : void 0);
}
function zp(n) {
  var e = n.keyCode;
  return "charCode" in n ? (n = n.charCode, n === 0 && e === 13 && (n = 13)) : n = e, n === 10 && (n = 13), 32 <= n || n === 13 ? n : 0;
}
function Sd() {
  return !0;
}
function BM() {
  return !1;
}
function ur(n) {
  function e(t, i, r, s, o) {
    this._reactName = t, this._targetInst = r, this.type = i, this.nativeEvent = s, this.target = o, this.currentTarget = null;
    for (var a in n)
      n.hasOwnProperty(a) && (t = n[a], this[a] = t ? t(s) : s[a]);
    return this.isDefaultPrevented = (s.defaultPrevented != null ? s.defaultPrevented : s.returnValue === !1) ? Sd : BM, this.isPropagationStopped = BM, this;
  }
  return wn(e.prototype, { preventDefault: function() {
    this.defaultPrevented = !0;
    var t = this.nativeEvent;
    t && (t.preventDefault ? t.preventDefault() : typeof t.returnValue != "unknown" && (t.returnValue = !1), this.isDefaultPrevented = Sd);
  }, stopPropagation: function() {
    var t = this.nativeEvent;
    t && (t.stopPropagation ? t.stopPropagation() : typeof t.cancelBubble != "unknown" && (t.cancelBubble = !0), this.isPropagationStopped = Sd);
  }, persist: function() {
  }, isPersistent: Sd }), e;
}
var Du = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(n) {
  return n.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, vx = ur(Du), $f = wn({}, Du, { view: 0, detail: 0 }), hI = ur($f), uv, cv, lc, og = wn({}, $f, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: yx, button: 0, buttons: 0, relatedTarget: function(n) {
  return n.relatedTarget === void 0 ? n.fromElement === n.srcElement ? n.toElement : n.fromElement : n.relatedTarget;
}, movementX: function(n) {
  return "movementX" in n ? n.movementX : (n !== lc && (lc && n.type === "mousemove" ? (uv = n.screenX - lc.screenX, cv = n.screenY - lc.screenY) : cv = uv = 0, lc = n), uv);
}, movementY: function(n) {
  return "movementY" in n ? n.movementY : cv;
} }), HM = ur(og), dI = wn({}, og, { dataTransfer: 0 }), pI = ur(dI), mI = wn({}, $f, { relatedTarget: 0 }), fv = ur(mI), gI = wn({}, Du, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), vI = ur(gI), yI = wn({}, Du, { clipboardData: function(n) {
  return "clipboardData" in n ? n.clipboardData : window.clipboardData;
} }), _I = ur(yI), xI = wn({}, Du, { data: 0 }), VM = ur(xI), SI = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, MI = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, wI = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function EI(n) {
  var e = this.nativeEvent;
  return e.getModifierState ? e.getModifierState(n) : (n = wI[n]) ? !!e[n] : !1;
}
function yx() {
  return EI;
}
var TI = wn({}, $f, { key: function(n) {
  if (n.key) {
    var e = SI[n.key] || n.key;
    if (e !== "Unidentified")
      return e;
  }
  return n.type === "keypress" ? (n = zp(n), n === 13 ? "Enter" : String.fromCharCode(n)) : n.type === "keydown" || n.type === "keyup" ? MI[n.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: yx, charCode: function(n) {
  return n.type === "keypress" ? zp(n) : 0;
}, keyCode: function(n) {
  return n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
}, which: function(n) {
  return n.type === "keypress" ? zp(n) : n.type === "keydown" || n.type === "keyup" ? n.keyCode : 0;
} }), AI = ur(TI), CI = wn({}, og, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), GM = ur(CI), RI = wn({}, $f, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: yx }), bI = ur(RI), PI = wn({}, Du, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), II = ur(PI), LI = wn({}, og, {
  deltaX: function(n) {
    return "deltaX" in n ? n.deltaX : "wheelDeltaX" in n ? -n.wheelDeltaX : 0;
  },
  deltaY: function(n) {
    return "deltaY" in n ? n.deltaY : "wheelDeltaY" in n ? -n.wheelDeltaY : "wheelDelta" in n ? -n.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), DI = ur(LI), NI = [9, 13, 27, 32], _x = Ws && "CompositionEvent" in window, Wc = null;
Ws && "documentMode" in document && (Wc = document.documentMode);
var UI = Ws && "TextEvent" in window && !Wc, pC = Ws && (!_x || Wc && 8 < Wc && 11 >= Wc), WM = String.fromCharCode(32), XM = !1;
function mC(n, e) {
  switch (n) {
    case "keyup":
      return NI.indexOf(e.keyCode) !== -1;
    case "keydown":
      return e.keyCode !== 229;
    case "keypress":
    case "mousedown":
    case "focusout":
      return !0;
    default:
      return !1;
  }
}
function gC(n) {
  return n = n.detail, typeof n == "object" && "data" in n ? n.data : null;
}
var jl = !1;
function OI(n, e) {
  switch (n) {
    case "compositionend":
      return gC(e);
    case "keypress":
      return e.which !== 32 ? null : (XM = !0, WM);
    case "textInput":
      return n = e.data, n === WM && XM ? null : n;
    default:
      return null;
  }
}
function FI(n, e) {
  if (jl)
    return n === "compositionend" || !_x && mC(n, e) ? (n = dC(), kp = gx = wo = null, jl = !1, n) : null;
  switch (n) {
    case "paste":
      return null;
    case "keypress":
      if (!(e.ctrlKey || e.altKey || e.metaKey) || e.ctrlKey && e.altKey) {
        if (e.char && 1 < e.char.length)
          return e.char;
        if (e.which)
          return String.fromCharCode(e.which);
      }
      return null;
    case "compositionend":
      return pC && e.locale !== "ko" ? null : e.data;
    default:
      return null;
  }
}
var kI = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };
function YM(n) {
  var e = n && n.nodeName && n.nodeName.toLowerCase();
  return e === "input" ? !!kI[n.type] : e === "textarea";
}
function vC(n, e, t, i) {
  jA(i), e = sm(e, "onChange"), 0 < e.length && (t = new vx("onChange", "change", null, t, i), n.push({ event: t, listeners: e }));
}
var Xc = null, vf = null;
function zI(n) {
  RC(n, 0);
}
function ag(n) {
  var e = Jl(n);
  if (HA(e))
    return n;
}
function BI(n, e) {
  if (n === "change")
    return e;
}
var yC = !1;
if (Ws) {
  var hv;
  if (Ws) {
    var dv = "oninput" in document;
    if (!dv) {
      var qM = document.createElement("div");
      qM.setAttribute("oninput", "return;"), dv = typeof qM.oninput == "function";
    }
    hv = dv;
  } else
    hv = !1;
  yC = hv && (!document.documentMode || 9 < document.documentMode);
}
function jM() {
  Xc && (Xc.detachEvent("onpropertychange", _C), vf = Xc = null);
}
function _C(n) {
  if (n.propertyName === "value" && ag(vf)) {
    var e = [];
    vC(e, vf, n, fx(n)), QA(zI, e);
  }
}
function HI(n, e, t) {
  n === "focusin" ? (jM(), Xc = e, vf = t, Xc.attachEvent("onpropertychange", _C)) : n === "focusout" && jM();
}
function VI(n) {
  if (n === "selectionchange" || n === "keyup" || n === "keydown")
    return ag(vf);
}
function GI(n, e) {
  if (n === "click")
    return ag(e);
}
function WI(n, e) {
  if (n === "input" || n === "change")
    return ag(e);
}
function XI(n, e) {
  return n === e && (n !== 0 || 1 / n === 1 / e) || n !== n && e !== e;
}
var jr = typeof Object.is == "function" ? Object.is : XI;
function yf(n, e) {
  if (jr(n, e))
    return !0;
  if (typeof n != "object" || n === null || typeof e != "object" || e === null)
    return !1;
  var t = Object.keys(n), i = Object.keys(e);
  if (t.length !== i.length)
    return !1;
  for (i = 0; i < t.length; i++) {
    var r = t[i];
    if (!Ny.call(e, r) || !jr(n[r], e[r]))
      return !1;
  }
  return !0;
}
function ZM(n) {
  for (; n && n.firstChild; )
    n = n.firstChild;
  return n;
}
function KM(n, e) {
  var t = ZM(n);
  n = 0;
  for (var i; t; ) {
    if (t.nodeType === 3) {
      if (i = n + t.textContent.length, n <= e && i >= e)
        return { node: t, offset: e - n };
      n = i;
    }
    e: {
      for (; t; ) {
        if (t.nextSibling) {
          t = t.nextSibling;
          break e;
        }
        t = t.parentNode;
      }
      t = void 0;
    }
    t = ZM(t);
  }
}
function xC(n, e) {
  return n && e ? n === e ? !0 : n && n.nodeType === 3 ? !1 : e && e.nodeType === 3 ? xC(n, e.parentNode) : "contains" in n ? n.contains(e) : n.compareDocumentPosition ? !!(n.compareDocumentPosition(e) & 16) : !1 : !1;
}
function SC() {
  for (var n = window, e = Qp(); e instanceof n.HTMLIFrameElement; ) {
    try {
      var t = typeof e.contentWindow.location.href == "string";
    } catch {
      t = !1;
    }
    if (t)
      n = e.contentWindow;
    else
      break;
    e = Qp(n.document);
  }
  return e;
}
function xx(n) {
  var e = n && n.nodeName && n.nodeName.toLowerCase();
  return e && (e === "input" && (n.type === "text" || n.type === "search" || n.type === "tel" || n.type === "url" || n.type === "password") || e === "textarea" || n.contentEditable === "true");
}
function YI(n) {
  var e = SC(), t = n.focusedElem, i = n.selectionRange;
  if (e !== t && t && t.ownerDocument && xC(t.ownerDocument.documentElement, t)) {
    if (i !== null && xx(t)) {
      if (e = i.start, n = i.end, n === void 0 && (n = e), "selectionStart" in t)
        t.selectionStart = e, t.selectionEnd = Math.min(n, t.value.length);
      else if (n = (e = t.ownerDocument || document) && e.defaultView || window, n.getSelection) {
        n = n.getSelection();
        var r = t.textContent.length, s = Math.min(i.start, r);
        i = i.end === void 0 ? s : Math.min(i.end, r), !n.extend && s > i && (r = i, i = s, s = r), r = KM(t, s);
        var o = KM(
          t,
          i
        );
        r && o && (n.rangeCount !== 1 || n.anchorNode !== r.node || n.anchorOffset !== r.offset || n.focusNode !== o.node || n.focusOffset !== o.offset) && (e = e.createRange(), e.setStart(r.node, r.offset), n.removeAllRanges(), s > i ? (n.addRange(e), n.extend(o.node, o.offset)) : (e.setEnd(o.node, o.offset), n.addRange(e)));
      }
    }
    for (e = [], n = t; n = n.parentNode; )
      n.nodeType === 1 && e.push({ element: n, left: n.scrollLeft, top: n.scrollTop });
    for (typeof t.focus == "function" && t.focus(), t = 0; t < e.length; t++)
      n = e[t], n.element.scrollLeft = n.left, n.element.scrollTop = n.top;
  }
}
var qI = Ws && "documentMode" in document && 11 >= document.documentMode, Zl = null, $y = null, Yc = null, e_ = !1;
function JM(n, e, t) {
  var i = t.window === t ? t.document : t.nodeType === 9 ? t : t.ownerDocument;
  e_ || Zl == null || Zl !== Qp(i) || (i = Zl, "selectionStart" in i && xx(i) ? i = { start: i.selectionStart, end: i.selectionEnd } : (i = (i.ownerDocument && i.ownerDocument.defaultView || window).getSelection(), i = { anchorNode: i.anchorNode, anchorOffset: i.anchorOffset, focusNode: i.focusNode, focusOffset: i.focusOffset }), Yc && yf(Yc, i) || (Yc = i, i = sm($y, "onSelect"), 0 < i.length && (e = new vx("onSelect", "select", null, e, t), n.push({ event: e, listeners: i }), e.target = Zl)));
}
function Md(n, e) {
  var t = {};
  return t[n.toLowerCase()] = e.toLowerCase(), t["Webkit" + n] = "webkit" + e, t["Moz" + n] = "moz" + e, t;
}
var Kl = { animationend: Md("Animation", "AnimationEnd"), animationiteration: Md("Animation", "AnimationIteration"), animationstart: Md("Animation", "AnimationStart"), transitionend: Md("Transition", "TransitionEnd") }, pv = {}, MC = {};
Ws && (MC = document.createElement("div").style, "AnimationEvent" in window || (delete Kl.animationend.animation, delete Kl.animationiteration.animation, delete Kl.animationstart.animation), "TransitionEvent" in window || delete Kl.transitionend.transition);
function lg(n) {
  if (pv[n])
    return pv[n];
  if (!Kl[n])
    return n;
  var e = Kl[n], t;
  for (t in e)
    if (e.hasOwnProperty(t) && t in MC)
      return pv[n] = e[t];
  return n;
}
var wC = lg("animationend"), EC = lg("animationiteration"), TC = lg("animationstart"), AC = lg("transitionend"), CC = /* @__PURE__ */ new Map(), QM = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function Bo(n, e) {
  CC.set(n, e), Qa(e, [n]);
}
for (var mv = 0; mv < QM.length; mv++) {
  var gv = QM[mv], jI = gv.toLowerCase(), ZI = gv[0].toUpperCase() + gv.slice(1);
  Bo(jI, "on" + ZI);
}
Bo(wC, "onAnimationEnd");
Bo(EC, "onAnimationIteration");
Bo(TC, "onAnimationStart");
Bo("dblclick", "onDoubleClick");
Bo("focusin", "onFocus");
Bo("focusout", "onBlur");
Bo(AC, "onTransitionEnd");
yu("onMouseEnter", ["mouseout", "mouseover"]);
yu("onMouseLeave", ["mouseout", "mouseover"]);
yu("onPointerEnter", ["pointerout", "pointerover"]);
yu("onPointerLeave", ["pointerout", "pointerover"]);
Qa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
Qa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
Qa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
Qa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
Qa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
Qa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var zc = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), KI = new Set("cancel close invalid load scroll toggle".split(" ").concat(zc));
function $M(n, e, t) {
  var i = n.type || "unknown-event";
  n.currentTarget = t, j3(i, e, void 0, n), n.currentTarget = null;
}
function RC(n, e) {
  e = (e & 4) !== 0;
  for (var t = 0; t < n.length; t++) {
    var i = n[t], r = i.event;
    i = i.listeners;
    e: {
      var s = void 0;
      if (e)
        for (var o = i.length - 1; 0 <= o; o--) {
          var a = i[o], c = a.instance, f = a.currentTarget;
          if (a = a.listener, c !== s && r.isPropagationStopped())
            break e;
          $M(r, a, f), s = c;
        }
      else
        for (o = 0; o < i.length; o++) {
          if (a = i[o], c = a.instance, f = a.currentTarget, a = a.listener, c !== s && r.isPropagationStopped())
            break e;
          $M(r, a, f), s = c;
        }
    }
  }
  if (em)
    throw n = Zy, em = !1, Zy = null, n;
}
function cn(n, e) {
  var t = e[s_];
  t === void 0 && (t = e[s_] = /* @__PURE__ */ new Set());
  var i = n + "__bubble";
  t.has(i) || (bC(e, n, 2, !1), t.add(i));
}
function vv(n, e, t) {
  var i = 0;
  e && (i |= 4), bC(t, n, i, e);
}
var wd = "_reactListening" + Math.random().toString(36).slice(2);
function _f(n) {
  if (!n[wd]) {
    n[wd] = !0, OA.forEach(function(t) {
      t !== "selectionchange" && (KI.has(t) || vv(t, !1, n), vv(t, !0, n));
    });
    var e = n.nodeType === 9 ? n : n.ownerDocument;
    e === null || e[wd] || (e[wd] = !0, vv("selectionchange", !1, e));
  }
}
function bC(n, e, t, i) {
  switch (hC(e)) {
    case 1:
      var r = cI;
      break;
    case 4:
      r = fI;
      break;
    default:
      r = mx;
  }
  t = r.bind(null, e, t, n), r = void 0, !jy || e !== "touchstart" && e !== "touchmove" && e !== "wheel" || (r = !0), i ? r !== void 0 ? n.addEventListener(e, t, { capture: !0, passive: r }) : n.addEventListener(e, t, !0) : r !== void 0 ? n.addEventListener(e, t, { passive: r }) : n.addEventListener(e, t, !1);
}
function yv(n, e, t, i, r) {
  var s = i;
  if (!(e & 1) && !(e & 2) && i !== null)
    e:
      for (; ; ) {
        if (i === null)
          return;
        var o = i.tag;
        if (o === 3 || o === 4) {
          var a = i.stateNode.containerInfo;
          if (a === r || a.nodeType === 8 && a.parentNode === r)
            break;
          if (o === 4)
            for (o = i.return; o !== null; ) {
              var c = o.tag;
              if ((c === 3 || c === 4) && (c = o.stateNode.containerInfo, c === r || c.nodeType === 8 && c.parentNode === r))
                return;
              o = o.return;
            }
          for (; a !== null; ) {
            if (o = Aa(a), o === null)
              return;
            if (c = o.tag, c === 5 || c === 6) {
              i = s = o;
              continue e;
            }
            a = a.parentNode;
          }
        }
        i = i.return;
      }
  QA(function() {
    var f = s, h = fx(t), d = [];
    e: {
      var p = CC.get(n);
      if (p !== void 0) {
        var v = vx, y = n;
        switch (n) {
          case "keypress":
            if (zp(t) === 0)
              break e;
          case "keydown":
          case "keyup":
            v = AI;
            break;
          case "focusin":
            y = "focus", v = fv;
            break;
          case "focusout":
            y = "blur", v = fv;
            break;
          case "beforeblur":
          case "afterblur":
            v = fv;
            break;
          case "click":
            if (t.button === 2)
              break e;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            v = HM;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            v = pI;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            v = bI;
            break;
          case wC:
          case EC:
          case TC:
            v = vI;
            break;
          case AC:
            v = II;
            break;
          case "scroll":
            v = hI;
            break;
          case "wheel":
            v = DI;
            break;
          case "copy":
          case "cut":
          case "paste":
            v = _I;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            v = GM;
        }
        var w = (e & 4) !== 0, x = !w && n === "scroll", g = w ? p !== null ? p + "Capture" : null : p;
        w = [];
        for (var S = f, M; S !== null; ) {
          M = S;
          var T = M.stateNode;
          if (M.tag === 5 && T !== null && (M = T, g !== null && (T = df(S, g), T != null && w.push(xf(S, T, M)))), x)
            break;
          S = S.return;
        }
        0 < w.length && (p = new v(p, y, null, t, h), d.push({ event: p, listeners: w }));
      }
    }
    if (!(e & 7)) {
      e: {
        if (p = n === "mouseover" || n === "pointerover", v = n === "mouseout" || n === "pointerout", p && t !== Yy && (y = t.relatedTarget || t.fromElement) && (Aa(y) || y[Xs]))
          break e;
        if ((v || p) && (p = h.window === h ? h : (p = h.ownerDocument) ? p.defaultView || p.parentWindow : window, v ? (y = t.relatedTarget || t.toElement, v = f, y = y ? Aa(y) : null, y !== null && (x = $a(y), y !== x || y.tag !== 5 && y.tag !== 6) && (y = null)) : (v = null, y = f), v !== y)) {
          if (w = HM, T = "onMouseLeave", g = "onMouseEnter", S = "mouse", (n === "pointerout" || n === "pointerover") && (w = GM, T = "onPointerLeave", g = "onPointerEnter", S = "pointer"), x = v == null ? p : Jl(v), M = y == null ? p : Jl(y), p = new w(T, S + "leave", v, t, h), p.target = x, p.relatedTarget = M, T = null, Aa(h) === f && (w = new w(g, S + "enter", y, t, h), w.target = M, w.relatedTarget = x, T = w), x = T, v && y)
            t: {
              for (w = v, g = y, S = 0, M = w; M; M = yl(M))
                S++;
              for (M = 0, T = g; T; T = yl(T))
                M++;
              for (; 0 < S - M; )
                w = yl(w), S--;
              for (; 0 < M - S; )
                g = yl(g), M--;
              for (; S--; ) {
                if (w === g || g !== null && w === g.alternate)
                  break t;
                w = yl(w), g = yl(g);
              }
              w = null;
            }
          else
            w = null;
          v !== null && ew(d, p, v, w, !1), y !== null && x !== null && ew(d, x, y, w, !0);
        }
      }
      e: {
        if (p = f ? Jl(f) : window, v = p.nodeName && p.nodeName.toLowerCase(), v === "select" || v === "input" && p.type === "file")
          var U = BI;
        else if (YM(p))
          if (yC)
            U = WI;
          else {
            U = VI;
            var P = HI;
          }
        else
          (v = p.nodeName) && v.toLowerCase() === "input" && (p.type === "checkbox" || p.type === "radio") && (U = GI);
        if (U && (U = U(n, f))) {
          vC(d, U, t, h);
          break e;
        }
        P && P(n, p, f), n === "focusout" && (P = p._wrapperState) && P.controlled && p.type === "number" && Hy(p, "number", p.value);
      }
      switch (P = f ? Jl(f) : window, n) {
        case "focusin":
          (YM(P) || P.contentEditable === "true") && (Zl = P, $y = f, Yc = null);
          break;
        case "focusout":
          Yc = $y = Zl = null;
          break;
        case "mousedown":
          e_ = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          e_ = !1, JM(d, t, h);
          break;
        case "selectionchange":
          if (qI)
            break;
        case "keydown":
        case "keyup":
          JM(d, t, h);
      }
      var D;
      if (_x)
        e: {
          switch (n) {
            case "compositionstart":
              var R = "onCompositionStart";
              break e;
            case "compositionend":
              R = "onCompositionEnd";
              break e;
            case "compositionupdate":
              R = "onCompositionUpdate";
              break e;
          }
          R = void 0;
        }
      else
        jl ? mC(n, t) && (R = "onCompositionEnd") : n === "keydown" && t.keyCode === 229 && (R = "onCompositionStart");
      R && (pC && t.locale !== "ko" && (jl || R !== "onCompositionStart" ? R === "onCompositionEnd" && jl && (D = dC()) : (wo = h, gx = "value" in wo ? wo.value : wo.textContent, jl = !0)), P = sm(f, R), 0 < P.length && (R = new VM(R, n, null, t, h), d.push({ event: R, listeners: P }), D ? R.data = D : (D = gC(t), D !== null && (R.data = D)))), (D = UI ? OI(n, t) : FI(n, t)) && (f = sm(f, "onBeforeInput"), 0 < f.length && (h = new VM("onBeforeInput", "beforeinput", null, t, h), d.push({ event: h, listeners: f }), h.data = D));
    }
    RC(d, e);
  });
}
function xf(n, e, t) {
  return { instance: n, listener: e, currentTarget: t };
}
function sm(n, e) {
  for (var t = e + "Capture", i = []; n !== null; ) {
    var r = n, s = r.stateNode;
    r.tag === 5 && s !== null && (r = s, s = df(n, t), s != null && i.unshift(xf(n, s, r)), s = df(n, e), s != null && i.push(xf(n, s, r))), n = n.return;
  }
  return i;
}
function yl(n) {
  if (n === null)
    return null;
  do
    n = n.return;
  while (n && n.tag !== 5);
  return n || null;
}
function ew(n, e, t, i, r) {
  for (var s = e._reactName, o = []; t !== null && t !== i; ) {
    var a = t, c = a.alternate, f = a.stateNode;
    if (c !== null && c === i)
      break;
    a.tag === 5 && f !== null && (a = f, r ? (c = df(t, s), c != null && o.unshift(xf(t, c, a))) : r || (c = df(t, s), c != null && o.push(xf(t, c, a)))), t = t.return;
  }
  o.length !== 0 && n.push({ event: e, listeners: o });
}
var JI = /\r\n?/g, QI = /\u0000|\uFFFD/g;
function tw(n) {
  return (typeof n == "string" ? n : "" + n).replace(JI, `
`).replace(QI, "");
}
function Ed(n, e, t) {
  if (e = tw(e), tw(n) !== e && t)
    throw Error(Oe(425));
}
function om() {
}
var t_ = null, n_ = null;
function i_(n, e) {
  return n === "textarea" || n === "noscript" || typeof e.children == "string" || typeof e.children == "number" || typeof e.dangerouslySetInnerHTML == "object" && e.dangerouslySetInnerHTML !== null && e.dangerouslySetInnerHTML.__html != null;
}
var r_ = typeof setTimeout == "function" ? setTimeout : void 0, $I = typeof clearTimeout == "function" ? clearTimeout : void 0, nw = typeof Promise == "function" ? Promise : void 0, eL = typeof queueMicrotask == "function" ? queueMicrotask : typeof nw < "u" ? function(n) {
  return nw.resolve(null).then(n).catch(tL);
} : r_;
function tL(n) {
  setTimeout(function() {
    throw n;
  });
}
function _v(n, e) {
  var t = e, i = 0;
  do {
    var r = t.nextSibling;
    if (n.removeChild(t), r && r.nodeType === 8)
      if (t = r.data, t === "/$") {
        if (i === 0) {
          n.removeChild(r), gf(e);
          return;
        }
        i--;
      } else
        t !== "$" && t !== "$?" && t !== "$!" || i++;
    t = r;
  } while (t);
  gf(e);
}
function Po(n) {
  for (; n != null; n = n.nextSibling) {
    var e = n.nodeType;
    if (e === 1 || e === 3)
      break;
    if (e === 8) {
      if (e = n.data, e === "$" || e === "$!" || e === "$?")
        break;
      if (e === "/$")
        return null;
    }
  }
  return n;
}
function iw(n) {
  n = n.previousSibling;
  for (var e = 0; n; ) {
    if (n.nodeType === 8) {
      var t = n.data;
      if (t === "$" || t === "$!" || t === "$?") {
        if (e === 0)
          return n;
        e--;
      } else
        t === "/$" && e++;
    }
    n = n.previousSibling;
  }
  return null;
}
var Nu = Math.random().toString(36).slice(2), ls = "__reactFiber$" + Nu, Sf = "__reactProps$" + Nu, Xs = "__reactContainer$" + Nu, s_ = "__reactEvents$" + Nu, nL = "__reactListeners$" + Nu, iL = "__reactHandles$" + Nu;
function Aa(n) {
  var e = n[ls];
  if (e)
    return e;
  for (var t = n.parentNode; t; ) {
    if (e = t[Xs] || t[ls]) {
      if (t = e.alternate, e.child !== null || t !== null && t.child !== null)
        for (n = iw(n); n !== null; ) {
          if (t = n[ls])
            return t;
          n = iw(n);
        }
      return e;
    }
    n = t, t = n.parentNode;
  }
  return null;
}
function eh(n) {
  return n = n[ls] || n[Xs], !n || n.tag !== 5 && n.tag !== 6 && n.tag !== 13 && n.tag !== 3 ? null : n;
}
function Jl(n) {
  if (n.tag === 5 || n.tag === 6)
    return n.stateNode;
  throw Error(Oe(33));
}
function ug(n) {
  return n[Sf] || null;
}
var o_ = [], Ql = -1;
function Ho(n) {
  return { current: n };
}
function hn(n) {
  0 > Ql || (n.current = o_[Ql], o_[Ql] = null, Ql--);
}
function un(n, e) {
  Ql++, o_[Ql] = n.current, n.current = e;
}
var Oo = {}, vi = Ho(Oo), Gi = Ho(!1), Va = Oo;
function _u(n, e) {
  var t = n.type.contextTypes;
  if (!t)
    return Oo;
  var i = n.stateNode;
  if (i && i.__reactInternalMemoizedUnmaskedChildContext === e)
    return i.__reactInternalMemoizedMaskedChildContext;
  var r = {}, s;
  for (s in t)
    r[s] = e[s];
  return i && (n = n.stateNode, n.__reactInternalMemoizedUnmaskedChildContext = e, n.__reactInternalMemoizedMaskedChildContext = r), r;
}
function Wi(n) {
  return n = n.childContextTypes, n != null;
}
function am() {
  hn(Gi), hn(vi);
}
function rw(n, e, t) {
  if (vi.current !== Oo)
    throw Error(Oe(168));
  un(vi, e), un(Gi, t);
}
function PC(n, e, t) {
  var i = n.stateNode;
  if (e = e.childContextTypes, typeof i.getChildContext != "function")
    return t;
  i = i.getChildContext();
  for (var r in i)
    if (!(r in e))
      throw Error(Oe(108, H3(n) || "Unknown", r));
  return wn({}, t, i);
}
function lm(n) {
  return n = (n = n.stateNode) && n.__reactInternalMemoizedMergedChildContext || Oo, Va = vi.current, un(vi, n), un(Gi, Gi.current), !0;
}
function sw(n, e, t) {
  var i = n.stateNode;
  if (!i)
    throw Error(Oe(169));
  t ? (n = PC(n, e, Va), i.__reactInternalMemoizedMergedChildContext = n, hn(Gi), hn(vi), un(vi, n)) : hn(Gi), un(Gi, t);
}
var Os = null, cg = !1, xv = !1;
function IC(n) {
  Os === null ? Os = [n] : Os.push(n);
}
function rL(n) {
  cg = !0, IC(n);
}
function Vo() {
  if (!xv && Os !== null) {
    xv = !0;
    var n = 0, e = tn;
    try {
      var t = Os;
      for (tn = 1; n < t.length; n++) {
        var i = t[n];
        do
          i = i(!0);
        while (i !== null);
      }
      Os = null, cg = !1;
    } catch (r) {
      throw Os !== null && (Os = Os.slice(n + 1)), nC(hx, Vo), r;
    } finally {
      tn = e, xv = !1;
    }
  }
  return null;
}
var $l = [], eu = 0, um = null, cm = 0, Mr = [], wr = 0, Ga = null, Bs = 1, Hs = "";
function _a(n, e) {
  $l[eu++] = cm, $l[eu++] = um, um = n, cm = e;
}
function LC(n, e, t) {
  Mr[wr++] = Bs, Mr[wr++] = Hs, Mr[wr++] = Ga, Ga = n;
  var i = Bs;
  n = Hs;
  var r = 32 - Xr(i) - 1;
  i &= ~(1 << r), t += 1;
  var s = 32 - Xr(e) + r;
  if (30 < s) {
    var o = r - r % 5;
    s = (i & (1 << o) - 1).toString(32), i >>= o, r -= o, Bs = 1 << 32 - Xr(e) + r | t << r | i, Hs = s + n;
  } else
    Bs = 1 << s | t << r | i, Hs = n;
}
function Sx(n) {
  n.return !== null && (_a(n, 1), LC(n, 1, 0));
}
function Mx(n) {
  for (; n === um; )
    um = $l[--eu], $l[eu] = null, cm = $l[--eu], $l[eu] = null;
  for (; n === Ga; )
    Ga = Mr[--wr], Mr[wr] = null, Hs = Mr[--wr], Mr[wr] = null, Bs = Mr[--wr], Mr[wr] = null;
}
var ir = null, nr = null, mn = !1, Vr = null;
function DC(n, e) {
  var t = Tr(5, null, null, 0);
  t.elementType = "DELETED", t.stateNode = e, t.return = n, e = n.deletions, e === null ? (n.deletions = [t], n.flags |= 16) : e.push(t);
}
function ow(n, e) {
  switch (n.tag) {
    case 5:
      var t = n.type;
      return e = e.nodeType !== 1 || t.toLowerCase() !== e.nodeName.toLowerCase() ? null : e, e !== null ? (n.stateNode = e, ir = n, nr = Po(e.firstChild), !0) : !1;
    case 6:
      return e = n.pendingProps === "" || e.nodeType !== 3 ? null : e, e !== null ? (n.stateNode = e, ir = n, nr = null, !0) : !1;
    case 13:
      return e = e.nodeType !== 8 ? null : e, e !== null ? (t = Ga !== null ? { id: Bs, overflow: Hs } : null, n.memoizedState = { dehydrated: e, treeContext: t, retryLane: 1073741824 }, t = Tr(18, null, null, 0), t.stateNode = e, t.return = n, n.child = t, ir = n, nr = null, !0) : !1;
    default:
      return !1;
  }
}
function a_(n) {
  return (n.mode & 1) !== 0 && (n.flags & 128) === 0;
}
function l_(n) {
  if (mn) {
    var e = nr;
    if (e) {
      var t = e;
      if (!ow(n, e)) {
        if (a_(n))
          throw Error(Oe(418));
        e = Po(t.nextSibling);
        var i = ir;
        e && ow(n, e) ? DC(i, t) : (n.flags = n.flags & -4097 | 2, mn = !1, ir = n);
      }
    } else {
      if (a_(n))
        throw Error(Oe(418));
      n.flags = n.flags & -4097 | 2, mn = !1, ir = n;
    }
  }
}
function aw(n) {
  for (n = n.return; n !== null && n.tag !== 5 && n.tag !== 3 && n.tag !== 13; )
    n = n.return;
  ir = n;
}
function Td(n) {
  if (n !== ir)
    return !1;
  if (!mn)
    return aw(n), mn = !0, !1;
  var e;
  if ((e = n.tag !== 3) && !(e = n.tag !== 5) && (e = n.type, e = e !== "head" && e !== "body" && !i_(n.type, n.memoizedProps)), e && (e = nr)) {
    if (a_(n))
      throw NC(), Error(Oe(418));
    for (; e; )
      DC(n, e), e = Po(e.nextSibling);
  }
  if (aw(n), n.tag === 13) {
    if (n = n.memoizedState, n = n !== null ? n.dehydrated : null, !n)
      throw Error(Oe(317));
    e: {
      for (n = n.nextSibling, e = 0; n; ) {
        if (n.nodeType === 8) {
          var t = n.data;
          if (t === "/$") {
            if (e === 0) {
              nr = Po(n.nextSibling);
              break e;
            }
            e--;
          } else
            t !== "$" && t !== "$!" && t !== "$?" || e++;
        }
        n = n.nextSibling;
      }
      nr = null;
    }
  } else
    nr = ir ? Po(n.stateNode.nextSibling) : null;
  return !0;
}
function NC() {
  for (var n = nr; n; )
    n = Po(n.nextSibling);
}
function xu() {
  nr = ir = null, mn = !1;
}
function wx(n) {
  Vr === null ? Vr = [n] : Vr.push(n);
}
var sL = Zs.ReactCurrentBatchConfig;
function zr(n, e) {
  if (n && n.defaultProps) {
    e = wn({}, e), n = n.defaultProps;
    for (var t in n)
      e[t] === void 0 && (e[t] = n[t]);
    return e;
  }
  return e;
}
var fm = Ho(null), hm = null, tu = null, Ex = null;
function Tx() {
  Ex = tu = hm = null;
}
function Ax(n) {
  var e = fm.current;
  hn(fm), n._currentValue = e;
}
function u_(n, e, t) {
  for (; n !== null; ) {
    var i = n.alternate;
    if ((n.childLanes & e) !== e ? (n.childLanes |= e, i !== null && (i.childLanes |= e)) : i !== null && (i.childLanes & e) !== e && (i.childLanes |= e), n === t)
      break;
    n = n.return;
  }
}
function pu(n, e) {
  hm = n, Ex = tu = null, n = n.dependencies, n !== null && n.firstContext !== null && (n.lanes & e && (Vi = !0), n.firstContext = null);
}
function Cr(n) {
  var e = n._currentValue;
  if (Ex !== n)
    if (n = { context: n, memoizedValue: e, next: null }, tu === null) {
      if (hm === null)
        throw Error(Oe(308));
      tu = n, hm.dependencies = { lanes: 0, firstContext: n };
    } else
      tu = tu.next = n;
  return e;
}
var Ca = null;
function Cx(n) {
  Ca === null ? Ca = [n] : Ca.push(n);
}
function UC(n, e, t, i) {
  var r = e.interleaved;
  return r === null ? (t.next = t, Cx(e)) : (t.next = r.next, r.next = t), e.interleaved = t, Ys(n, i);
}
function Ys(n, e) {
  n.lanes |= e;
  var t = n.alternate;
  for (t !== null && (t.lanes |= e), t = n, n = n.return; n !== null; )
    n.childLanes |= e, t = n.alternate, t !== null && (t.childLanes |= e), t = n, n = n.return;
  return t.tag === 3 ? t.stateNode : null;
}
var vo = !1;
function Rx(n) {
  n.updateQueue = { baseState: n.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function OC(n, e) {
  n = n.updateQueue, e.updateQueue === n && (e.updateQueue = { baseState: n.baseState, firstBaseUpdate: n.firstBaseUpdate, lastBaseUpdate: n.lastBaseUpdate, shared: n.shared, effects: n.effects });
}
function Gs(n, e) {
  return { eventTime: n, lane: e, tag: 0, payload: null, callback: null, next: null };
}
function Io(n, e, t) {
  var i = n.updateQueue;
  if (i === null)
    return null;
  if (i = i.shared, Xt & 2) {
    var r = i.pending;
    return r === null ? e.next = e : (e.next = r.next, r.next = e), i.pending = e, Ys(n, t);
  }
  return r = i.interleaved, r === null ? (e.next = e, Cx(i)) : (e.next = r.next, r.next = e), i.interleaved = e, Ys(n, t);
}
function Bp(n, e, t) {
  if (e = e.updateQueue, e !== null && (e = e.shared, (t & 4194240) !== 0)) {
    var i = e.lanes;
    i &= n.pendingLanes, t |= i, e.lanes = t, dx(n, t);
  }
}
function lw(n, e) {
  var t = n.updateQueue, i = n.alternate;
  if (i !== null && (i = i.updateQueue, t === i)) {
    var r = null, s = null;
    if (t = t.firstBaseUpdate, t !== null) {
      do {
        var o = { eventTime: t.eventTime, lane: t.lane, tag: t.tag, payload: t.payload, callback: t.callback, next: null };
        s === null ? r = s = o : s = s.next = o, t = t.next;
      } while (t !== null);
      s === null ? r = s = e : s = s.next = e;
    } else
      r = s = e;
    t = { baseState: i.baseState, firstBaseUpdate: r, lastBaseUpdate: s, shared: i.shared, effects: i.effects }, n.updateQueue = t;
    return;
  }
  n = t.lastBaseUpdate, n === null ? t.firstBaseUpdate = e : n.next = e, t.lastBaseUpdate = e;
}
function dm(n, e, t, i) {
  var r = n.updateQueue;
  vo = !1;
  var s = r.firstBaseUpdate, o = r.lastBaseUpdate, a = r.shared.pending;
  if (a !== null) {
    r.shared.pending = null;
    var c = a, f = c.next;
    c.next = null, o === null ? s = f : o.next = f, o = c;
    var h = n.alternate;
    h !== null && (h = h.updateQueue, a = h.lastBaseUpdate, a !== o && (a === null ? h.firstBaseUpdate = f : a.next = f, h.lastBaseUpdate = c));
  }
  if (s !== null) {
    var d = r.baseState;
    o = 0, h = f = c = null, a = s;
    do {
      var p = a.lane, v = a.eventTime;
      if ((i & p) === p) {
        h !== null && (h = h.next = {
          eventTime: v,
          lane: 0,
          tag: a.tag,
          payload: a.payload,
          callback: a.callback,
          next: null
        });
        e: {
          var y = n, w = a;
          switch (p = e, v = t, w.tag) {
            case 1:
              if (y = w.payload, typeof y == "function") {
                d = y.call(v, d, p);
                break e;
              }
              d = y;
              break e;
            case 3:
              y.flags = y.flags & -65537 | 128;
            case 0:
              if (y = w.payload, p = typeof y == "function" ? y.call(v, d, p) : y, p == null)
                break e;
              d = wn({}, d, p);
              break e;
            case 2:
              vo = !0;
          }
        }
        a.callback !== null && a.lane !== 0 && (n.flags |= 64, p = r.effects, p === null ? r.effects = [a] : p.push(a));
      } else
        v = { eventTime: v, lane: p, tag: a.tag, payload: a.payload, callback: a.callback, next: null }, h === null ? (f = h = v, c = d) : h = h.next = v, o |= p;
      if (a = a.next, a === null) {
        if (a = r.shared.pending, a === null)
          break;
        p = a, a = p.next, p.next = null, r.lastBaseUpdate = p, r.shared.pending = null;
      }
    } while (1);
    if (h === null && (c = d), r.baseState = c, r.firstBaseUpdate = f, r.lastBaseUpdate = h, e = r.shared.interleaved, e !== null) {
      r = e;
      do
        o |= r.lane, r = r.next;
      while (r !== e);
    } else
      s === null && (r.shared.lanes = 0);
    Xa |= o, n.lanes = o, n.memoizedState = d;
  }
}
function uw(n, e, t) {
  if (n = e.effects, e.effects = null, n !== null)
    for (e = 0; e < n.length; e++) {
      var i = n[e], r = i.callback;
      if (r !== null) {
        if (i.callback = null, i = t, typeof r != "function")
          throw Error(Oe(191, r));
        r.call(i);
      }
    }
}
var FC = new UA.Component().refs;
function c_(n, e, t, i) {
  e = n.memoizedState, t = t(i, e), t = t == null ? e : wn({}, e, t), n.memoizedState = t, n.lanes === 0 && (n.updateQueue.baseState = t);
}
var fg = { isMounted: function(n) {
  return (n = n._reactInternals) ? $a(n) === n : !1;
}, enqueueSetState: function(n, e, t) {
  n = n._reactInternals;
  var i = Ai(), r = Do(n), s = Gs(i, r);
  s.payload = e, t != null && (s.callback = t), e = Io(n, s, r), e !== null && (Yr(e, n, r, i), Bp(e, n, r));
}, enqueueReplaceState: function(n, e, t) {
  n = n._reactInternals;
  var i = Ai(), r = Do(n), s = Gs(i, r);
  s.tag = 1, s.payload = e, t != null && (s.callback = t), e = Io(n, s, r), e !== null && (Yr(e, n, r, i), Bp(e, n, r));
}, enqueueForceUpdate: function(n, e) {
  n = n._reactInternals;
  var t = Ai(), i = Do(n), r = Gs(t, i);
  r.tag = 2, e != null && (r.callback = e), e = Io(n, r, i), e !== null && (Yr(e, n, i, t), Bp(e, n, i));
} };
function cw(n, e, t, i, r, s, o) {
  return n = n.stateNode, typeof n.shouldComponentUpdate == "function" ? n.shouldComponentUpdate(i, s, o) : e.prototype && e.prototype.isPureReactComponent ? !yf(t, i) || !yf(r, s) : !0;
}
function kC(n, e, t) {
  var i = !1, r = Oo, s = e.contextType;
  return typeof s == "object" && s !== null ? s = Cr(s) : (r = Wi(e) ? Va : vi.current, i = e.contextTypes, s = (i = i != null) ? _u(n, r) : Oo), e = new e(t, s), n.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null, e.updater = fg, n.stateNode = e, e._reactInternals = n, i && (n = n.stateNode, n.__reactInternalMemoizedUnmaskedChildContext = r, n.__reactInternalMemoizedMaskedChildContext = s), e;
}
function fw(n, e, t, i) {
  n = e.state, typeof e.componentWillReceiveProps == "function" && e.componentWillReceiveProps(t, i), typeof e.UNSAFE_componentWillReceiveProps == "function" && e.UNSAFE_componentWillReceiveProps(t, i), e.state !== n && fg.enqueueReplaceState(e, e.state, null);
}
function f_(n, e, t, i) {
  var r = n.stateNode;
  r.props = t, r.state = n.memoizedState, r.refs = FC, Rx(n);
  var s = e.contextType;
  typeof s == "object" && s !== null ? r.context = Cr(s) : (s = Wi(e) ? Va : vi.current, r.context = _u(n, s)), r.state = n.memoizedState, s = e.getDerivedStateFromProps, typeof s == "function" && (c_(n, e, s, t), r.state = n.memoizedState), typeof e.getDerivedStateFromProps == "function" || typeof r.getSnapshotBeforeUpdate == "function" || typeof r.UNSAFE_componentWillMount != "function" && typeof r.componentWillMount != "function" || (e = r.state, typeof r.componentWillMount == "function" && r.componentWillMount(), typeof r.UNSAFE_componentWillMount == "function" && r.UNSAFE_componentWillMount(), e !== r.state && fg.enqueueReplaceState(r, r.state, null), dm(n, t, r, i), r.state = n.memoizedState), typeof r.componentDidMount == "function" && (n.flags |= 4194308);
}
function uc(n, e, t) {
  if (n = t.ref, n !== null && typeof n != "function" && typeof n != "object") {
    if (t._owner) {
      if (t = t._owner, t) {
        if (t.tag !== 1)
          throw Error(Oe(309));
        var i = t.stateNode;
      }
      if (!i)
        throw Error(Oe(147, n));
      var r = i, s = "" + n;
      return e !== null && e.ref !== null && typeof e.ref == "function" && e.ref._stringRef === s ? e.ref : (e = function(o) {
        var a = r.refs;
        a === FC && (a = r.refs = {}), o === null ? delete a[s] : a[s] = o;
      }, e._stringRef = s, e);
    }
    if (typeof n != "string")
      throw Error(Oe(284));
    if (!t._owner)
      throw Error(Oe(290, n));
  }
  return n;
}
function Ad(n, e) {
  throw n = Object.prototype.toString.call(e), Error(Oe(31, n === "[object Object]" ? "object with keys {" + Object.keys(e).join(", ") + "}" : n));
}
function hw(n) {
  var e = n._init;
  return e(n._payload);
}
function zC(n) {
  function e(g, S) {
    if (n) {
      var M = g.deletions;
      M === null ? (g.deletions = [S], g.flags |= 16) : M.push(S);
    }
  }
  function t(g, S) {
    if (!n)
      return null;
    for (; S !== null; )
      e(g, S), S = S.sibling;
    return null;
  }
  function i(g, S) {
    for (g = /* @__PURE__ */ new Map(); S !== null; )
      S.key !== null ? g.set(S.key, S) : g.set(S.index, S), S = S.sibling;
    return g;
  }
  function r(g, S) {
    return g = No(g, S), g.index = 0, g.sibling = null, g;
  }
  function s(g, S, M) {
    return g.index = M, n ? (M = g.alternate, M !== null ? (M = M.index, M < S ? (g.flags |= 2, S) : M) : (g.flags |= 2, S)) : (g.flags |= 1048576, S);
  }
  function o(g) {
    return n && g.alternate === null && (g.flags |= 2), g;
  }
  function a(g, S, M, T) {
    return S === null || S.tag !== 6 ? (S = Cv(M, g.mode, T), S.return = g, S) : (S = r(S, M), S.return = g, S);
  }
  function c(g, S, M, T) {
    var U = M.type;
    return U === ql ? h(g, S, M.props.children, T, M.key) : S !== null && (S.elementType === U || typeof U == "object" && U !== null && U.$$typeof === go && hw(U) === S.type) ? (T = r(S, M.props), T.ref = uc(g, S, M), T.return = g, T) : (T = Yp(M.type, M.key, M.props, null, g.mode, T), T.ref = uc(g, S, M), T.return = g, T);
  }
  function f(g, S, M, T) {
    return S === null || S.tag !== 4 || S.stateNode.containerInfo !== M.containerInfo || S.stateNode.implementation !== M.implementation ? (S = Rv(M, g.mode, T), S.return = g, S) : (S = r(S, M.children || []), S.return = g, S);
  }
  function h(g, S, M, T, U) {
    return S === null || S.tag !== 7 ? (S = Oa(M, g.mode, T, U), S.return = g, S) : (S = r(S, M), S.return = g, S);
  }
  function d(g, S, M) {
    if (typeof S == "string" && S !== "" || typeof S == "number")
      return S = Cv("" + S, g.mode, M), S.return = g, S;
    if (typeof S == "object" && S !== null) {
      switch (S.$$typeof) {
        case md:
          return M = Yp(S.type, S.key, S.props, null, g.mode, M), M.ref = uc(g, null, S), M.return = g, M;
        case Yl:
          return S = Rv(S, g.mode, M), S.return = g, S;
        case go:
          var T = S._init;
          return d(g, T(S._payload), M);
      }
      if (Fc(S) || rc(S))
        return S = Oa(S, g.mode, M, null), S.return = g, S;
      Ad(g, S);
    }
    return null;
  }
  function p(g, S, M, T) {
    var U = S !== null ? S.key : null;
    if (typeof M == "string" && M !== "" || typeof M == "number")
      return U !== null ? null : a(g, S, "" + M, T);
    if (typeof M == "object" && M !== null) {
      switch (M.$$typeof) {
        case md:
          return M.key === U ? c(g, S, M, T) : null;
        case Yl:
          return M.key === U ? f(g, S, M, T) : null;
        case go:
          return U = M._init, p(
            g,
            S,
            U(M._payload),
            T
          );
      }
      if (Fc(M) || rc(M))
        return U !== null ? null : h(g, S, M, T, null);
      Ad(g, M);
    }
    return null;
  }
  function v(g, S, M, T, U) {
    if (typeof T == "string" && T !== "" || typeof T == "number")
      return g = g.get(M) || null, a(S, g, "" + T, U);
    if (typeof T == "object" && T !== null) {
      switch (T.$$typeof) {
        case md:
          return g = g.get(T.key === null ? M : T.key) || null, c(S, g, T, U);
        case Yl:
          return g = g.get(T.key === null ? M : T.key) || null, f(S, g, T, U);
        case go:
          var P = T._init;
          return v(g, S, M, P(T._payload), U);
      }
      if (Fc(T) || rc(T))
        return g = g.get(M) || null, h(S, g, T, U, null);
      Ad(S, T);
    }
    return null;
  }
  function y(g, S, M, T) {
    for (var U = null, P = null, D = S, R = S = 0, C = null; D !== null && R < M.length; R++) {
      D.index > R ? (C = D, D = null) : C = D.sibling;
      var A = p(g, D, M[R], T);
      if (A === null) {
        D === null && (D = C);
        break;
      }
      n && D && A.alternate === null && e(g, D), S = s(A, S, R), P === null ? U = A : P.sibling = A, P = A, D = C;
    }
    if (R === M.length)
      return t(g, D), mn && _a(g, R), U;
    if (D === null) {
      for (; R < M.length; R++)
        D = d(g, M[R], T), D !== null && (S = s(D, S, R), P === null ? U = D : P.sibling = D, P = D);
      return mn && _a(g, R), U;
    }
    for (D = i(g, D); R < M.length; R++)
      C = v(D, g, R, M[R], T), C !== null && (n && C.alternate !== null && D.delete(C.key === null ? R : C.key), S = s(C, S, R), P === null ? U = C : P.sibling = C, P = C);
    return n && D.forEach(function(N) {
      return e(g, N);
    }), mn && _a(g, R), U;
  }
  function w(g, S, M, T) {
    var U = rc(M);
    if (typeof U != "function")
      throw Error(Oe(150));
    if (M = U.call(M), M == null)
      throw Error(Oe(151));
    for (var P = U = null, D = S, R = S = 0, C = null, A = M.next(); D !== null && !A.done; R++, A = M.next()) {
      D.index > R ? (C = D, D = null) : C = D.sibling;
      var N = p(g, D, A.value, T);
      if (N === null) {
        D === null && (D = C);
        break;
      }
      n && D && N.alternate === null && e(g, D), S = s(N, S, R), P === null ? U = N : P.sibling = N, P = N, D = C;
    }
    if (A.done)
      return t(
        g,
        D
      ), mn && _a(g, R), U;
    if (D === null) {
      for (; !A.done; R++, A = M.next())
        A = d(g, A.value, T), A !== null && (S = s(A, S, R), P === null ? U = A : P.sibling = A, P = A);
      return mn && _a(g, R), U;
    }
    for (D = i(g, D); !A.done; R++, A = M.next())
      A = v(D, g, R, A.value, T), A !== null && (n && A.alternate !== null && D.delete(A.key === null ? R : A.key), S = s(A, S, R), P === null ? U = A : P.sibling = A, P = A);
    return n && D.forEach(function(G) {
      return e(g, G);
    }), mn && _a(g, R), U;
  }
  function x(g, S, M, T) {
    if (typeof M == "object" && M !== null && M.type === ql && M.key === null && (M = M.props.children), typeof M == "object" && M !== null) {
      switch (M.$$typeof) {
        case md:
          e: {
            for (var U = M.key, P = S; P !== null; ) {
              if (P.key === U) {
                if (U = M.type, U === ql) {
                  if (P.tag === 7) {
                    t(g, P.sibling), S = r(P, M.props.children), S.return = g, g = S;
                    break e;
                  }
                } else if (P.elementType === U || typeof U == "object" && U !== null && U.$$typeof === go && hw(U) === P.type) {
                  t(g, P.sibling), S = r(P, M.props), S.ref = uc(g, P, M), S.return = g, g = S;
                  break e;
                }
                t(g, P);
                break;
              } else
                e(g, P);
              P = P.sibling;
            }
            M.type === ql ? (S = Oa(M.props.children, g.mode, T, M.key), S.return = g, g = S) : (T = Yp(M.type, M.key, M.props, null, g.mode, T), T.ref = uc(g, S, M), T.return = g, g = T);
          }
          return o(g);
        case Yl:
          e: {
            for (P = M.key; S !== null; ) {
              if (S.key === P)
                if (S.tag === 4 && S.stateNode.containerInfo === M.containerInfo && S.stateNode.implementation === M.implementation) {
                  t(g, S.sibling), S = r(S, M.children || []), S.return = g, g = S;
                  break e;
                } else {
                  t(g, S);
                  break;
                }
              else
                e(g, S);
              S = S.sibling;
            }
            S = Rv(M, g.mode, T), S.return = g, g = S;
          }
          return o(g);
        case go:
          return P = M._init, x(g, S, P(M._payload), T);
      }
      if (Fc(M))
        return y(g, S, M, T);
      if (rc(M))
        return w(g, S, M, T);
      Ad(g, M);
    }
    return typeof M == "string" && M !== "" || typeof M == "number" ? (M = "" + M, S !== null && S.tag === 6 ? (t(g, S.sibling), S = r(S, M), S.return = g, g = S) : (t(g, S), S = Cv(M, g.mode, T), S.return = g, g = S), o(g)) : t(g, S);
  }
  return x;
}
var Su = zC(!0), BC = zC(!1), th = {}, ds = Ho(th), Mf = Ho(th), wf = Ho(th);
function Ra(n) {
  if (n === th)
    throw Error(Oe(174));
  return n;
}
function bx(n, e) {
  switch (un(wf, e), un(Mf, n), un(ds, th), n = e.nodeType, n) {
    case 9:
    case 11:
      e = (e = e.documentElement) ? e.namespaceURI : Gy(null, "");
      break;
    default:
      n = n === 8 ? e.parentNode : e, e = n.namespaceURI || null, n = n.tagName, e = Gy(e, n);
  }
  hn(ds), un(ds, e);
}
function Mu() {
  hn(ds), hn(Mf), hn(wf);
}
function HC(n) {
  Ra(wf.current);
  var e = Ra(ds.current), t = Gy(e, n.type);
  e !== t && (un(Mf, n), un(ds, t));
}
function Px(n) {
  Mf.current === n && (hn(ds), hn(Mf));
}
var yn = Ho(0);
function pm(n) {
  for (var e = n; e !== null; ) {
    if (e.tag === 13) {
      var t = e.memoizedState;
      if (t !== null && (t = t.dehydrated, t === null || t.data === "$?" || t.data === "$!"))
        return e;
    } else if (e.tag === 19 && e.memoizedProps.revealOrder !== void 0) {
      if (e.flags & 128)
        return e;
    } else if (e.child !== null) {
      e.child.return = e, e = e.child;
      continue;
    }
    if (e === n)
      break;
    for (; e.sibling === null; ) {
      if (e.return === null || e.return === n)
        return null;
      e = e.return;
    }
    e.sibling.return = e.return, e = e.sibling;
  }
  return null;
}
var Sv = [];
function Ix() {
  for (var n = 0; n < Sv.length; n++)
    Sv[n]._workInProgressVersionPrimary = null;
  Sv.length = 0;
}
var Hp = Zs.ReactCurrentDispatcher, Mv = Zs.ReactCurrentBatchConfig, Wa = 0, Mn = null, Vn = null, Jn = null, mm = !1, qc = !1, Ef = 0, oL = 0;
function ci() {
  throw Error(Oe(321));
}
function Lx(n, e) {
  if (e === null)
    return !1;
  for (var t = 0; t < e.length && t < n.length; t++)
    if (!jr(n[t], e[t]))
      return !1;
  return !0;
}
function Dx(n, e, t, i, r, s) {
  if (Wa = s, Mn = e, e.memoizedState = null, e.updateQueue = null, e.lanes = 0, Hp.current = n === null || n.memoizedState === null ? cL : fL, n = t(i, r), qc) {
    s = 0;
    do {
      if (qc = !1, Ef = 0, 25 <= s)
        throw Error(Oe(301));
      s += 1, Jn = Vn = null, e.updateQueue = null, Hp.current = hL, n = t(i, r);
    } while (qc);
  }
  if (Hp.current = gm, e = Vn !== null && Vn.next !== null, Wa = 0, Jn = Vn = Mn = null, mm = !1, e)
    throw Error(Oe(300));
  return n;
}
function Nx() {
  var n = Ef !== 0;
  return Ef = 0, n;
}
function as() {
  var n = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  return Jn === null ? Mn.memoizedState = Jn = n : Jn = Jn.next = n, Jn;
}
function Rr() {
  if (Vn === null) {
    var n = Mn.alternate;
    n = n !== null ? n.memoizedState : null;
  } else
    n = Vn.next;
  var e = Jn === null ? Mn.memoizedState : Jn.next;
  if (e !== null)
    Jn = e, Vn = n;
  else {
    if (n === null)
      throw Error(Oe(310));
    Vn = n, n = { memoizedState: Vn.memoizedState, baseState: Vn.baseState, baseQueue: Vn.baseQueue, queue: Vn.queue, next: null }, Jn === null ? Mn.memoizedState = Jn = n : Jn = Jn.next = n;
  }
  return Jn;
}
function Tf(n, e) {
  return typeof e == "function" ? e(n) : e;
}
function wv(n) {
  var e = Rr(), t = e.queue;
  if (t === null)
    throw Error(Oe(311));
  t.lastRenderedReducer = n;
  var i = Vn, r = i.baseQueue, s = t.pending;
  if (s !== null) {
    if (r !== null) {
      var o = r.next;
      r.next = s.next, s.next = o;
    }
    i.baseQueue = r = s, t.pending = null;
  }
  if (r !== null) {
    s = r.next, i = i.baseState;
    var a = o = null, c = null, f = s;
    do {
      var h = f.lane;
      if ((Wa & h) === h)
        c !== null && (c = c.next = { lane: 0, action: f.action, hasEagerState: f.hasEagerState, eagerState: f.eagerState, next: null }), i = f.hasEagerState ? f.eagerState : n(i, f.action);
      else {
        var d = {
          lane: h,
          action: f.action,
          hasEagerState: f.hasEagerState,
          eagerState: f.eagerState,
          next: null
        };
        c === null ? (a = c = d, o = i) : c = c.next = d, Mn.lanes |= h, Xa |= h;
      }
      f = f.next;
    } while (f !== null && f !== s);
    c === null ? o = i : c.next = a, jr(i, e.memoizedState) || (Vi = !0), e.memoizedState = i, e.baseState = o, e.baseQueue = c, t.lastRenderedState = i;
  }
  if (n = t.interleaved, n !== null) {
    r = n;
    do
      s = r.lane, Mn.lanes |= s, Xa |= s, r = r.next;
    while (r !== n);
  } else
    r === null && (t.lanes = 0);
  return [e.memoizedState, t.dispatch];
}
function Ev(n) {
  var e = Rr(), t = e.queue;
  if (t === null)
    throw Error(Oe(311));
  t.lastRenderedReducer = n;
  var i = t.dispatch, r = t.pending, s = e.memoizedState;
  if (r !== null) {
    t.pending = null;
    var o = r = r.next;
    do
      s = n(s, o.action), o = o.next;
    while (o !== r);
    jr(s, e.memoizedState) || (Vi = !0), e.memoizedState = s, e.baseQueue === null && (e.baseState = s), t.lastRenderedState = s;
  }
  return [s, i];
}
function VC() {
}
function GC(n, e) {
  var t = Mn, i = Rr(), r = e(), s = !jr(i.memoizedState, r);
  if (s && (i.memoizedState = r, Vi = !0), i = i.queue, Ux(YC.bind(null, t, i, n), [n]), i.getSnapshot !== e || s || Jn !== null && Jn.memoizedState.tag & 1) {
    if (t.flags |= 2048, Af(9, XC.bind(null, t, i, r, e), void 0, null), ei === null)
      throw Error(Oe(349));
    Wa & 30 || WC(t, e, r);
  }
  return r;
}
function WC(n, e, t) {
  n.flags |= 16384, n = { getSnapshot: e, value: t }, e = Mn.updateQueue, e === null ? (e = { lastEffect: null, stores: null }, Mn.updateQueue = e, e.stores = [n]) : (t = e.stores, t === null ? e.stores = [n] : t.push(n));
}
function XC(n, e, t, i) {
  e.value = t, e.getSnapshot = i, qC(e) && jC(n);
}
function YC(n, e, t) {
  return t(function() {
    qC(e) && jC(n);
  });
}
function qC(n) {
  var e = n.getSnapshot;
  n = n.value;
  try {
    var t = e();
    return !jr(n, t);
  } catch {
    return !0;
  }
}
function jC(n) {
  var e = Ys(n, 1);
  e !== null && Yr(e, n, 1, -1);
}
function dw(n) {
  var e = as();
  return typeof n == "function" && (n = n()), e.memoizedState = e.baseState = n, n = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Tf, lastRenderedState: n }, e.queue = n, n = n.dispatch = uL.bind(null, Mn, n), [e.memoizedState, n];
}
function Af(n, e, t, i) {
  return n = { tag: n, create: e, destroy: t, deps: i, next: null }, e = Mn.updateQueue, e === null ? (e = { lastEffect: null, stores: null }, Mn.updateQueue = e, e.lastEffect = n.next = n) : (t = e.lastEffect, t === null ? e.lastEffect = n.next = n : (i = t.next, t.next = n, n.next = i, e.lastEffect = n)), n;
}
function ZC() {
  return Rr().memoizedState;
}
function Vp(n, e, t, i) {
  var r = as();
  Mn.flags |= n, r.memoizedState = Af(1 | e, t, void 0, i === void 0 ? null : i);
}
function hg(n, e, t, i) {
  var r = Rr();
  i = i === void 0 ? null : i;
  var s = void 0;
  if (Vn !== null) {
    var o = Vn.memoizedState;
    if (s = o.destroy, i !== null && Lx(i, o.deps)) {
      r.memoizedState = Af(e, t, s, i);
      return;
    }
  }
  Mn.flags |= n, r.memoizedState = Af(1 | e, t, s, i);
}
function pw(n, e) {
  return Vp(8390656, 8, n, e);
}
function Ux(n, e) {
  return hg(2048, 8, n, e);
}
function KC(n, e) {
  return hg(4, 2, n, e);
}
function JC(n, e) {
  return hg(4, 4, n, e);
}
function QC(n, e) {
  if (typeof e == "function")
    return n = n(), e(n), function() {
      e(null);
    };
  if (e != null)
    return n = n(), e.current = n, function() {
      e.current = null;
    };
}
function $C(n, e, t) {
  return t = t != null ? t.concat([n]) : null, hg(4, 4, QC.bind(null, e, n), t);
}
function Ox() {
}
function eR(n, e) {
  var t = Rr();
  e = e === void 0 ? null : e;
  var i = t.memoizedState;
  return i !== null && e !== null && Lx(e, i[1]) ? i[0] : (t.memoizedState = [n, e], n);
}
function tR(n, e) {
  var t = Rr();
  e = e === void 0 ? null : e;
  var i = t.memoizedState;
  return i !== null && e !== null && Lx(e, i[1]) ? i[0] : (n = n(), t.memoizedState = [n, e], n);
}
function nR(n, e, t) {
  return Wa & 21 ? (jr(t, e) || (t = sC(), Mn.lanes |= t, Xa |= t, n.baseState = !0), e) : (n.baseState && (n.baseState = !1, Vi = !0), n.memoizedState = t);
}
function aL(n, e) {
  var t = tn;
  tn = t !== 0 && 4 > t ? t : 4, n(!0);
  var i = Mv.transition;
  Mv.transition = {};
  try {
    n(!1), e();
  } finally {
    tn = t, Mv.transition = i;
  }
}
function iR() {
  return Rr().memoizedState;
}
function lL(n, e, t) {
  var i = Do(n);
  if (t = { lane: i, action: t, hasEagerState: !1, eagerState: null, next: null }, rR(n))
    sR(e, t);
  else if (t = UC(n, e, t, i), t !== null) {
    var r = Ai();
    Yr(t, n, i, r), oR(t, e, i);
  }
}
function uL(n, e, t) {
  var i = Do(n), r = { lane: i, action: t, hasEagerState: !1, eagerState: null, next: null };
  if (rR(n))
    sR(e, r);
  else {
    var s = n.alternate;
    if (n.lanes === 0 && (s === null || s.lanes === 0) && (s = e.lastRenderedReducer, s !== null))
      try {
        var o = e.lastRenderedState, a = s(o, t);
        if (r.hasEagerState = !0, r.eagerState = a, jr(a, o)) {
          var c = e.interleaved;
          c === null ? (r.next = r, Cx(e)) : (r.next = c.next, c.next = r), e.interleaved = r;
          return;
        }
      } catch {
      } finally {
      }
    t = UC(n, e, r, i), t !== null && (r = Ai(), Yr(t, n, i, r), oR(t, e, i));
  }
}
function rR(n) {
  var e = n.alternate;
  return n === Mn || e !== null && e === Mn;
}
function sR(n, e) {
  qc = mm = !0;
  var t = n.pending;
  t === null ? e.next = e : (e.next = t.next, t.next = e), n.pending = e;
}
function oR(n, e, t) {
  if (t & 4194240) {
    var i = e.lanes;
    i &= n.pendingLanes, t |= i, e.lanes = t, dx(n, t);
  }
}
var gm = { readContext: Cr, useCallback: ci, useContext: ci, useEffect: ci, useImperativeHandle: ci, useInsertionEffect: ci, useLayoutEffect: ci, useMemo: ci, useReducer: ci, useRef: ci, useState: ci, useDebugValue: ci, useDeferredValue: ci, useTransition: ci, useMutableSource: ci, useSyncExternalStore: ci, useId: ci, unstable_isNewReconciler: !1 }, cL = { readContext: Cr, useCallback: function(n, e) {
  return as().memoizedState = [n, e === void 0 ? null : e], n;
}, useContext: Cr, useEffect: pw, useImperativeHandle: function(n, e, t) {
  return t = t != null ? t.concat([n]) : null, Vp(
    4194308,
    4,
    QC.bind(null, e, n),
    t
  );
}, useLayoutEffect: function(n, e) {
  return Vp(4194308, 4, n, e);
}, useInsertionEffect: function(n, e) {
  return Vp(4, 2, n, e);
}, useMemo: function(n, e) {
  var t = as();
  return e = e === void 0 ? null : e, n = n(), t.memoizedState = [n, e], n;
}, useReducer: function(n, e, t) {
  var i = as();
  return e = t !== void 0 ? t(e) : e, i.memoizedState = i.baseState = e, n = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: n, lastRenderedState: e }, i.queue = n, n = n.dispatch = lL.bind(null, Mn, n), [i.memoizedState, n];
}, useRef: function(n) {
  var e = as();
  return n = { current: n }, e.memoizedState = n;
}, useState: dw, useDebugValue: Ox, useDeferredValue: function(n) {
  return as().memoizedState = n;
}, useTransition: function() {
  var n = dw(!1), e = n[0];
  return n = aL.bind(null, n[1]), as().memoizedState = n, [e, n];
}, useMutableSource: function() {
}, useSyncExternalStore: function(n, e, t) {
  var i = Mn, r = as();
  if (mn) {
    if (t === void 0)
      throw Error(Oe(407));
    t = t();
  } else {
    if (t = e(), ei === null)
      throw Error(Oe(349));
    Wa & 30 || WC(i, e, t);
  }
  r.memoizedState = t;
  var s = { value: t, getSnapshot: e };
  return r.queue = s, pw(YC.bind(
    null,
    i,
    s,
    n
  ), [n]), i.flags |= 2048, Af(9, XC.bind(null, i, s, t, e), void 0, null), t;
}, useId: function() {
  var n = as(), e = ei.identifierPrefix;
  if (mn) {
    var t = Hs, i = Bs;
    t = (i & ~(1 << 32 - Xr(i) - 1)).toString(32) + t, e = ":" + e + "R" + t, t = Ef++, 0 < t && (e += "H" + t.toString(32)), e += ":";
  } else
    t = oL++, e = ":" + e + "r" + t.toString(32) + ":";
  return n.memoizedState = e;
}, unstable_isNewReconciler: !1 }, fL = {
  readContext: Cr,
  useCallback: eR,
  useContext: Cr,
  useEffect: Ux,
  useImperativeHandle: $C,
  useInsertionEffect: KC,
  useLayoutEffect: JC,
  useMemo: tR,
  useReducer: wv,
  useRef: ZC,
  useState: function() {
    return wv(Tf);
  },
  useDebugValue: Ox,
  useDeferredValue: function(n) {
    var e = Rr();
    return nR(e, Vn.memoizedState, n);
  },
  useTransition: function() {
    var n = wv(Tf)[0], e = Rr().memoizedState;
    return [n, e];
  },
  useMutableSource: VC,
  useSyncExternalStore: GC,
  useId: iR,
  unstable_isNewReconciler: !1
}, hL = { readContext: Cr, useCallback: eR, useContext: Cr, useEffect: Ux, useImperativeHandle: $C, useInsertionEffect: KC, useLayoutEffect: JC, useMemo: tR, useReducer: Ev, useRef: ZC, useState: function() {
  return Ev(Tf);
}, useDebugValue: Ox, useDeferredValue: function(n) {
  var e = Rr();
  return Vn === null ? e.memoizedState = n : nR(e, Vn.memoizedState, n);
}, useTransition: function() {
  var n = Ev(Tf)[0], e = Rr().memoizedState;
  return [n, e];
}, useMutableSource: VC, useSyncExternalStore: GC, useId: iR, unstable_isNewReconciler: !1 };
function wu(n, e) {
  try {
    var t = "", i = e;
    do
      t += B3(i), i = i.return;
    while (i);
    var r = t;
  } catch (s) {
    r = `
Error generating stack: ` + s.message + `
` + s.stack;
  }
  return { value: n, source: e, stack: r, digest: null };
}
function Tv(n, e, t) {
  return { value: n, source: null, stack: t ?? null, digest: e ?? null };
}
function h_(n, e) {
  try {
    console.error(e.value);
  } catch (t) {
    setTimeout(function() {
      throw t;
    });
  }
}
var dL = typeof WeakMap == "function" ? WeakMap : Map;
function aR(n, e, t) {
  t = Gs(-1, t), t.tag = 3, t.payload = { element: null };
  var i = e.value;
  return t.callback = function() {
    ym || (ym = !0, M_ = i), h_(n, e);
  }, t;
}
function lR(n, e, t) {
  t = Gs(-1, t), t.tag = 3;
  var i = n.type.getDerivedStateFromError;
  if (typeof i == "function") {
    var r = e.value;
    t.payload = function() {
      return i(r);
    }, t.callback = function() {
      h_(n, e);
    };
  }
  var s = n.stateNode;
  return s !== null && typeof s.componentDidCatch == "function" && (t.callback = function() {
    h_(n, e), typeof i != "function" && (Lo === null ? Lo = /* @__PURE__ */ new Set([this]) : Lo.add(this));
    var o = e.stack;
    this.componentDidCatch(e.value, { componentStack: o !== null ? o : "" });
  }), t;
}
function mw(n, e, t) {
  var i = n.pingCache;
  if (i === null) {
    i = n.pingCache = new dL();
    var r = /* @__PURE__ */ new Set();
    i.set(e, r);
  } else
    r = i.get(e), r === void 0 && (r = /* @__PURE__ */ new Set(), i.set(e, r));
  r.has(t) || (r.add(t), n = CL.bind(null, n, e, t), e.then(n, n));
}
function gw(n) {
  do {
    var e;
    if ((e = n.tag === 13) && (e = n.memoizedState, e = e !== null ? e.dehydrated !== null : !0), e)
      return n;
    n = n.return;
  } while (n !== null);
  return null;
}
function vw(n, e, t, i, r) {
  return n.mode & 1 ? (n.flags |= 65536, n.lanes = r, n) : (n === e ? n.flags |= 65536 : (n.flags |= 128, t.flags |= 131072, t.flags &= -52805, t.tag === 1 && (t.alternate === null ? t.tag = 17 : (e = Gs(-1, 1), e.tag = 2, Io(t, e, 1))), t.lanes |= 1), n);
}
var pL = Zs.ReactCurrentOwner, Vi = !1;
function wi(n, e, t, i) {
  e.child = n === null ? BC(e, null, t, i) : Su(e, n.child, t, i);
}
function yw(n, e, t, i, r) {
  t = t.render;
  var s = e.ref;
  return pu(e, r), i = Dx(n, e, t, i, s, r), t = Nx(), n !== null && !Vi ? (e.updateQueue = n.updateQueue, e.flags &= -2053, n.lanes &= ~r, qs(n, e, r)) : (mn && t && Sx(e), e.flags |= 1, wi(n, e, i, r), e.child);
}
function _w(n, e, t, i, r) {
  if (n === null) {
    var s = t.type;
    return typeof s == "function" && !Wx(s) && s.defaultProps === void 0 && t.compare === null && t.defaultProps === void 0 ? (e.tag = 15, e.type = s, uR(n, e, s, i, r)) : (n = Yp(t.type, null, i, e, e.mode, r), n.ref = e.ref, n.return = e, e.child = n);
  }
  if (s = n.child, !(n.lanes & r)) {
    var o = s.memoizedProps;
    if (t = t.compare, t = t !== null ? t : yf, t(o, i) && n.ref === e.ref)
      return qs(n, e, r);
  }
  return e.flags |= 1, n = No(s, i), n.ref = e.ref, n.return = e, e.child = n;
}
function uR(n, e, t, i, r) {
  if (n !== null) {
    var s = n.memoizedProps;
    if (yf(s, i) && n.ref === e.ref)
      if (Vi = !1, e.pendingProps = i = s, (n.lanes & r) !== 0)
        n.flags & 131072 && (Vi = !0);
      else
        return e.lanes = n.lanes, qs(n, e, r);
  }
  return d_(n, e, t, i, r);
}
function cR(n, e, t) {
  var i = e.pendingProps, r = i.children, s = n !== null ? n.memoizedState : null;
  if (i.mode === "hidden")
    if (!(e.mode & 1))
      e.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, un(iu, er), er |= t;
    else {
      if (!(t & 1073741824))
        return n = s !== null ? s.baseLanes | t : t, e.lanes = e.childLanes = 1073741824, e.memoizedState = { baseLanes: n, cachePool: null, transitions: null }, e.updateQueue = null, un(iu, er), er |= n, null;
      e.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, i = s !== null ? s.baseLanes : t, un(iu, er), er |= i;
    }
  else
    s !== null ? (i = s.baseLanes | t, e.memoizedState = null) : i = t, un(iu, er), er |= i;
  return wi(n, e, r, t), e.child;
}
function fR(n, e) {
  var t = e.ref;
  (n === null && t !== null || n !== null && n.ref !== t) && (e.flags |= 512, e.flags |= 2097152);
}
function d_(n, e, t, i, r) {
  var s = Wi(t) ? Va : vi.current;
  return s = _u(e, s), pu(e, r), t = Dx(n, e, t, i, s, r), i = Nx(), n !== null && !Vi ? (e.updateQueue = n.updateQueue, e.flags &= -2053, n.lanes &= ~r, qs(n, e, r)) : (mn && i && Sx(e), e.flags |= 1, wi(n, e, t, r), e.child);
}
function xw(n, e, t, i, r) {
  if (Wi(t)) {
    var s = !0;
    lm(e);
  } else
    s = !1;
  if (pu(e, r), e.stateNode === null)
    Gp(n, e), kC(e, t, i), f_(e, t, i, r), i = !0;
  else if (n === null) {
    var o = e.stateNode, a = e.memoizedProps;
    o.props = a;
    var c = o.context, f = t.contextType;
    typeof f == "object" && f !== null ? f = Cr(f) : (f = Wi(t) ? Va : vi.current, f = _u(e, f));
    var h = t.getDerivedStateFromProps, d = typeof h == "function" || typeof o.getSnapshotBeforeUpdate == "function";
    d || typeof o.UNSAFE_componentWillReceiveProps != "function" && typeof o.componentWillReceiveProps != "function" || (a !== i || c !== f) && fw(e, o, i, f), vo = !1;
    var p = e.memoizedState;
    o.state = p, dm(e, i, o, r), c = e.memoizedState, a !== i || p !== c || Gi.current || vo ? (typeof h == "function" && (c_(e, t, h, i), c = e.memoizedState), (a = vo || cw(e, t, a, i, p, c, f)) ? (d || typeof o.UNSAFE_componentWillMount != "function" && typeof o.componentWillMount != "function" || (typeof o.componentWillMount == "function" && o.componentWillMount(), typeof o.UNSAFE_componentWillMount == "function" && o.UNSAFE_componentWillMount()), typeof o.componentDidMount == "function" && (e.flags |= 4194308)) : (typeof o.componentDidMount == "function" && (e.flags |= 4194308), e.memoizedProps = i, e.memoizedState = c), o.props = i, o.state = c, o.context = f, i = a) : (typeof o.componentDidMount == "function" && (e.flags |= 4194308), i = !1);
  } else {
    o = e.stateNode, OC(n, e), a = e.memoizedProps, f = e.type === e.elementType ? a : zr(e.type, a), o.props = f, d = e.pendingProps, p = o.context, c = t.contextType, typeof c == "object" && c !== null ? c = Cr(c) : (c = Wi(t) ? Va : vi.current, c = _u(e, c));
    var v = t.getDerivedStateFromProps;
    (h = typeof v == "function" || typeof o.getSnapshotBeforeUpdate == "function") || typeof o.UNSAFE_componentWillReceiveProps != "function" && typeof o.componentWillReceiveProps != "function" || (a !== d || p !== c) && fw(e, o, i, c), vo = !1, p = e.memoizedState, o.state = p, dm(e, i, o, r);
    var y = e.memoizedState;
    a !== d || p !== y || Gi.current || vo ? (typeof v == "function" && (c_(e, t, v, i), y = e.memoizedState), (f = vo || cw(e, t, f, i, p, y, c) || !1) ? (h || typeof o.UNSAFE_componentWillUpdate != "function" && typeof o.componentWillUpdate != "function" || (typeof o.componentWillUpdate == "function" && o.componentWillUpdate(i, y, c), typeof o.UNSAFE_componentWillUpdate == "function" && o.UNSAFE_componentWillUpdate(i, y, c)), typeof o.componentDidUpdate == "function" && (e.flags |= 4), typeof o.getSnapshotBeforeUpdate == "function" && (e.flags |= 1024)) : (typeof o.componentDidUpdate != "function" || a === n.memoizedProps && p === n.memoizedState || (e.flags |= 4), typeof o.getSnapshotBeforeUpdate != "function" || a === n.memoizedProps && p === n.memoizedState || (e.flags |= 1024), e.memoizedProps = i, e.memoizedState = y), o.props = i, o.state = y, o.context = c, i = f) : (typeof o.componentDidUpdate != "function" || a === n.memoizedProps && p === n.memoizedState || (e.flags |= 4), typeof o.getSnapshotBeforeUpdate != "function" || a === n.memoizedProps && p === n.memoizedState || (e.flags |= 1024), i = !1);
  }
  return p_(n, e, t, i, s, r);
}
function p_(n, e, t, i, r, s) {
  fR(n, e);
  var o = (e.flags & 128) !== 0;
  if (!i && !o)
    return r && sw(e, t, !1), qs(n, e, s);
  i = e.stateNode, pL.current = e;
  var a = o && typeof t.getDerivedStateFromError != "function" ? null : i.render();
  return e.flags |= 1, n !== null && o ? (e.child = Su(e, n.child, null, s), e.child = Su(e, null, a, s)) : wi(n, e, a, s), e.memoizedState = i.state, r && sw(e, t, !0), e.child;
}
function hR(n) {
  var e = n.stateNode;
  e.pendingContext ? rw(n, e.pendingContext, e.pendingContext !== e.context) : e.context && rw(n, e.context, !1), bx(n, e.containerInfo);
}
function Sw(n, e, t, i, r) {
  return xu(), wx(r), e.flags |= 256, wi(n, e, t, i), e.child;
}
var m_ = { dehydrated: null, treeContext: null, retryLane: 0 };
function g_(n) {
  return { baseLanes: n, cachePool: null, transitions: null };
}
function dR(n, e, t) {
  var i = e.pendingProps, r = yn.current, s = !1, o = (e.flags & 128) !== 0, a;
  if ((a = o) || (a = n !== null && n.memoizedState === null ? !1 : (r & 2) !== 0), a ? (s = !0, e.flags &= -129) : (n === null || n.memoizedState !== null) && (r |= 1), un(yn, r & 1), n === null)
    return l_(e), n = e.memoizedState, n !== null && (n = n.dehydrated, n !== null) ? (e.mode & 1 ? n.data === "$!" ? e.lanes = 8 : e.lanes = 1073741824 : e.lanes = 1, null) : (o = i.children, n = i.fallback, s ? (i = e.mode, s = e.child, o = { mode: "hidden", children: o }, !(i & 1) && s !== null ? (s.childLanes = 0, s.pendingProps = o) : s = mg(o, i, 0, null), n = Oa(n, i, t, null), s.return = e, n.return = e, s.sibling = n, e.child = s, e.child.memoizedState = g_(t), e.memoizedState = m_, n) : Fx(e, o));
  if (r = n.memoizedState, r !== null && (a = r.dehydrated, a !== null))
    return mL(n, e, o, i, a, r, t);
  if (s) {
    s = i.fallback, o = e.mode, r = n.child, a = r.sibling;
    var c = { mode: "hidden", children: i.children };
    return !(o & 1) && e.child !== r ? (i = e.child, i.childLanes = 0, i.pendingProps = c, e.deletions = null) : (i = No(r, c), i.subtreeFlags = r.subtreeFlags & 14680064), a !== null ? s = No(a, s) : (s = Oa(s, o, t, null), s.flags |= 2), s.return = e, i.return = e, i.sibling = s, e.child = i, i = s, s = e.child, o = n.child.memoizedState, o = o === null ? g_(t) : { baseLanes: o.baseLanes | t, cachePool: null, transitions: o.transitions }, s.memoizedState = o, s.childLanes = n.childLanes & ~t, e.memoizedState = m_, i;
  }
  return s = n.child, n = s.sibling, i = No(s, { mode: "visible", children: i.children }), !(e.mode & 1) && (i.lanes = t), i.return = e, i.sibling = null, n !== null && (t = e.deletions, t === null ? (e.deletions = [n], e.flags |= 16) : t.push(n)), e.child = i, e.memoizedState = null, i;
}
function Fx(n, e) {
  return e = mg({ mode: "visible", children: e }, n.mode, 0, null), e.return = n, n.child = e;
}
function Cd(n, e, t, i) {
  return i !== null && wx(i), Su(e, n.child, null, t), n = Fx(e, e.pendingProps.children), n.flags |= 2, e.memoizedState = null, n;
}
function mL(n, e, t, i, r, s, o) {
  if (t)
    return e.flags & 256 ? (e.flags &= -257, i = Tv(Error(Oe(422))), Cd(n, e, o, i)) : e.memoizedState !== null ? (e.child = n.child, e.flags |= 128, null) : (s = i.fallback, r = e.mode, i = mg({ mode: "visible", children: i.children }, r, 0, null), s = Oa(s, r, o, null), s.flags |= 2, i.return = e, s.return = e, i.sibling = s, e.child = i, e.mode & 1 && Su(e, n.child, null, o), e.child.memoizedState = g_(o), e.memoizedState = m_, s);
  if (!(e.mode & 1))
    return Cd(n, e, o, null);
  if (r.data === "$!") {
    if (i = r.nextSibling && r.nextSibling.dataset, i)
      var a = i.dgst;
    return i = a, s = Error(Oe(419)), i = Tv(s, i, void 0), Cd(n, e, o, i);
  }
  if (a = (o & n.childLanes) !== 0, Vi || a) {
    if (i = ei, i !== null) {
      switch (o & -o) {
        case 4:
          r = 2;
          break;
        case 16:
          r = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          r = 32;
          break;
        case 536870912:
          r = 268435456;
          break;
        default:
          r = 0;
      }
      r = r & (i.suspendedLanes | o) ? 0 : r, r !== 0 && r !== s.retryLane && (s.retryLane = r, Ys(n, r), Yr(i, n, r, -1));
    }
    return Gx(), i = Tv(Error(Oe(421))), Cd(n, e, o, i);
  }
  return r.data === "$?" ? (e.flags |= 128, e.child = n.child, e = RL.bind(null, n), r._reactRetry = e, null) : (n = s.treeContext, nr = Po(r.nextSibling), ir = e, mn = !0, Vr = null, n !== null && (Mr[wr++] = Bs, Mr[wr++] = Hs, Mr[wr++] = Ga, Bs = n.id, Hs = n.overflow, Ga = e), e = Fx(e, i.children), e.flags |= 4096, e);
}
function Mw(n, e, t) {
  n.lanes |= e;
  var i = n.alternate;
  i !== null && (i.lanes |= e), u_(n.return, e, t);
}
function Av(n, e, t, i, r) {
  var s = n.memoizedState;
  s === null ? n.memoizedState = { isBackwards: e, rendering: null, renderingStartTime: 0, last: i, tail: t, tailMode: r } : (s.isBackwards = e, s.rendering = null, s.renderingStartTime = 0, s.last = i, s.tail = t, s.tailMode = r);
}
function pR(n, e, t) {
  var i = e.pendingProps, r = i.revealOrder, s = i.tail;
  if (wi(n, e, i.children, t), i = yn.current, i & 2)
    i = i & 1 | 2, e.flags |= 128;
  else {
    if (n !== null && n.flags & 128)
      e:
        for (n = e.child; n !== null; ) {
          if (n.tag === 13)
            n.memoizedState !== null && Mw(n, t, e);
          else if (n.tag === 19)
            Mw(n, t, e);
          else if (n.child !== null) {
            n.child.return = n, n = n.child;
            continue;
          }
          if (n === e)
            break e;
          for (; n.sibling === null; ) {
            if (n.return === null || n.return === e)
              break e;
            n = n.return;
          }
          n.sibling.return = n.return, n = n.sibling;
        }
    i &= 1;
  }
  if (un(yn, i), !(e.mode & 1))
    e.memoizedState = null;
  else
    switch (r) {
      case "forwards":
        for (t = e.child, r = null; t !== null; )
          n = t.alternate, n !== null && pm(n) === null && (r = t), t = t.sibling;
        t = r, t === null ? (r = e.child, e.child = null) : (r = t.sibling, t.sibling = null), Av(e, !1, r, t, s);
        break;
      case "backwards":
        for (t = null, r = e.child, e.child = null; r !== null; ) {
          if (n = r.alternate, n !== null && pm(n) === null) {
            e.child = r;
            break;
          }
          n = r.sibling, r.sibling = t, t = r, r = n;
        }
        Av(e, !0, t, null, s);
        break;
      case "together":
        Av(e, !1, null, null, void 0);
        break;
      default:
        e.memoizedState = null;
    }
  return e.child;
}
function Gp(n, e) {
  !(e.mode & 1) && n !== null && (n.alternate = null, e.alternate = null, e.flags |= 2);
}
function qs(n, e, t) {
  if (n !== null && (e.dependencies = n.dependencies), Xa |= e.lanes, !(t & e.childLanes))
    return null;
  if (n !== null && e.child !== n.child)
    throw Error(Oe(153));
  if (e.child !== null) {
    for (n = e.child, t = No(n, n.pendingProps), e.child = t, t.return = e; n.sibling !== null; )
      n = n.sibling, t = t.sibling = No(n, n.pendingProps), t.return = e;
    t.sibling = null;
  }
  return e.child;
}
function gL(n, e, t) {
  switch (e.tag) {
    case 3:
      hR(e), xu();
      break;
    case 5:
      HC(e);
      break;
    case 1:
      Wi(e.type) && lm(e);
      break;
    case 4:
      bx(e, e.stateNode.containerInfo);
      break;
    case 10:
      var i = e.type._context, r = e.memoizedProps.value;
      un(fm, i._currentValue), i._currentValue = r;
      break;
    case 13:
      if (i = e.memoizedState, i !== null)
        return i.dehydrated !== null ? (un(yn, yn.current & 1), e.flags |= 128, null) : t & e.child.childLanes ? dR(n, e, t) : (un(yn, yn.current & 1), n = qs(n, e, t), n !== null ? n.sibling : null);
      un(yn, yn.current & 1);
      break;
    case 19:
      if (i = (t & e.childLanes) !== 0, n.flags & 128) {
        if (i)
          return pR(n, e, t);
        e.flags |= 128;
      }
      if (r = e.memoizedState, r !== null && (r.rendering = null, r.tail = null, r.lastEffect = null), un(yn, yn.current), i)
        break;
      return null;
    case 22:
    case 23:
      return e.lanes = 0, cR(n, e, t);
  }
  return qs(n, e, t);
}
var mR, v_, gR, vR;
mR = function(n, e) {
  for (var t = e.child; t !== null; ) {
    if (t.tag === 5 || t.tag === 6)
      n.appendChild(t.stateNode);
    else if (t.tag !== 4 && t.child !== null) {
      t.child.return = t, t = t.child;
      continue;
    }
    if (t === e)
      break;
    for (; t.sibling === null; ) {
      if (t.return === null || t.return === e)
        return;
      t = t.return;
    }
    t.sibling.return = t.return, t = t.sibling;
  }
};
v_ = function() {
};
gR = function(n, e, t, i) {
  var r = n.memoizedProps;
  if (r !== i) {
    n = e.stateNode, Ra(ds.current);
    var s = null;
    switch (t) {
      case "input":
        r = zy(n, r), i = zy(n, i), s = [];
        break;
      case "select":
        r = wn({}, r, { value: void 0 }), i = wn({}, i, { value: void 0 }), s = [];
        break;
      case "textarea":
        r = Vy(n, r), i = Vy(n, i), s = [];
        break;
      default:
        typeof r.onClick != "function" && typeof i.onClick == "function" && (n.onclick = om);
    }
    Wy(t, i);
    var o;
    t = null;
    for (f in r)
      if (!i.hasOwnProperty(f) && r.hasOwnProperty(f) && r[f] != null)
        if (f === "style") {
          var a = r[f];
          for (o in a)
            a.hasOwnProperty(o) && (t || (t = {}), t[o] = "");
        } else
          f !== "dangerouslySetInnerHTML" && f !== "children" && f !== "suppressContentEditableWarning" && f !== "suppressHydrationWarning" && f !== "autoFocus" && (ff.hasOwnProperty(f) ? s || (s = []) : (s = s || []).push(f, null));
    for (f in i) {
      var c = i[f];
      if (a = r?.[f], i.hasOwnProperty(f) && c !== a && (c != null || a != null))
        if (f === "style")
          if (a) {
            for (o in a)
              !a.hasOwnProperty(o) || c && c.hasOwnProperty(o) || (t || (t = {}), t[o] = "");
            for (o in c)
              c.hasOwnProperty(o) && a[o] !== c[o] && (t || (t = {}), t[o] = c[o]);
          } else
            t || (s || (s = []), s.push(
              f,
              t
            )), t = c;
        else
          f === "dangerouslySetInnerHTML" ? (c = c ? c.__html : void 0, a = a ? a.__html : void 0, c != null && a !== c && (s = s || []).push(f, c)) : f === "children" ? typeof c != "string" && typeof c != "number" || (s = s || []).push(f, "" + c) : f !== "suppressContentEditableWarning" && f !== "suppressHydrationWarning" && (ff.hasOwnProperty(f) ? (c != null && f === "onScroll" && cn("scroll", n), s || a === c || (s = [])) : (s = s || []).push(f, c));
    }
    t && (s = s || []).push("style", t);
    var f = s;
    (e.updateQueue = f) && (e.flags |= 4);
  }
};
vR = function(n, e, t, i) {
  t !== i && (e.flags |= 4);
};
function cc(n, e) {
  if (!mn)
    switch (n.tailMode) {
      case "hidden":
        e = n.tail;
        for (var t = null; e !== null; )
          e.alternate !== null && (t = e), e = e.sibling;
        t === null ? n.tail = null : t.sibling = null;
        break;
      case "collapsed":
        t = n.tail;
        for (var i = null; t !== null; )
          t.alternate !== null && (i = t), t = t.sibling;
        i === null ? e || n.tail === null ? n.tail = null : n.tail.sibling = null : i.sibling = null;
    }
}
function fi(n) {
  var e = n.alternate !== null && n.alternate.child === n.child, t = 0, i = 0;
  if (e)
    for (var r = n.child; r !== null; )
      t |= r.lanes | r.childLanes, i |= r.subtreeFlags & 14680064, i |= r.flags & 14680064, r.return = n, r = r.sibling;
  else
    for (r = n.child; r !== null; )
      t |= r.lanes | r.childLanes, i |= r.subtreeFlags, i |= r.flags, r.return = n, r = r.sibling;
  return n.subtreeFlags |= i, n.childLanes = t, e;
}
function vL(n, e, t) {
  var i = e.pendingProps;
  switch (Mx(e), e.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return fi(e), null;
    case 1:
      return Wi(e.type) && am(), fi(e), null;
    case 3:
      return i = e.stateNode, Mu(), hn(Gi), hn(vi), Ix(), i.pendingContext && (i.context = i.pendingContext, i.pendingContext = null), (n === null || n.child === null) && (Td(e) ? e.flags |= 4 : n === null || n.memoizedState.isDehydrated && !(e.flags & 256) || (e.flags |= 1024, Vr !== null && (T_(Vr), Vr = null))), v_(n, e), fi(e), null;
    case 5:
      Px(e);
      var r = Ra(wf.current);
      if (t = e.type, n !== null && e.stateNode != null)
        gR(n, e, t, i, r), n.ref !== e.ref && (e.flags |= 512, e.flags |= 2097152);
      else {
        if (!i) {
          if (e.stateNode === null)
            throw Error(Oe(166));
          return fi(e), null;
        }
        if (n = Ra(ds.current), Td(e)) {
          i = e.stateNode, t = e.type;
          var s = e.memoizedProps;
          switch (i[ls] = e, i[Sf] = s, n = (e.mode & 1) !== 0, t) {
            case "dialog":
              cn("cancel", i), cn("close", i);
              break;
            case "iframe":
            case "object":
            case "embed":
              cn("load", i);
              break;
            case "video":
            case "audio":
              for (r = 0; r < zc.length; r++)
                cn(zc[r], i);
              break;
            case "source":
              cn("error", i);
              break;
            case "img":
            case "image":
            case "link":
              cn(
                "error",
                i
              ), cn("load", i);
              break;
            case "details":
              cn("toggle", i);
              break;
            case "input":
              IM(i, s), cn("invalid", i);
              break;
            case "select":
              i._wrapperState = { wasMultiple: !!s.multiple }, cn("invalid", i);
              break;
            case "textarea":
              DM(i, s), cn("invalid", i);
          }
          Wy(t, s), r = null;
          for (var o in s)
            if (s.hasOwnProperty(o)) {
              var a = s[o];
              o === "children" ? typeof a == "string" ? i.textContent !== a && (s.suppressHydrationWarning !== !0 && Ed(i.textContent, a, n), r = ["children", a]) : typeof a == "number" && i.textContent !== "" + a && (s.suppressHydrationWarning !== !0 && Ed(
                i.textContent,
                a,
                n
              ), r = ["children", "" + a]) : ff.hasOwnProperty(o) && a != null && o === "onScroll" && cn("scroll", i);
            }
          switch (t) {
            case "input":
              gd(i), LM(i, s, !0);
              break;
            case "textarea":
              gd(i), NM(i);
              break;
            case "select":
            case "option":
              break;
            default:
              typeof s.onClick == "function" && (i.onclick = om);
          }
          i = r, e.updateQueue = i, i !== null && (e.flags |= 4);
        } else {
          o = r.nodeType === 9 ? r : r.ownerDocument, n === "http://www.w3.org/1999/xhtml" && (n = WA(t)), n === "http://www.w3.org/1999/xhtml" ? t === "script" ? (n = o.createElement("div"), n.innerHTML = "<script><\/script>", n = n.removeChild(n.firstChild)) : typeof i.is == "string" ? n = o.createElement(t, { is: i.is }) : (n = o.createElement(t), t === "select" && (o = n, i.multiple ? o.multiple = !0 : i.size && (o.size = i.size))) : n = o.createElementNS(n, t), n[ls] = e, n[Sf] = i, mR(n, e, !1, !1), e.stateNode = n;
          e: {
            switch (o = Xy(t, i), t) {
              case "dialog":
                cn("cancel", n), cn("close", n), r = i;
                break;
              case "iframe":
              case "object":
              case "embed":
                cn("load", n), r = i;
                break;
              case "video":
              case "audio":
                for (r = 0; r < zc.length; r++)
                  cn(zc[r], n);
                r = i;
                break;
              case "source":
                cn("error", n), r = i;
                break;
              case "img":
              case "image":
              case "link":
                cn(
                  "error",
                  n
                ), cn("load", n), r = i;
                break;
              case "details":
                cn("toggle", n), r = i;
                break;
              case "input":
                IM(n, i), r = zy(n, i), cn("invalid", n);
                break;
              case "option":
                r = i;
                break;
              case "select":
                n._wrapperState = { wasMultiple: !!i.multiple }, r = wn({}, i, { value: void 0 }), cn("invalid", n);
                break;
              case "textarea":
                DM(n, i), r = Vy(n, i), cn("invalid", n);
                break;
              default:
                r = i;
            }
            Wy(t, r), a = r;
            for (s in a)
              if (a.hasOwnProperty(s)) {
                var c = a[s];
                s === "style" ? qA(n, c) : s === "dangerouslySetInnerHTML" ? (c = c ? c.__html : void 0, c != null && XA(n, c)) : s === "children" ? typeof c == "string" ? (t !== "textarea" || c !== "") && hf(n, c) : typeof c == "number" && hf(n, "" + c) : s !== "suppressContentEditableWarning" && s !== "suppressHydrationWarning" && s !== "autoFocus" && (ff.hasOwnProperty(s) ? c != null && s === "onScroll" && cn("scroll", n) : c != null && ax(n, s, c, o));
              }
            switch (t) {
              case "input":
                gd(n), LM(n, i, !1);
                break;
              case "textarea":
                gd(n), NM(n);
                break;
              case "option":
                i.value != null && n.setAttribute("value", "" + Uo(i.value));
                break;
              case "select":
                n.multiple = !!i.multiple, s = i.value, s != null ? cu(n, !!i.multiple, s, !1) : i.defaultValue != null && cu(
                  n,
                  !!i.multiple,
                  i.defaultValue,
                  !0
                );
                break;
              default:
                typeof r.onClick == "function" && (n.onclick = om);
            }
            switch (t) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                i = !!i.autoFocus;
                break e;
              case "img":
                i = !0;
                break e;
              default:
                i = !1;
            }
          }
          i && (e.flags |= 4);
        }
        e.ref !== null && (e.flags |= 512, e.flags |= 2097152);
      }
      return fi(e), null;
    case 6:
      if (n && e.stateNode != null)
        vR(n, e, n.memoizedProps, i);
      else {
        if (typeof i != "string" && e.stateNode === null)
          throw Error(Oe(166));
        if (t = Ra(wf.current), Ra(ds.current), Td(e)) {
          if (i = e.stateNode, t = e.memoizedProps, i[ls] = e, (s = i.nodeValue !== t) && (n = ir, n !== null))
            switch (n.tag) {
              case 3:
                Ed(i.nodeValue, t, (n.mode & 1) !== 0);
                break;
              case 5:
                n.memoizedProps.suppressHydrationWarning !== !0 && Ed(i.nodeValue, t, (n.mode & 1) !== 0);
            }
          s && (e.flags |= 4);
        } else
          i = (t.nodeType === 9 ? t : t.ownerDocument).createTextNode(i), i[ls] = e, e.stateNode = i;
      }
      return fi(e), null;
    case 13:
      if (hn(yn), i = e.memoizedState, n === null || n.memoizedState !== null && n.memoizedState.dehydrated !== null) {
        if (mn && nr !== null && e.mode & 1 && !(e.flags & 128))
          NC(), xu(), e.flags |= 98560, s = !1;
        else if (s = Td(e), i !== null && i.dehydrated !== null) {
          if (n === null) {
            if (!s)
              throw Error(Oe(318));
            if (s = e.memoizedState, s = s !== null ? s.dehydrated : null, !s)
              throw Error(Oe(317));
            s[ls] = e;
          } else
            xu(), !(e.flags & 128) && (e.memoizedState = null), e.flags |= 4;
          fi(e), s = !1;
        } else
          Vr !== null && (T_(Vr), Vr = null), s = !0;
        if (!s)
          return e.flags & 65536 ? e : null;
      }
      return e.flags & 128 ? (e.lanes = t, e) : (i = i !== null, i !== (n !== null && n.memoizedState !== null) && i && (e.child.flags |= 8192, e.mode & 1 && (n === null || yn.current & 1 ? Gn === 0 && (Gn = 3) : Gx())), e.updateQueue !== null && (e.flags |= 4), fi(e), null);
    case 4:
      return Mu(), v_(n, e), n === null && _f(e.stateNode.containerInfo), fi(e), null;
    case 10:
      return Ax(e.type._context), fi(e), null;
    case 17:
      return Wi(e.type) && am(), fi(e), null;
    case 19:
      if (hn(yn), s = e.memoizedState, s === null)
        return fi(e), null;
      if (i = (e.flags & 128) !== 0, o = s.rendering, o === null)
        if (i)
          cc(s, !1);
        else {
          if (Gn !== 0 || n !== null && n.flags & 128)
            for (n = e.child; n !== null; ) {
              if (o = pm(n), o !== null) {
                for (e.flags |= 128, cc(s, !1), i = o.updateQueue, i !== null && (e.updateQueue = i, e.flags |= 4), e.subtreeFlags = 0, i = t, t = e.child; t !== null; )
                  s = t, n = i, s.flags &= 14680066, o = s.alternate, o === null ? (s.childLanes = 0, s.lanes = n, s.child = null, s.subtreeFlags = 0, s.memoizedProps = null, s.memoizedState = null, s.updateQueue = null, s.dependencies = null, s.stateNode = null) : (s.childLanes = o.childLanes, s.lanes = o.lanes, s.child = o.child, s.subtreeFlags = 0, s.deletions = null, s.memoizedProps = o.memoizedProps, s.memoizedState = o.memoizedState, s.updateQueue = o.updateQueue, s.type = o.type, n = o.dependencies, s.dependencies = n === null ? null : { lanes: n.lanes, firstContext: n.firstContext }), t = t.sibling;
                return un(yn, yn.current & 1 | 2), e.child;
              }
              n = n.sibling;
            }
          s.tail !== null && In() > Eu && (e.flags |= 128, i = !0, cc(s, !1), e.lanes = 4194304);
        }
      else {
        if (!i)
          if (n = pm(o), n !== null) {
            if (e.flags |= 128, i = !0, t = n.updateQueue, t !== null && (e.updateQueue = t, e.flags |= 4), cc(s, !0), s.tail === null && s.tailMode === "hidden" && !o.alternate && !mn)
              return fi(e), null;
          } else
            2 * In() - s.renderingStartTime > Eu && t !== 1073741824 && (e.flags |= 128, i = !0, cc(s, !1), e.lanes = 4194304);
        s.isBackwards ? (o.sibling = e.child, e.child = o) : (t = s.last, t !== null ? t.sibling = o : e.child = o, s.last = o);
      }
      return s.tail !== null ? (e = s.tail, s.rendering = e, s.tail = e.sibling, s.renderingStartTime = In(), e.sibling = null, t = yn.current, un(yn, i ? t & 1 | 2 : t & 1), e) : (fi(e), null);
    case 22:
    case 23:
      return Vx(), i = e.memoizedState !== null, n !== null && n.memoizedState !== null !== i && (e.flags |= 8192), i && e.mode & 1 ? er & 1073741824 && (fi(e), e.subtreeFlags & 6 && (e.flags |= 8192)) : fi(e), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(Oe(156, e.tag));
}
function yL(n, e) {
  switch (Mx(e), e.tag) {
    case 1:
      return Wi(e.type) && am(), n = e.flags, n & 65536 ? (e.flags = n & -65537 | 128, e) : null;
    case 3:
      return Mu(), hn(Gi), hn(vi), Ix(), n = e.flags, n & 65536 && !(n & 128) ? (e.flags = n & -65537 | 128, e) : null;
    case 5:
      return Px(e), null;
    case 13:
      if (hn(yn), n = e.memoizedState, n !== null && n.dehydrated !== null) {
        if (e.alternate === null)
          throw Error(Oe(340));
        xu();
      }
      return n = e.flags, n & 65536 ? (e.flags = n & -65537 | 128, e) : null;
    case 19:
      return hn(yn), null;
    case 4:
      return Mu(), null;
    case 10:
      return Ax(e.type._context), null;
    case 22:
    case 23:
      return Vx(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Rd = !1, mi = !1, _L = typeof WeakSet == "function" ? WeakSet : Set, tt = null;
function nu(n, e) {
  var t = n.ref;
  if (t !== null)
    if (typeof t == "function")
      try {
        t(null);
      } catch (i) {
        An(n, e, i);
      }
    else
      t.current = null;
}
function y_(n, e, t) {
  try {
    t();
  } catch (i) {
    An(n, e, i);
  }
}
var ww = !1;
function xL(n, e) {
  if (t_ = im, n = SC(), xx(n)) {
    if ("selectionStart" in n)
      var t = { start: n.selectionStart, end: n.selectionEnd };
    else
      e: {
        t = (t = n.ownerDocument) && t.defaultView || window;
        var i = t.getSelection && t.getSelection();
        if (i && i.rangeCount !== 0) {
          t = i.anchorNode;
          var r = i.anchorOffset, s = i.focusNode;
          i = i.focusOffset;
          try {
            t.nodeType, s.nodeType;
          } catch {
            t = null;
            break e;
          }
          var o = 0, a = -1, c = -1, f = 0, h = 0, d = n, p = null;
          t:
            for (; ; ) {
              for (var v; d !== t || r !== 0 && d.nodeType !== 3 || (a = o + r), d !== s || i !== 0 && d.nodeType !== 3 || (c = o + i), d.nodeType === 3 && (o += d.nodeValue.length), (v = d.firstChild) !== null; )
                p = d, d = v;
              for (; ; ) {
                if (d === n)
                  break t;
                if (p === t && ++f === r && (a = o), p === s && ++h === i && (c = o), (v = d.nextSibling) !== null)
                  break;
                d = p, p = d.parentNode;
              }
              d = v;
            }
          t = a === -1 || c === -1 ? null : { start: a, end: c };
        } else
          t = null;
      }
    t = t || { start: 0, end: 0 };
  } else
    t = null;
  for (n_ = { focusedElem: n, selectionRange: t }, im = !1, tt = e; tt !== null; )
    if (e = tt, n = e.child, (e.subtreeFlags & 1028) !== 0 && n !== null)
      n.return = e, tt = n;
    else
      for (; tt !== null; ) {
        e = tt;
        try {
          var y = e.alternate;
          if (e.flags & 1024)
            switch (e.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (y !== null) {
                  var w = y.memoizedProps, x = y.memoizedState, g = e.stateNode, S = g.getSnapshotBeforeUpdate(e.elementType === e.type ? w : zr(e.type, w), x);
                  g.__reactInternalSnapshotBeforeUpdate = S;
                }
                break;
              case 3:
                var M = e.stateNode.containerInfo;
                M.nodeType === 1 ? M.textContent = "" : M.nodeType === 9 && M.documentElement && M.removeChild(M.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(Oe(163));
            }
        } catch (T) {
          An(e, e.return, T);
        }
        if (n = e.sibling, n !== null) {
          n.return = e.return, tt = n;
          break;
        }
        tt = e.return;
      }
  return y = ww, ww = !1, y;
}
function jc(n, e, t) {
  var i = e.updateQueue;
  if (i = i !== null ? i.lastEffect : null, i !== null) {
    var r = i = i.next;
    do {
      if ((r.tag & n) === n) {
        var s = r.destroy;
        r.destroy = void 0, s !== void 0 && y_(e, t, s);
      }
      r = r.next;
    } while (r !== i);
  }
}
function dg(n, e) {
  if (e = e.updateQueue, e = e !== null ? e.lastEffect : null, e !== null) {
    var t = e = e.next;
    do {
      if ((t.tag & n) === n) {
        var i = t.create;
        t.destroy = i();
      }
      t = t.next;
    } while (t !== e);
  }
}
function __(n) {
  var e = n.ref;
  if (e !== null) {
    var t = n.stateNode;
    switch (n.tag) {
      case 5:
        n = t;
        break;
      default:
        n = t;
    }
    typeof e == "function" ? e(n) : e.current = n;
  }
}
function yR(n) {
  var e = n.alternate;
  e !== null && (n.alternate = null, yR(e)), n.child = null, n.deletions = null, n.sibling = null, n.tag === 5 && (e = n.stateNode, e !== null && (delete e[ls], delete e[Sf], delete e[s_], delete e[nL], delete e[iL])), n.stateNode = null, n.return = null, n.dependencies = null, n.memoizedProps = null, n.memoizedState = null, n.pendingProps = null, n.stateNode = null, n.updateQueue = null;
}
function _R(n) {
  return n.tag === 5 || n.tag === 3 || n.tag === 4;
}
function Ew(n) {
  e:
    for (; ; ) {
      for (; n.sibling === null; ) {
        if (n.return === null || _R(n.return))
          return null;
        n = n.return;
      }
      for (n.sibling.return = n.return, n = n.sibling; n.tag !== 5 && n.tag !== 6 && n.tag !== 18; ) {
        if (n.flags & 2 || n.child === null || n.tag === 4)
          continue e;
        n.child.return = n, n = n.child;
      }
      if (!(n.flags & 2))
        return n.stateNode;
    }
}
function x_(n, e, t) {
  var i = n.tag;
  if (i === 5 || i === 6)
    n = n.stateNode, e ? t.nodeType === 8 ? t.parentNode.insertBefore(n, e) : t.insertBefore(n, e) : (t.nodeType === 8 ? (e = t.parentNode, e.insertBefore(n, t)) : (e = t, e.appendChild(n)), t = t._reactRootContainer, t != null || e.onclick !== null || (e.onclick = om));
  else if (i !== 4 && (n = n.child, n !== null))
    for (x_(n, e, t), n = n.sibling; n !== null; )
      x_(n, e, t), n = n.sibling;
}
function S_(n, e, t) {
  var i = n.tag;
  if (i === 5 || i === 6)
    n = n.stateNode, e ? t.insertBefore(n, e) : t.appendChild(n);
  else if (i !== 4 && (n = n.child, n !== null))
    for (S_(n, e, t), n = n.sibling; n !== null; )
      S_(n, e, t), n = n.sibling;
}
var ni = null, Hr = !1;
function so(n, e, t) {
  for (t = t.child; t !== null; )
    xR(n, e, t), t = t.sibling;
}
function xR(n, e, t) {
  if (hs && typeof hs.onCommitFiberUnmount == "function")
    try {
      hs.onCommitFiberUnmount(sg, t);
    } catch {
    }
  switch (t.tag) {
    case 5:
      mi || nu(t, e);
    case 6:
      var i = ni, r = Hr;
      ni = null, so(n, e, t), ni = i, Hr = r, ni !== null && (Hr ? (n = ni, t = t.stateNode, n.nodeType === 8 ? n.parentNode.removeChild(t) : n.removeChild(t)) : ni.removeChild(t.stateNode));
      break;
    case 18:
      ni !== null && (Hr ? (n = ni, t = t.stateNode, n.nodeType === 8 ? _v(n.parentNode, t) : n.nodeType === 1 && _v(n, t), gf(n)) : _v(ni, t.stateNode));
      break;
    case 4:
      i = ni, r = Hr, ni = t.stateNode.containerInfo, Hr = !0, so(n, e, t), ni = i, Hr = r;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!mi && (i = t.updateQueue, i !== null && (i = i.lastEffect, i !== null))) {
        r = i = i.next;
        do {
          var s = r, o = s.destroy;
          s = s.tag, o !== void 0 && (s & 2 || s & 4) && y_(t, e, o), r = r.next;
        } while (r !== i);
      }
      so(n, e, t);
      break;
    case 1:
      if (!mi && (nu(t, e), i = t.stateNode, typeof i.componentWillUnmount == "function"))
        try {
          i.props = t.memoizedProps, i.state = t.memoizedState, i.componentWillUnmount();
        } catch (a) {
          An(t, e, a);
        }
      so(n, e, t);
      break;
    case 21:
      so(n, e, t);
      break;
    case 22:
      t.mode & 1 ? (mi = (i = mi) || t.memoizedState !== null, so(n, e, t), mi = i) : so(n, e, t);
      break;
    default:
      so(n, e, t);
  }
}
function Tw(n) {
  var e = n.updateQueue;
  if (e !== null) {
    n.updateQueue = null;
    var t = n.stateNode;
    t === null && (t = n.stateNode = new _L()), e.forEach(function(i) {
      var r = bL.bind(null, n, i);
      t.has(i) || (t.add(i), i.then(r, r));
    });
  }
}
function Dr(n, e) {
  var t = e.deletions;
  if (t !== null)
    for (var i = 0; i < t.length; i++) {
      var r = t[i];
      try {
        var s = n, o = e, a = o;
        e:
          for (; a !== null; ) {
            switch (a.tag) {
              case 5:
                ni = a.stateNode, Hr = !1;
                break e;
              case 3:
                ni = a.stateNode.containerInfo, Hr = !0;
                break e;
              case 4:
                ni = a.stateNode.containerInfo, Hr = !0;
                break e;
            }
            a = a.return;
          }
        if (ni === null)
          throw Error(Oe(160));
        xR(s, o, r), ni = null, Hr = !1;
        var c = r.alternate;
        c !== null && (c.return = null), r.return = null;
      } catch (f) {
        An(r, e, f);
      }
    }
  if (e.subtreeFlags & 12854)
    for (e = e.child; e !== null; )
      SR(e, n), e = e.sibling;
}
function SR(n, e) {
  var t = n.alternate, i = n.flags;
  switch (n.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      if (Dr(e, n), os(n), i & 4) {
        try {
          jc(3, n, n.return), dg(3, n);
        } catch (w) {
          An(n, n.return, w);
        }
        try {
          jc(5, n, n.return);
        } catch (w) {
          An(n, n.return, w);
        }
      }
      break;
    case 1:
      Dr(e, n), os(n), i & 512 && t !== null && nu(t, t.return);
      break;
    case 5:
      if (Dr(e, n), os(n), i & 512 && t !== null && nu(t, t.return), n.flags & 32) {
        var r = n.stateNode;
        try {
          hf(r, "");
        } catch (w) {
          An(n, n.return, w);
        }
      }
      if (i & 4 && (r = n.stateNode, r != null)) {
        var s = n.memoizedProps, o = t !== null ? t.memoizedProps : s, a = n.type, c = n.updateQueue;
        if (n.updateQueue = null, c !== null)
          try {
            a === "input" && s.type === "radio" && s.name != null && VA(r, s), Xy(a, o);
            var f = Xy(a, s);
            for (o = 0; o < c.length; o += 2) {
              var h = c[o], d = c[o + 1];
              h === "style" ? qA(r, d) : h === "dangerouslySetInnerHTML" ? XA(r, d) : h === "children" ? hf(r, d) : ax(r, h, d, f);
            }
            switch (a) {
              case "input":
                By(r, s);
                break;
              case "textarea":
                GA(r, s);
                break;
              case "select":
                var p = r._wrapperState.wasMultiple;
                r._wrapperState.wasMultiple = !!s.multiple;
                var v = s.value;
                v != null ? cu(r, !!s.multiple, v, !1) : p !== !!s.multiple && (s.defaultValue != null ? cu(
                  r,
                  !!s.multiple,
                  s.defaultValue,
                  !0
                ) : cu(r, !!s.multiple, s.multiple ? [] : "", !1));
            }
            r[Sf] = s;
          } catch (w) {
            An(n, n.return, w);
          }
      }
      break;
    case 6:
      if (Dr(e, n), os(n), i & 4) {
        if (n.stateNode === null)
          throw Error(Oe(162));
        r = n.stateNode, s = n.memoizedProps;
        try {
          r.nodeValue = s;
        } catch (w) {
          An(n, n.return, w);
        }
      }
      break;
    case 3:
      if (Dr(e, n), os(n), i & 4 && t !== null && t.memoizedState.isDehydrated)
        try {
          gf(e.containerInfo);
        } catch (w) {
          An(n, n.return, w);
        }
      break;
    case 4:
      Dr(e, n), os(n);
      break;
    case 13:
      Dr(e, n), os(n), r = n.child, r.flags & 8192 && (s = r.memoizedState !== null, r.stateNode.isHidden = s, !s || r.alternate !== null && r.alternate.memoizedState !== null || (Bx = In())), i & 4 && Tw(n);
      break;
    case 22:
      if (h = t !== null && t.memoizedState !== null, n.mode & 1 ? (mi = (f = mi) || h, Dr(e, n), mi = f) : Dr(e, n), os(n), i & 8192) {
        if (f = n.memoizedState !== null, (n.stateNode.isHidden = f) && !h && n.mode & 1)
          for (tt = n, h = n.child; h !== null; ) {
            for (d = tt = h; tt !== null; ) {
              switch (p = tt, v = p.child, p.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  jc(4, p, p.return);
                  break;
                case 1:
                  nu(p, p.return);
                  var y = p.stateNode;
                  if (typeof y.componentWillUnmount == "function") {
                    i = p, t = p.return;
                    try {
                      e = i, y.props = e.memoizedProps, y.state = e.memoizedState, y.componentWillUnmount();
                    } catch (w) {
                      An(i, t, w);
                    }
                  }
                  break;
                case 5:
                  nu(p, p.return);
                  break;
                case 22:
                  if (p.memoizedState !== null) {
                    Cw(d);
                    continue;
                  }
              }
              v !== null ? (v.return = p, tt = v) : Cw(d);
            }
            h = h.sibling;
          }
        e:
          for (h = null, d = n; ; ) {
            if (d.tag === 5) {
              if (h === null) {
                h = d;
                try {
                  r = d.stateNode, f ? (s = r.style, typeof s.setProperty == "function" ? s.setProperty("display", "none", "important") : s.display = "none") : (a = d.stateNode, c = d.memoizedProps.style, o = c != null && c.hasOwnProperty("display") ? c.display : null, a.style.display = YA("display", o));
                } catch (w) {
                  An(n, n.return, w);
                }
              }
            } else if (d.tag === 6) {
              if (h === null)
                try {
                  d.stateNode.nodeValue = f ? "" : d.memoizedProps;
                } catch (w) {
                  An(n, n.return, w);
                }
            } else if ((d.tag !== 22 && d.tag !== 23 || d.memoizedState === null || d === n) && d.child !== null) {
              d.child.return = d, d = d.child;
              continue;
            }
            if (d === n)
              break e;
            for (; d.sibling === null; ) {
              if (d.return === null || d.return === n)
                break e;
              h === d && (h = null), d = d.return;
            }
            h === d && (h = null), d.sibling.return = d.return, d = d.sibling;
          }
      }
      break;
    case 19:
      Dr(e, n), os(n), i & 4 && Tw(n);
      break;
    case 21:
      break;
    default:
      Dr(
        e,
        n
      ), os(n);
  }
}
function os(n) {
  var e = n.flags;
  if (e & 2) {
    try {
      e: {
        for (var t = n.return; t !== null; ) {
          if (_R(t)) {
            var i = t;
            break e;
          }
          t = t.return;
        }
        throw Error(Oe(160));
      }
      switch (i.tag) {
        case 5:
          var r = i.stateNode;
          i.flags & 32 && (hf(r, ""), i.flags &= -33);
          var s = Ew(n);
          S_(n, s, r);
          break;
        case 3:
        case 4:
          var o = i.stateNode.containerInfo, a = Ew(n);
          x_(n, a, o);
          break;
        default:
          throw Error(Oe(161));
      }
    } catch (c) {
      An(n, n.return, c);
    }
    n.flags &= -3;
  }
  e & 4096 && (n.flags &= -4097);
}
function SL(n, e, t) {
  tt = n, MR(n);
}
function MR(n, e, t) {
  for (var i = (n.mode & 1) !== 0; tt !== null; ) {
    var r = tt, s = r.child;
    if (r.tag === 22 && i) {
      var o = r.memoizedState !== null || Rd;
      if (!o) {
        var a = r.alternate, c = a !== null && a.memoizedState !== null || mi;
        a = Rd;
        var f = mi;
        if (Rd = o, (mi = c) && !f)
          for (tt = r; tt !== null; )
            o = tt, c = o.child, o.tag === 22 && o.memoizedState !== null ? Rw(r) : c !== null ? (c.return = o, tt = c) : Rw(r);
        for (; s !== null; )
          tt = s, MR(s), s = s.sibling;
        tt = r, Rd = a, mi = f;
      }
      Aw(n);
    } else
      r.subtreeFlags & 8772 && s !== null ? (s.return = r, tt = s) : Aw(n);
  }
}
function Aw(n) {
  for (; tt !== null; ) {
    var e = tt;
    if (e.flags & 8772) {
      var t = e.alternate;
      try {
        if (e.flags & 8772)
          switch (e.tag) {
            case 0:
            case 11:
            case 15:
              mi || dg(5, e);
              break;
            case 1:
              var i = e.stateNode;
              if (e.flags & 4 && !mi)
                if (t === null)
                  i.componentDidMount();
                else {
                  var r = e.elementType === e.type ? t.memoizedProps : zr(e.type, t.memoizedProps);
                  i.componentDidUpdate(r, t.memoizedState, i.__reactInternalSnapshotBeforeUpdate);
                }
              var s = e.updateQueue;
              s !== null && uw(e, s, i);
              break;
            case 3:
              var o = e.updateQueue;
              if (o !== null) {
                if (t = null, e.child !== null)
                  switch (e.child.tag) {
                    case 5:
                      t = e.child.stateNode;
                      break;
                    case 1:
                      t = e.child.stateNode;
                  }
                uw(e, o, t);
              }
              break;
            case 5:
              var a = e.stateNode;
              if (t === null && e.flags & 4) {
                t = a;
                var c = e.memoizedProps;
                switch (e.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    c.autoFocus && t.focus();
                    break;
                  case "img":
                    c.src && (t.src = c.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (e.memoizedState === null) {
                var f = e.alternate;
                if (f !== null) {
                  var h = f.memoizedState;
                  if (h !== null) {
                    var d = h.dehydrated;
                    d !== null && gf(d);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(Oe(163));
          }
        mi || e.flags & 512 && __(e);
      } catch (p) {
        An(e, e.return, p);
      }
    }
    if (e === n) {
      tt = null;
      break;
    }
    if (t = e.sibling, t !== null) {
      t.return = e.return, tt = t;
      break;
    }
    tt = e.return;
  }
}
function Cw(n) {
  for (; tt !== null; ) {
    var e = tt;
    if (e === n) {
      tt = null;
      break;
    }
    var t = e.sibling;
    if (t !== null) {
      t.return = e.return, tt = t;
      break;
    }
    tt = e.return;
  }
}
function Rw(n) {
  for (; tt !== null; ) {
    var e = tt;
    try {
      switch (e.tag) {
        case 0:
        case 11:
        case 15:
          var t = e.return;
          try {
            dg(4, e);
          } catch (c) {
            An(e, t, c);
          }
          break;
        case 1:
          var i = e.stateNode;
          if (typeof i.componentDidMount == "function") {
            var r = e.return;
            try {
              i.componentDidMount();
            } catch (c) {
              An(e, r, c);
            }
          }
          var s = e.return;
          try {
            __(e);
          } catch (c) {
            An(e, s, c);
          }
          break;
        case 5:
          var o = e.return;
          try {
            __(e);
          } catch (c) {
            An(e, o, c);
          }
      }
    } catch (c) {
      An(e, e.return, c);
    }
    if (e === n) {
      tt = null;
      break;
    }
    var a = e.sibling;
    if (a !== null) {
      a.return = e.return, tt = a;
      break;
    }
    tt = e.return;
  }
}
var ML = Math.ceil, vm = Zs.ReactCurrentDispatcher, kx = Zs.ReactCurrentOwner, Ar = Zs.ReactCurrentBatchConfig, Xt = 0, ei = null, zn = null, ii = 0, er = 0, iu = Ho(0), Gn = 0, Cf = null, Xa = 0, pg = 0, zx = 0, Zc = null, Hi = null, Bx = 0, Eu = 1 / 0, Us = null, ym = !1, M_ = null, Lo = null, bd = !1, Eo = null, _m = 0, Kc = 0, w_ = null, Wp = -1, Xp = 0;
function Ai() {
  return Xt & 6 ? In() : Wp !== -1 ? Wp : Wp = In();
}
function Do(n) {
  return n.mode & 1 ? Xt & 2 && ii !== 0 ? ii & -ii : sL.transition !== null ? (Xp === 0 && (Xp = sC()), Xp) : (n = tn, n !== 0 || (n = window.event, n = n === void 0 ? 16 : hC(n.type)), n) : 1;
}
function Yr(n, e, t, i) {
  if (50 < Kc)
    throw Kc = 0, w_ = null, Error(Oe(185));
  Qf(n, t, i), (!(Xt & 2) || n !== ei) && (n === ei && (!(Xt & 2) && (pg |= t), Gn === 4 && xo(n, ii)), Xi(n, i), t === 1 && Xt === 0 && !(e.mode & 1) && (Eu = In() + 500, cg && Vo()));
}
function Xi(n, e) {
  var t = n.callbackNode;
  sI(n, e);
  var i = nm(n, n === ei ? ii : 0);
  if (i === 0)
    t !== null && FM(t), n.callbackNode = null, n.callbackPriority = 0;
  else if (e = i & -i, n.callbackPriority !== e) {
    if (t != null && FM(t), e === 1)
      n.tag === 0 ? rL(bw.bind(null, n)) : IC(bw.bind(null, n)), eL(function() {
        !(Xt & 6) && Vo();
      }), t = null;
    else {
      switch (oC(i)) {
        case 1:
          t = hx;
          break;
        case 4:
          t = iC;
          break;
        case 16:
          t = tm;
          break;
        case 536870912:
          t = rC;
          break;
        default:
          t = tm;
      }
      t = PR(t, wR.bind(null, n));
    }
    n.callbackPriority = e, n.callbackNode = t;
  }
}
function wR(n, e) {
  if (Wp = -1, Xp = 0, Xt & 6)
    throw Error(Oe(327));
  var t = n.callbackNode;
  if (mu() && n.callbackNode !== t)
    return null;
  var i = nm(n, n === ei ? ii : 0);
  if (i === 0)
    return null;
  if (i & 30 || i & n.expiredLanes || e)
    e = xm(n, i);
  else {
    e = i;
    var r = Xt;
    Xt |= 2;
    var s = TR();
    (ei !== n || ii !== e) && (Us = null, Eu = In() + 500, Ua(n, e));
    do
      try {
        TL();
        break;
      } catch (a) {
        ER(n, a);
      }
    while (1);
    Tx(), vm.current = s, Xt = r, zn !== null ? e = 0 : (ei = null, ii = 0, e = Gn);
  }
  if (e !== 0) {
    if (e === 2 && (r = Ky(n), r !== 0 && (i = r, e = E_(n, r))), e === 1)
      throw t = Cf, Ua(n, 0), xo(n, i), Xi(n, In()), t;
    if (e === 6)
      xo(n, i);
    else {
      if (r = n.current.alternate, !(i & 30) && !wL(r) && (e = xm(n, i), e === 2 && (s = Ky(n), s !== 0 && (i = s, e = E_(n, s))), e === 1))
        throw t = Cf, Ua(n, 0), xo(n, i), Xi(n, In()), t;
      switch (n.finishedWork = r, n.finishedLanes = i, e) {
        case 0:
        case 1:
          throw Error(Oe(345));
        case 2:
          xa(n, Hi, Us);
          break;
        case 3:
          if (xo(n, i), (i & 130023424) === i && (e = Bx + 500 - In(), 10 < e)) {
            if (nm(n, 0) !== 0)
              break;
            if (r = n.suspendedLanes, (r & i) !== i) {
              Ai(), n.pingedLanes |= n.suspendedLanes & r;
              break;
            }
            n.timeoutHandle = r_(xa.bind(null, n, Hi, Us), e);
            break;
          }
          xa(n, Hi, Us);
          break;
        case 4:
          if (xo(n, i), (i & 4194240) === i)
            break;
          for (e = n.eventTimes, r = -1; 0 < i; ) {
            var o = 31 - Xr(i);
            s = 1 << o, o = e[o], o > r && (r = o), i &= ~s;
          }
          if (i = r, i = In() - i, i = (120 > i ? 120 : 480 > i ? 480 : 1080 > i ? 1080 : 1920 > i ? 1920 : 3e3 > i ? 3e3 : 4320 > i ? 4320 : 1960 * ML(i / 1960)) - i, 10 < i) {
            n.timeoutHandle = r_(xa.bind(null, n, Hi, Us), i);
            break;
          }
          xa(n, Hi, Us);
          break;
        case 5:
          xa(n, Hi, Us);
          break;
        default:
          throw Error(Oe(329));
      }
    }
  }
  return Xi(n, In()), n.callbackNode === t ? wR.bind(null, n) : null;
}
function E_(n, e) {
  var t = Zc;
  return n.current.memoizedState.isDehydrated && (Ua(n, e).flags |= 256), n = xm(n, e), n !== 2 && (e = Hi, Hi = t, e !== null && T_(e)), n;
}
function T_(n) {
  Hi === null ? Hi = n : Hi.push.apply(Hi, n);
}
function wL(n) {
  for (var e = n; ; ) {
    if (e.flags & 16384) {
      var t = e.updateQueue;
      if (t !== null && (t = t.stores, t !== null))
        for (var i = 0; i < t.length; i++) {
          var r = t[i], s = r.getSnapshot;
          r = r.value;
          try {
            if (!jr(s(), r))
              return !1;
          } catch {
            return !1;
          }
        }
    }
    if (t = e.child, e.subtreeFlags & 16384 && t !== null)
      t.return = e, e = t;
    else {
      if (e === n)
        break;
      for (; e.sibling === null; ) {
        if (e.return === null || e.return === n)
          return !0;
        e = e.return;
      }
      e.sibling.return = e.return, e = e.sibling;
    }
  }
  return !0;
}
function xo(n, e) {
  for (e &= ~zx, e &= ~pg, n.suspendedLanes |= e, n.pingedLanes &= ~e, n = n.expirationTimes; 0 < e; ) {
    var t = 31 - Xr(e), i = 1 << t;
    n[t] = -1, e &= ~i;
  }
}
function bw(n) {
  if (Xt & 6)
    throw Error(Oe(327));
  mu();
  var e = nm(n, 0);
  if (!(e & 1))
    return Xi(n, In()), null;
  var t = xm(n, e);
  if (n.tag !== 0 && t === 2) {
    var i = Ky(n);
    i !== 0 && (e = i, t = E_(n, i));
  }
  if (t === 1)
    throw t = Cf, Ua(n, 0), xo(n, e), Xi(n, In()), t;
  if (t === 6)
    throw Error(Oe(345));
  return n.finishedWork = n.current.alternate, n.finishedLanes = e, xa(n, Hi, Us), Xi(n, In()), null;
}
function Hx(n, e) {
  var t = Xt;
  Xt |= 1;
  try {
    return n(e);
  } finally {
    Xt = t, Xt === 0 && (Eu = In() + 500, cg && Vo());
  }
}
function Ya(n) {
  Eo !== null && Eo.tag === 0 && !(Xt & 6) && mu();
  var e = Xt;
  Xt |= 1;
  var t = Ar.transition, i = tn;
  try {
    if (Ar.transition = null, tn = 1, n)
      return n();
  } finally {
    tn = i, Ar.transition = t, Xt = e, !(Xt & 6) && Vo();
  }
}
function Vx() {
  er = iu.current, hn(iu);
}
function Ua(n, e) {
  n.finishedWork = null, n.finishedLanes = 0;
  var t = n.timeoutHandle;
  if (t !== -1 && (n.timeoutHandle = -1, $I(t)), zn !== null)
    for (t = zn.return; t !== null; ) {
      var i = t;
      switch (Mx(i), i.tag) {
        case 1:
          i = i.type.childContextTypes, i != null && am();
          break;
        case 3:
          Mu(), hn(Gi), hn(vi), Ix();
          break;
        case 5:
          Px(i);
          break;
        case 4:
          Mu();
          break;
        case 13:
          hn(yn);
          break;
        case 19:
          hn(yn);
          break;
        case 10:
          Ax(i.type._context);
          break;
        case 22:
        case 23:
          Vx();
      }
      t = t.return;
    }
  if (ei = n, zn = n = No(n.current, null), ii = er = e, Gn = 0, Cf = null, zx = pg = Xa = 0, Hi = Zc = null, Ca !== null) {
    for (e = 0; e < Ca.length; e++)
      if (t = Ca[e], i = t.interleaved, i !== null) {
        t.interleaved = null;
        var r = i.next, s = t.pending;
        if (s !== null) {
          var o = s.next;
          s.next = r, i.next = o;
        }
        t.pending = i;
      }
    Ca = null;
  }
  return n;
}
function ER(n, e) {
  do {
    var t = zn;
    try {
      if (Tx(), Hp.current = gm, mm) {
        for (var i = Mn.memoizedState; i !== null; ) {
          var r = i.queue;
          r !== null && (r.pending = null), i = i.next;
        }
        mm = !1;
      }
      if (Wa = 0, Jn = Vn = Mn = null, qc = !1, Ef = 0, kx.current = null, t === null || t.return === null) {
        Gn = 1, Cf = e, zn = null;
        break;
      }
      e: {
        var s = n, o = t.return, a = t, c = e;
        if (e = ii, a.flags |= 32768, c !== null && typeof c == "object" && typeof c.then == "function") {
          var f = c, h = a, d = h.tag;
          if (!(h.mode & 1) && (d === 0 || d === 11 || d === 15)) {
            var p = h.alternate;
            p ? (h.updateQueue = p.updateQueue, h.memoizedState = p.memoizedState, h.lanes = p.lanes) : (h.updateQueue = null, h.memoizedState = null);
          }
          var v = gw(o);
          if (v !== null) {
            v.flags &= -257, vw(v, o, a, s, e), v.mode & 1 && mw(s, f, e), e = v, c = f;
            var y = e.updateQueue;
            if (y === null) {
              var w = /* @__PURE__ */ new Set();
              w.add(c), e.updateQueue = w;
            } else
              y.add(c);
            break e;
          } else {
            if (!(e & 1)) {
              mw(s, f, e), Gx();
              break e;
            }
            c = Error(Oe(426));
          }
        } else if (mn && a.mode & 1) {
          var x = gw(o);
          if (x !== null) {
            !(x.flags & 65536) && (x.flags |= 256), vw(x, o, a, s, e), wx(wu(c, a));
            break e;
          }
        }
        s = c = wu(c, a), Gn !== 4 && (Gn = 2), Zc === null ? Zc = [s] : Zc.push(s), s = o;
        do {
          switch (s.tag) {
            case 3:
              s.flags |= 65536, e &= -e, s.lanes |= e;
              var g = aR(s, c, e);
              lw(s, g);
              break e;
            case 1:
              a = c;
              var S = s.type, M = s.stateNode;
              if (!(s.flags & 128) && (typeof S.getDerivedStateFromError == "function" || M !== null && typeof M.componentDidCatch == "function" && (Lo === null || !Lo.has(M)))) {
                s.flags |= 65536, e &= -e, s.lanes |= e;
                var T = lR(s, a, e);
                lw(s, T);
                break e;
              }
          }
          s = s.return;
        } while (s !== null);
      }
      CR(t);
    } catch (U) {
      e = U, zn === t && t !== null && (zn = t = t.return);
      continue;
    }
    break;
  } while (1);
}
function TR() {
  var n = vm.current;
  return vm.current = gm, n === null ? gm : n;
}
function Gx() {
  (Gn === 0 || Gn === 3 || Gn === 2) && (Gn = 4), ei === null || !(Xa & 268435455) && !(pg & 268435455) || xo(ei, ii);
}
function xm(n, e) {
  var t = Xt;
  Xt |= 2;
  var i = TR();
  (ei !== n || ii !== e) && (Us = null, Ua(n, e));
  do
    try {
      EL();
      break;
    } catch (r) {
      ER(n, r);
    }
  while (1);
  if (Tx(), Xt = t, vm.current = i, zn !== null)
    throw Error(Oe(261));
  return ei = null, ii = 0, Gn;
}
function EL() {
  for (; zn !== null; )
    AR(zn);
}
function TL() {
  for (; zn !== null && !K3(); )
    AR(zn);
}
function AR(n) {
  var e = bR(n.alternate, n, er);
  n.memoizedProps = n.pendingProps, e === null ? CR(n) : zn = e, kx.current = null;
}
function CR(n) {
  var e = n;
  do {
    var t = e.alternate;
    if (n = e.return, e.flags & 32768) {
      if (t = yL(t, e), t !== null) {
        t.flags &= 32767, zn = t;
        return;
      }
      if (n !== null)
        n.flags |= 32768, n.subtreeFlags = 0, n.deletions = null;
      else {
        Gn = 6, zn = null;
        return;
      }
    } else if (t = vL(t, e, er), t !== null) {
      zn = t;
      return;
    }
    if (e = e.sibling, e !== null) {
      zn = e;
      return;
    }
    zn = e = n;
  } while (e !== null);
  Gn === 0 && (Gn = 5);
}
function xa(n, e, t) {
  var i = tn, r = Ar.transition;
  try {
    Ar.transition = null, tn = 1, AL(n, e, t, i);
  } finally {
    Ar.transition = r, tn = i;
  }
  return null;
}
function AL(n, e, t, i) {
  do
    mu();
  while (Eo !== null);
  if (Xt & 6)
    throw Error(Oe(327));
  t = n.finishedWork;
  var r = n.finishedLanes;
  if (t === null)
    return null;
  if (n.finishedWork = null, n.finishedLanes = 0, t === n.current)
    throw Error(Oe(177));
  n.callbackNode = null, n.callbackPriority = 0;
  var s = t.lanes | t.childLanes;
  if (oI(n, s), n === ei && (zn = ei = null, ii = 0), !(t.subtreeFlags & 2064) && !(t.flags & 2064) || bd || (bd = !0, PR(tm, function() {
    return mu(), null;
  })), s = (t.flags & 15990) !== 0, t.subtreeFlags & 15990 || s) {
    s = Ar.transition, Ar.transition = null;
    var o = tn;
    tn = 1;
    var a = Xt;
    Xt |= 4, kx.current = null, xL(n, t), SR(t, n), YI(n_), im = !!t_, n_ = t_ = null, n.current = t, SL(t), J3(), Xt = a, tn = o, Ar.transition = s;
  } else
    n.current = t;
  if (bd && (bd = !1, Eo = n, _m = r), s = n.pendingLanes, s === 0 && (Lo = null), eI(t.stateNode), Xi(n, In()), e !== null)
    for (i = n.onRecoverableError, t = 0; t < e.length; t++)
      r = e[t], i(r.value, { componentStack: r.stack, digest: r.digest });
  if (ym)
    throw ym = !1, n = M_, M_ = null, n;
  return _m & 1 && n.tag !== 0 && mu(), s = n.pendingLanes, s & 1 ? n === w_ ? Kc++ : (Kc = 0, w_ = n) : Kc = 0, Vo(), null;
}
function mu() {
  if (Eo !== null) {
    var n = oC(_m), e = Ar.transition, t = tn;
    try {
      if (Ar.transition = null, tn = 16 > n ? 16 : n, Eo === null)
        var i = !1;
      else {
        if (n = Eo, Eo = null, _m = 0, Xt & 6)
          throw Error(Oe(331));
        var r = Xt;
        for (Xt |= 4, tt = n.current; tt !== null; ) {
          var s = tt, o = s.child;
          if (tt.flags & 16) {
            var a = s.deletions;
            if (a !== null) {
              for (var c = 0; c < a.length; c++) {
                var f = a[c];
                for (tt = f; tt !== null; ) {
                  var h = tt;
                  switch (h.tag) {
                    case 0:
                    case 11:
                    case 15:
                      jc(8, h, s);
                  }
                  var d = h.child;
                  if (d !== null)
                    d.return = h, tt = d;
                  else
                    for (; tt !== null; ) {
                      h = tt;
                      var p = h.sibling, v = h.return;
                      if (yR(h), h === f) {
                        tt = null;
                        break;
                      }
                      if (p !== null) {
                        p.return = v, tt = p;
                        break;
                      }
                      tt = v;
                    }
                }
              }
              var y = s.alternate;
              if (y !== null) {
                var w = y.child;
                if (w !== null) {
                  y.child = null;
                  do {
                    var x = w.sibling;
                    w.sibling = null, w = x;
                  } while (w !== null);
                }
              }
              tt = s;
            }
          }
          if (s.subtreeFlags & 2064 && o !== null)
            o.return = s, tt = o;
          else
            e:
              for (; tt !== null; ) {
                if (s = tt, s.flags & 2048)
                  switch (s.tag) {
                    case 0:
                    case 11:
                    case 15:
                      jc(9, s, s.return);
                  }
                var g = s.sibling;
                if (g !== null) {
                  g.return = s.return, tt = g;
                  break e;
                }
                tt = s.return;
              }
        }
        var S = n.current;
        for (tt = S; tt !== null; ) {
          o = tt;
          var M = o.child;
          if (o.subtreeFlags & 2064 && M !== null)
            M.return = o, tt = M;
          else
            e:
              for (o = S; tt !== null; ) {
                if (a = tt, a.flags & 2048)
                  try {
                    switch (a.tag) {
                      case 0:
                      case 11:
                      case 15:
                        dg(9, a);
                    }
                  } catch (U) {
                    An(a, a.return, U);
                  }
                if (a === o) {
                  tt = null;
                  break e;
                }
                var T = a.sibling;
                if (T !== null) {
                  T.return = a.return, tt = T;
                  break e;
                }
                tt = a.return;
              }
        }
        if (Xt = r, Vo(), hs && typeof hs.onPostCommitFiberRoot == "function")
          try {
            hs.onPostCommitFiberRoot(sg, n);
          } catch {
          }
        i = !0;
      }
      return i;
    } finally {
      tn = t, Ar.transition = e;
    }
  }
  return !1;
}
function Pw(n, e, t) {
  e = wu(t, e), e = aR(n, e, 1), n = Io(n, e, 1), e = Ai(), n !== null && (Qf(n, 1, e), Xi(n, e));
}
function An(n, e, t) {
  if (n.tag === 3)
    Pw(n, n, t);
  else
    for (; e !== null; ) {
      if (e.tag === 3) {
        Pw(e, n, t);
        break;
      } else if (e.tag === 1) {
        var i = e.stateNode;
        if (typeof e.type.getDerivedStateFromError == "function" || typeof i.componentDidCatch == "function" && (Lo === null || !Lo.has(i))) {
          n = wu(t, n), n = lR(e, n, 1), e = Io(e, n, 1), n = Ai(), e !== null && (Qf(e, 1, n), Xi(e, n));
          break;
        }
      }
      e = e.return;
    }
}
function CL(n, e, t) {
  var i = n.pingCache;
  i !== null && i.delete(e), e = Ai(), n.pingedLanes |= n.suspendedLanes & t, ei === n && (ii & t) === t && (Gn === 4 || Gn === 3 && (ii & 130023424) === ii && 500 > In() - Bx ? Ua(n, 0) : zx |= t), Xi(n, e);
}
function RR(n, e) {
  e === 0 && (n.mode & 1 ? (e = _d, _d <<= 1, !(_d & 130023424) && (_d = 4194304)) : e = 1);
  var t = Ai();
  n = Ys(n, e), n !== null && (Qf(n, e, t), Xi(n, t));
}
function RL(n) {
  var e = n.memoizedState, t = 0;
  e !== null && (t = e.retryLane), RR(n, t);
}
function bL(n, e) {
  var t = 0;
  switch (n.tag) {
    case 13:
      var i = n.stateNode, r = n.memoizedState;
      r !== null && (t = r.retryLane);
      break;
    case 19:
      i = n.stateNode;
      break;
    default:
      throw Error(Oe(314));
  }
  i !== null && i.delete(e), RR(n, t);
}
var bR;
bR = function(n, e, t) {
  if (n !== null)
    if (n.memoizedProps !== e.pendingProps || Gi.current)
      Vi = !0;
    else {
      if (!(n.lanes & t) && !(e.flags & 128))
        return Vi = !1, gL(n, e, t);
      Vi = !!(n.flags & 131072);
    }
  else
    Vi = !1, mn && e.flags & 1048576 && LC(e, cm, e.index);
  switch (e.lanes = 0, e.tag) {
    case 2:
      var i = e.type;
      Gp(n, e), n = e.pendingProps;
      var r = _u(e, vi.current);
      pu(e, t), r = Dx(null, e, i, n, r, t);
      var s = Nx();
      return e.flags |= 1, typeof r == "object" && r !== null && typeof r.render == "function" && r.$$typeof === void 0 ? (e.tag = 1, e.memoizedState = null, e.updateQueue = null, Wi(i) ? (s = !0, lm(e)) : s = !1, e.memoizedState = r.state !== null && r.state !== void 0 ? r.state : null, Rx(e), r.updater = fg, e.stateNode = r, r._reactInternals = e, f_(e, i, n, t), e = p_(null, e, i, !0, s, t)) : (e.tag = 0, mn && s && Sx(e), wi(null, e, r, t), e = e.child), e;
    case 16:
      i = e.elementType;
      e: {
        switch (Gp(n, e), n = e.pendingProps, r = i._init, i = r(i._payload), e.type = i, r = e.tag = IL(i), n = zr(i, n), r) {
          case 0:
            e = d_(null, e, i, n, t);
            break e;
          case 1:
            e = xw(null, e, i, n, t);
            break e;
          case 11:
            e = yw(null, e, i, n, t);
            break e;
          case 14:
            e = _w(null, e, i, zr(i.type, n), t);
            break e;
        }
        throw Error(Oe(
          306,
          i,
          ""
        ));
      }
      return e;
    case 0:
      return i = e.type, r = e.pendingProps, r = e.elementType === i ? r : zr(i, r), d_(n, e, i, r, t);
    case 1:
      return i = e.type, r = e.pendingProps, r = e.elementType === i ? r : zr(i, r), xw(n, e, i, r, t);
    case 3:
      e: {
        if (hR(e), n === null)
          throw Error(Oe(387));
        i = e.pendingProps, s = e.memoizedState, r = s.element, OC(n, e), dm(e, i, null, t);
        var o = e.memoizedState;
        if (i = o.element, s.isDehydrated)
          if (s = { element: i, isDehydrated: !1, cache: o.cache, pendingSuspenseBoundaries: o.pendingSuspenseBoundaries, transitions: o.transitions }, e.updateQueue.baseState = s, e.memoizedState = s, e.flags & 256) {
            r = wu(Error(Oe(423)), e), e = Sw(n, e, i, t, r);
            break e;
          } else if (i !== r) {
            r = wu(Error(Oe(424)), e), e = Sw(n, e, i, t, r);
            break e;
          } else
            for (nr = Po(e.stateNode.containerInfo.firstChild), ir = e, mn = !0, Vr = null, t = BC(e, null, i, t), e.child = t; t; )
              t.flags = t.flags & -3 | 4096, t = t.sibling;
        else {
          if (xu(), i === r) {
            e = qs(n, e, t);
            break e;
          }
          wi(n, e, i, t);
        }
        e = e.child;
      }
      return e;
    case 5:
      return HC(e), n === null && l_(e), i = e.type, r = e.pendingProps, s = n !== null ? n.memoizedProps : null, o = r.children, i_(i, r) ? o = null : s !== null && i_(i, s) && (e.flags |= 32), fR(n, e), wi(n, e, o, t), e.child;
    case 6:
      return n === null && l_(e), null;
    case 13:
      return dR(n, e, t);
    case 4:
      return bx(e, e.stateNode.containerInfo), i = e.pendingProps, n === null ? e.child = Su(e, null, i, t) : wi(n, e, i, t), e.child;
    case 11:
      return i = e.type, r = e.pendingProps, r = e.elementType === i ? r : zr(i, r), yw(n, e, i, r, t);
    case 7:
      return wi(n, e, e.pendingProps, t), e.child;
    case 8:
      return wi(n, e, e.pendingProps.children, t), e.child;
    case 12:
      return wi(n, e, e.pendingProps.children, t), e.child;
    case 10:
      e: {
        if (i = e.type._context, r = e.pendingProps, s = e.memoizedProps, o = r.value, un(fm, i._currentValue), i._currentValue = o, s !== null)
          if (jr(s.value, o)) {
            if (s.children === r.children && !Gi.current) {
              e = qs(n, e, t);
              break e;
            }
          } else
            for (s = e.child, s !== null && (s.return = e); s !== null; ) {
              var a = s.dependencies;
              if (a !== null) {
                o = s.child;
                for (var c = a.firstContext; c !== null; ) {
                  if (c.context === i) {
                    if (s.tag === 1) {
                      c = Gs(-1, t & -t), c.tag = 2;
                      var f = s.updateQueue;
                      if (f !== null) {
                        f = f.shared;
                        var h = f.pending;
                        h === null ? c.next = c : (c.next = h.next, h.next = c), f.pending = c;
                      }
                    }
                    s.lanes |= t, c = s.alternate, c !== null && (c.lanes |= t), u_(
                      s.return,
                      t,
                      e
                    ), a.lanes |= t;
                    break;
                  }
                  c = c.next;
                }
              } else if (s.tag === 10)
                o = s.type === e.type ? null : s.child;
              else if (s.tag === 18) {
                if (o = s.return, o === null)
                  throw Error(Oe(341));
                o.lanes |= t, a = o.alternate, a !== null && (a.lanes |= t), u_(o, t, e), o = s.sibling;
              } else
                o = s.child;
              if (o !== null)
                o.return = s;
              else
                for (o = s; o !== null; ) {
                  if (o === e) {
                    o = null;
                    break;
                  }
                  if (s = o.sibling, s !== null) {
                    s.return = o.return, o = s;
                    break;
                  }
                  o = o.return;
                }
              s = o;
            }
        wi(n, e, r.children, t), e = e.child;
      }
      return e;
    case 9:
      return r = e.type, i = e.pendingProps.children, pu(e, t), r = Cr(r), i = i(r), e.flags |= 1, wi(n, e, i, t), e.child;
    case 14:
      return i = e.type, r = zr(i, e.pendingProps), r = zr(i.type, r), _w(n, e, i, r, t);
    case 15:
      return uR(n, e, e.type, e.pendingProps, t);
    case 17:
      return i = e.type, r = e.pendingProps, r = e.elementType === i ? r : zr(i, r), Gp(n, e), e.tag = 1, Wi(i) ? (n = !0, lm(e)) : n = !1, pu(e, t), kC(e, i, r), f_(e, i, r, t), p_(null, e, i, !0, n, t);
    case 19:
      return pR(n, e, t);
    case 22:
      return cR(n, e, t);
  }
  throw Error(Oe(156, e.tag));
};
function PR(n, e) {
  return nC(n, e);
}
function PL(n, e, t, i) {
  this.tag = n, this.key = t, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = e, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = i, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
}
function Tr(n, e, t, i) {
  return new PL(n, e, t, i);
}
function Wx(n) {
  return n = n.prototype, !(!n || !n.isReactComponent);
}
function IL(n) {
  if (typeof n == "function")
    return Wx(n) ? 1 : 0;
  if (n != null) {
    if (n = n.$$typeof, n === ux)
      return 11;
    if (n === cx)
      return 14;
  }
  return 2;
}
function No(n, e) {
  var t = n.alternate;
  return t === null ? (t = Tr(n.tag, e, n.key, n.mode), t.elementType = n.elementType, t.type = n.type, t.stateNode = n.stateNode, t.alternate = n, n.alternate = t) : (t.pendingProps = e, t.type = n.type, t.flags = 0, t.subtreeFlags = 0, t.deletions = null), t.flags = n.flags & 14680064, t.childLanes = n.childLanes, t.lanes = n.lanes, t.child = n.child, t.memoizedProps = n.memoizedProps, t.memoizedState = n.memoizedState, t.updateQueue = n.updateQueue, e = n.dependencies, t.dependencies = e === null ? null : { lanes: e.lanes, firstContext: e.firstContext }, t.sibling = n.sibling, t.index = n.index, t.ref = n.ref, t;
}
function Yp(n, e, t, i, r, s) {
  var o = 2;
  if (i = n, typeof n == "function")
    Wx(n) && (o = 1);
  else if (typeof n == "string")
    o = 5;
  else
    e:
      switch (n) {
        case ql:
          return Oa(t.children, r, s, e);
        case lx:
          o = 8, r |= 8;
          break;
        case Uy:
          return n = Tr(12, t, e, r | 2), n.elementType = Uy, n.lanes = s, n;
        case Oy:
          return n = Tr(13, t, e, r), n.elementType = Oy, n.lanes = s, n;
        case Fy:
          return n = Tr(19, t, e, r), n.elementType = Fy, n.lanes = s, n;
        case zA:
          return mg(t, r, s, e);
        default:
          if (typeof n == "object" && n !== null)
            switch (n.$$typeof) {
              case FA:
                o = 10;
                break e;
              case kA:
                o = 9;
                break e;
              case ux:
                o = 11;
                break e;
              case cx:
                o = 14;
                break e;
              case go:
                o = 16, i = null;
                break e;
            }
          throw Error(Oe(130, n == null ? n : typeof n, ""));
      }
  return e = Tr(o, t, e, r), e.elementType = n, e.type = i, e.lanes = s, e;
}
function Oa(n, e, t, i) {
  return n = Tr(7, n, i, e), n.lanes = t, n;
}
function mg(n, e, t, i) {
  return n = Tr(22, n, i, e), n.elementType = zA, n.lanes = t, n.stateNode = { isHidden: !1 }, n;
}
function Cv(n, e, t) {
  return n = Tr(6, n, null, e), n.lanes = t, n;
}
function Rv(n, e, t) {
  return e = Tr(4, n.children !== null ? n.children : [], n.key, e), e.lanes = t, e.stateNode = { containerInfo: n.containerInfo, pendingChildren: null, implementation: n.implementation }, e;
}
function LL(n, e, t, i, r) {
  this.tag = e, this.containerInfo = n, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = lv(0), this.expirationTimes = lv(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = lv(0), this.identifierPrefix = i, this.onRecoverableError = r, this.mutableSourceEagerHydrationData = null;
}
function Xx(n, e, t, i, r, s, o, a, c) {
  return n = new LL(n, e, t, a, c), e === 1 ? (e = 1, s === !0 && (e |= 8)) : e = 0, s = Tr(3, null, null, e), n.current = s, s.stateNode = n, s.memoizedState = { element: i, isDehydrated: t, cache: null, transitions: null, pendingSuspenseBoundaries: null }, Rx(s), n;
}
function DL(n, e, t) {
  var i = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
  return { $$typeof: Yl, key: i == null ? null : "" + i, children: n, containerInfo: e, implementation: t };
}
function IR(n) {
  if (!n)
    return Oo;
  n = n._reactInternals;
  e: {
    if ($a(n) !== n || n.tag !== 1)
      throw Error(Oe(170));
    var e = n;
    do {
      switch (e.tag) {
        case 3:
          e = e.stateNode.context;
          break e;
        case 1:
          if (Wi(e.type)) {
            e = e.stateNode.__reactInternalMemoizedMergedChildContext;
            break e;
          }
      }
      e = e.return;
    } while (e !== null);
    throw Error(Oe(171));
  }
  if (n.tag === 1) {
    var t = n.type;
    if (Wi(t))
      return PC(n, t, e);
  }
  return e;
}
function LR(n, e, t, i, r, s, o, a, c) {
  return n = Xx(t, i, !0, n, r, s, o, a, c), n.context = IR(null), t = n.current, i = Ai(), r = Do(t), s = Gs(i, r), s.callback = e ?? null, Io(t, s, r), n.current.lanes = r, Qf(n, r, i), Xi(n, i), n;
}
function gg(n, e, t, i) {
  var r = e.current, s = Ai(), o = Do(r);
  return t = IR(t), e.context === null ? e.context = t : e.pendingContext = t, e = Gs(s, o), e.payload = { element: n }, i = i === void 0 ? null : i, i !== null && (e.callback = i), n = Io(r, e, o), n !== null && (Yr(n, r, o, s), Bp(n, r, o)), o;
}
function Sm(n) {
  if (n = n.current, !n.child)
    return null;
  switch (n.child.tag) {
    case 5:
      return n.child.stateNode;
    default:
      return n.child.stateNode;
  }
}
function Iw(n, e) {
  if (n = n.memoizedState, n !== null && n.dehydrated !== null) {
    var t = n.retryLane;
    n.retryLane = t !== 0 && t < e ? t : e;
  }
}
function Yx(n, e) {
  Iw(n, e), (n = n.alternate) && Iw(n, e);
}
function NL() {
  return null;
}
var DR = typeof reportError == "function" ? reportError : function(n) {
  console.error(n);
};
function qx(n) {
  this._internalRoot = n;
}
vg.prototype.render = qx.prototype.render = function(n) {
  var e = this._internalRoot;
  if (e === null)
    throw Error(Oe(409));
  gg(n, e, null, null);
};
vg.prototype.unmount = qx.prototype.unmount = function() {
  var n = this._internalRoot;
  if (n !== null) {
    this._internalRoot = null;
    var e = n.containerInfo;
    Ya(function() {
      gg(null, n, null, null);
    }), e[Xs] = null;
  }
};
function vg(n) {
  this._internalRoot = n;
}
vg.prototype.unstable_scheduleHydration = function(n) {
  if (n) {
    var e = uC();
    n = { blockedOn: null, target: n, priority: e };
    for (var t = 0; t < _o.length && e !== 0 && e < _o[t].priority; t++)
      ;
    _o.splice(t, 0, n), t === 0 && fC(n);
  }
};
function jx(n) {
  return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11);
}
function yg(n) {
  return !(!n || n.nodeType !== 1 && n.nodeType !== 9 && n.nodeType !== 11 && (n.nodeType !== 8 || n.nodeValue !== " react-mount-point-unstable "));
}
function Lw() {
}
function UL(n, e, t, i, r) {
  if (r) {
    if (typeof i == "function") {
      var s = i;
      i = function() {
        var f = Sm(o);
        s.call(f);
      };
    }
    var o = LR(e, i, n, 0, null, !1, !1, "", Lw);
    return n._reactRootContainer = o, n[Xs] = o.current, _f(n.nodeType === 8 ? n.parentNode : n), Ya(), o;
  }
  for (; r = n.lastChild; )
    n.removeChild(r);
  if (typeof i == "function") {
    var a = i;
    i = function() {
      var f = Sm(c);
      a.call(f);
    };
  }
  var c = Xx(n, 0, !1, null, null, !1, !1, "", Lw);
  return n._reactRootContainer = c, n[Xs] = c.current, _f(n.nodeType === 8 ? n.parentNode : n), Ya(function() {
    gg(e, c, t, i);
  }), c;
}
function _g(n, e, t, i, r) {
  var s = t._reactRootContainer;
  if (s) {
    var o = s;
    if (typeof r == "function") {
      var a = r;
      r = function() {
        var c = Sm(o);
        a.call(c);
      };
    }
    gg(e, o, n, r);
  } else
    o = UL(t, e, n, r, i);
  return Sm(o);
}
aC = function(n) {
  switch (n.tag) {
    case 3:
      var e = n.stateNode;
      if (e.current.memoizedState.isDehydrated) {
        var t = kc(e.pendingLanes);
        t !== 0 && (dx(e, t | 1), Xi(e, In()), !(Xt & 6) && (Eu = In() + 500, Vo()));
      }
      break;
    case 13:
      Ya(function() {
        var i = Ys(n, 1);
        if (i !== null) {
          var r = Ai();
          Yr(i, n, 1, r);
        }
      }), Yx(n, 1);
  }
};
px = function(n) {
  if (n.tag === 13) {
    var e = Ys(n, 134217728);
    if (e !== null) {
      var t = Ai();
      Yr(e, n, 134217728, t);
    }
    Yx(n, 134217728);
  }
};
lC = function(n) {
  if (n.tag === 13) {
    var e = Do(n), t = Ys(n, e);
    if (t !== null) {
      var i = Ai();
      Yr(t, n, e, i);
    }
    Yx(n, e);
  }
};
uC = function() {
  return tn;
};
cC = function(n, e) {
  var t = tn;
  try {
    return tn = n, e();
  } finally {
    tn = t;
  }
};
qy = function(n, e, t) {
  switch (e) {
    case "input":
      if (By(n, t), e = t.name, t.type === "radio" && e != null) {
        for (t = n; t.parentNode; )
          t = t.parentNode;
        for (t = t.querySelectorAll("input[name=" + JSON.stringify("" + e) + '][type="radio"]'), e = 0; e < t.length; e++) {
          var i = t[e];
          if (i !== n && i.form === n.form) {
            var r = ug(i);
            if (!r)
              throw Error(Oe(90));
            HA(i), By(i, r);
          }
        }
      }
      break;
    case "textarea":
      GA(n, t);
      break;
    case "select":
      e = t.value, e != null && cu(n, !!t.multiple, e, !1);
  }
};
KA = Hx;
JA = Ya;
var OL = { usingClientEntryPoint: !1, Events: [eh, Jl, ug, jA, ZA, Hx] }, fc = { findFiberByHostInstance: Aa, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" }, FL = { bundleType: fc.bundleType, version: fc.version, rendererPackageName: fc.rendererPackageName, rendererConfig: fc.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: Zs.ReactCurrentDispatcher, findHostInstanceByFiber: function(n) {
  return n = eC(n), n === null ? null : n.stateNode;
}, findFiberByHostInstance: fc.findFiberByHostInstance || NL, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
  var Pd = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!Pd.isDisabled && Pd.supportsFiber)
    try {
      sg = Pd.inject(FL), hs = Pd;
    } catch {
    }
}
lr.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = OL;
lr.createPortal = function(n, e) {
  var t = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
  if (!jx(e))
    throw Error(Oe(200));
  return DL(n, e, null, t);
};
lr.createRoot = function(n, e) {
  if (!jx(n))
    throw Error(Oe(299));
  var t = !1, i = "", r = DR;
  return e != null && (e.unstable_strictMode === !0 && (t = !0), e.identifierPrefix !== void 0 && (i = e.identifierPrefix), e.onRecoverableError !== void 0 && (r = e.onRecoverableError)), e = Xx(n, 1, !1, null, null, t, !1, i, r), n[Xs] = e.current, _f(n.nodeType === 8 ? n.parentNode : n), new qx(e);
};
lr.findDOMNode = function(n) {
  if (n == null)
    return null;
  if (n.nodeType === 1)
    return n;
  var e = n._reactInternals;
  if (e === void 0)
    throw typeof n.render == "function" ? Error(Oe(188)) : (n = Object.keys(n).join(","), Error(Oe(268, n)));
  return n = eC(e), n = n === null ? null : n.stateNode, n;
};
lr.flushSync = function(n) {
  return Ya(n);
};
lr.hydrate = function(n, e, t) {
  if (!yg(e))
    throw Error(Oe(200));
  return _g(null, n, e, !0, t);
};
lr.hydrateRoot = function(n, e, t) {
  if (!jx(n))
    throw Error(Oe(405));
  var i = t != null && t.hydratedSources || null, r = !1, s = "", o = DR;
  if (t != null && (t.unstable_strictMode === !0 && (r = !0), t.identifierPrefix !== void 0 && (s = t.identifierPrefix), t.onRecoverableError !== void 0 && (o = t.onRecoverableError)), e = LR(e, null, n, 1, t ?? null, r, !1, s, o), n[Xs] = e.current, _f(n), i)
    for (n = 0; n < i.length; n++)
      t = i[n], r = t._getVersion, r = r(t._source), e.mutableSourceEagerHydrationData == null ? e.mutableSourceEagerHydrationData = [t, r] : e.mutableSourceEagerHydrationData.push(
        t,
        r
      );
  return new vg(e);
};
lr.render = function(n, e, t) {
  if (!yg(e))
    throw Error(Oe(200));
  return _g(null, n, e, !1, t);
};
lr.unmountComponentAtNode = function(n) {
  if (!yg(n))
    throw Error(Oe(40));
  return n._reactRootContainer ? (Ya(function() {
    _g(null, null, n, !1, function() {
      n._reactRootContainer = null, n[Xs] = null;
    });
  }), !0) : !1;
};
lr.unstable_batchedUpdates = Hx;
lr.unstable_renderSubtreeIntoContainer = function(n, e, t, i) {
  if (!yg(t))
    throw Error(Oe(200));
  if (n == null || n._reactInternals === void 0)
    throw Error(Oe(38));
  return _g(n, e, t, !1, i);
};
lr.version = "18.2.0-next-9e3b772b8-20220608";
(function(n) {
  function e() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e);
      } catch (t) {
        console.error(t);
      }
  }
  e(), n.exports = lr;
})(N3);
const kL = /* @__PURE__ */ Q_(Jp);
var Dw = Jp;
Ly.createRoot = Dw.createRoot, Ly.hydrateRoot = Dw.hydrateRoot;
function Mm() {
  return Mm = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var i in t)
        ({}).hasOwnProperty.call(t, i) && (n[i] = t[i]);
    }
    return n;
  }, Mm.apply(null, arguments);
}
/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const nh = "166", Sa = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, Ma = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, NR = 0, A_ = 1, UR = 2, zL = 3, OR = 0, xg = 1, Jc = 2, Br = 3, js = 0, Ci = 1, Wr = 2, ps = 0, Fa = 1, C_ = 2, R_ = 3, b_ = 4, FR = 5, So = 100, kR = 101, zR = 102, BR = 103, HR = 104, VR = 200, GR = 201, WR = 202, XR = 203, wm = 204, Em = 205, YR = 206, qR = 207, jR = 208, ZR = 209, KR = 210, JR = 211, QR = 212, $R = 213, e2 = 214, t2 = 0, n2 = 1, i2 = 2, Rf = 3, r2 = 4, s2 = 5, o2 = 6, a2 = 7, ih = 0, l2 = 1, u2 = 2, ms = 0, c2 = 1, f2 = 2, h2 = 3, Zx = 4, d2 = 5, p2 = 6, m2 = 7, P_ = "attached", g2 = "detached", Fo = 300, vs = 301, ko = 302, Tu = 303, bf = 304, Uu = 306, Pf = 1e3, Bn = 1001, If = 1002, Qn = 1003, Kx = 1004, BL = 1004, ru = 1005, HL = 1005, $t = 1006, Qc = 1007, VL = 1007, us = 1008, I_ = 1008, Yi = 1009, Sg = 1010, Mg = 1011, Au = 1012, rh = 1013, ys = 1014, xn = 1015, $n = 1016, wg = 1017, Eg = 1018, qa = 1020, Jx = 35902, Qx = 1021, $x = 1022, Ln = 1023, e1 = 1024, t1 = 1025, ka = 1026, ja = 1027, sh = 1028, oh = 1029, n1 = 1030, Tg = 1031, GL = 1032, Ag = 1033, $c = 33776, ef = 33777, tf = 33778, nf = 33779, Tm = 35840, Am = 35841, Cm = 35842, Rm = 35843, bm = 36196, Pm = 37492, Im = 37496, Lm = 37808, Dm = 37809, Nm = 37810, Um = 37811, Om = 37812, Fm = 37813, km = 37814, zm = 37815, Bm = 37816, Hm = 37817, Vm = 37818, Gm = 37819, Wm = 37820, Xm = 37821, rf = 36492, Ym = 36494, qm = 36495, i1 = 36283, jm = 36284, Zm = 36285, Km = 36286, v2 = 2200, y2 = 2201, _2 = 2202, Lf = 2300, Jm = 2301, qp = 2302, ba = 2400, Pa = 2401, Df = 2402, Cg = 2500, r1 = 2501, WL = 0, XL = 1, YL = 2, x2 = 3200, S2 = 3201, Go = 0, M2 = 1, ks = "", Bi = "srgb", br = "srgb-linear", Rg = "display-p3", ah = "display-p3-linear", Nf = "linear", an = "srgb", Uf = "rec709", Of = "p3", qL = 0, wa = 7680, jL = 7681, ZL = 7682, KL = 7683, JL = 34055, QL = 34056, $L = 5386, eD = 512, tD = 513, nD = 514, iD = 515, rD = 516, sD = 517, oD = 518, L_ = 519, w2 = 512, E2 = 513, T2 = 514, s1 = 515, A2 = 516, C2 = 517, R2 = 518, b2 = 519, Ff = 35044, aD = 35048, lD = 35040, uD = 35045, cD = 35049, fD = 35041, hD = 35046, dD = 35050, pD = 35042, mD = "100", D_ = "300 es", cs = 2e3, kf = 2001;
class _s {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const i = this._listeners;
    i[e] === void 0 && (i[e] = []), i[e].indexOf(t) === -1 && i[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const i = this._listeners;
    return i[e] !== void 0 && i[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const r = this._listeners[e];
    if (r !== void 0) {
      const s = r.indexOf(t);
      s !== -1 && r.splice(s, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const i = this._listeners[e.type];
    if (i !== void 0) {
      e.target = this;
      const r = i.slice(0);
      for (let s = 0, o = r.length; s < o; s++)
        r[s].call(this, e);
      e.target = null;
    }
  }
}
const hi = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let Nw = 1234567;
const za = Math.PI / 180, Cu = 180 / Math.PI;
function rr() {
  const n = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, i = Math.random() * 4294967295 | 0;
  return (hi[n & 255] + hi[n >> 8 & 255] + hi[n >> 16 & 255] + hi[n >> 24 & 255] + "-" + hi[e & 255] + hi[e >> 8 & 255] + "-" + hi[e >> 16 & 15 | 64] + hi[e >> 24 & 255] + "-" + hi[t & 63 | 128] + hi[t >> 8 & 255] + "-" + hi[t >> 16 & 255] + hi[t >> 24 & 255] + hi[i & 255] + hi[i >> 8 & 255] + hi[i >> 16 & 255] + hi[i >> 24 & 255]).toLowerCase();
}
function Cn(n, e, t) {
  return Math.max(e, Math.min(t, n));
}
function o1(n, e) {
  return (n % e + e) % e;
}
function gD(n, e, t, i, r) {
  return i + (n - e) * (r - i) / (t - e);
}
function vD(n, e, t) {
  return n !== e ? (t - n) / (e - n) : 0;
}
function sf(n, e, t) {
  return (1 - t) * n + t * e;
}
function yD(n, e, t, i) {
  return sf(n, e, 1 - Math.exp(-t * i));
}
function _D(n, e = 1) {
  return e - Math.abs(o1(n, e * 2) - e);
}
function xD(n, e, t) {
  return n <= e ? 0 : n >= t ? 1 : (n = (n - e) / (t - e), n * n * (3 - 2 * n));
}
function SD(n, e, t) {
  return n <= e ? 0 : n >= t ? 1 : (n = (n - e) / (t - e), n * n * n * (n * (n * 6 - 15) + 10));
}
function MD(n, e) {
  return n + Math.floor(Math.random() * (e - n + 1));
}
function wD(n, e) {
  return n + Math.random() * (e - n);
}
function ED(n) {
  return n * (0.5 - Math.random());
}
function TD(n) {
  n !== void 0 && (Nw = n);
  let e = Nw += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function AD(n) {
  return n * za;
}
function CD(n) {
  return n * Cu;
}
function RD(n) {
  return (n & n - 1) === 0 && n !== 0;
}
function bD(n) {
  return Math.pow(2, Math.ceil(Math.log(n) / Math.LN2));
}
function PD(n) {
  return Math.pow(2, Math.floor(Math.log(n) / Math.LN2));
}
function ID(n, e, t, i, r) {
  const s = Math.cos, o = Math.sin, a = s(t / 2), c = o(t / 2), f = s((e + i) / 2), h = o((e + i) / 2), d = s((e - i) / 2), p = o((e - i) / 2), v = s((i - e) / 2), y = o((i - e) / 2);
  switch (r) {
    case "XYX":
      n.set(a * h, c * d, c * p, a * f);
      break;
    case "YZY":
      n.set(c * p, a * h, c * d, a * f);
      break;
    case "ZXZ":
      n.set(c * d, c * p, a * h, a * f);
      break;
    case "XZX":
      n.set(a * h, c * y, c * v, a * f);
      break;
    case "YXY":
      n.set(c * v, a * h, c * y, a * f);
      break;
    case "ZYZ":
      n.set(c * y, c * v, a * h, a * f);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + r);
  }
}
function Ei(n, e) {
  switch (e.constructor) {
    case Float32Array:
      return n;
    case Uint32Array:
      return n / 4294967295;
    case Uint16Array:
      return n / 65535;
    case Uint8Array:
      return n / 255;
    case Int32Array:
      return Math.max(n / 2147483647, -1);
    case Int16Array:
      return Math.max(n / 32767, -1);
    case Int8Array:
      return Math.max(n / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function Pt(n, e) {
  switch (e.constructor) {
    case Float32Array:
      return n;
    case Uint32Array:
      return Math.round(n * 4294967295);
    case Uint16Array:
      return Math.round(n * 65535);
    case Uint8Array:
      return Math.round(n * 255);
    case Int32Array:
      return Math.round(n * 2147483647);
    case Int16Array:
      return Math.round(n * 32767);
    case Int8Array:
      return Math.round(n * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const a1 = {
  DEG2RAD: za,
  RAD2DEG: Cu,
  generateUUID: rr,
  clamp: Cn,
  euclideanModulo: o1,
  mapLinear: gD,
  inverseLerp: vD,
  lerp: sf,
  damp: yD,
  pingpong: _D,
  smoothstep: xD,
  smootherstep: SD,
  randInt: MD,
  randFloat: wD,
  randFloatSpread: ED,
  seededRandom: TD,
  degToRad: AD,
  radToDeg: CD,
  isPowerOfTwo: RD,
  ceilPowerOfTwo: bD,
  floorPowerOfTwo: PD,
  setQuaternionFromProperEuler: ID,
  normalize: Pt,
  denormalize: Ei
};
class _e {
  constructor(e = 0, t = 0) {
    _e.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, i = this.y, r = e.elements;
    return this.x = r[0] * t + r[3] * i + r[6], this.y = r[1] * t + r[4] * i + r[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const i = this.dot(e) / t;
    return Math.acos(Cn(i, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, i = this.y - e.y;
    return t * t + i * i;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, i) {
    return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const i = Math.cos(t), r = Math.sin(t), s = this.x - e.x, o = this.y - e.y;
    return this.x = s * i - o * r + e.x, this.y = s * r + o * i + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class bt {
  constructor(e, t, i, r, s, o, a, c, f) {
    bt.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, i, r, s, o, a, c, f);
  }
  set(e, t, i, r, s, o, a, c, f) {
    const h = this.elements;
    return h[0] = e, h[1] = r, h[2] = a, h[3] = t, h[4] = s, h[5] = c, h[6] = i, h[7] = o, h[8] = f, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, i = e.elements;
    return t[0] = i[0], t[1] = i[1], t[2] = i[2], t[3] = i[3], t[4] = i[4], t[5] = i[5], t[6] = i[6], t[7] = i[7], t[8] = i[8], this;
  }
  extractBasis(e, t, i) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), i.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const i = e.elements, r = t.elements, s = this.elements, o = i[0], a = i[3], c = i[6], f = i[1], h = i[4], d = i[7], p = i[2], v = i[5], y = i[8], w = r[0], x = r[3], g = r[6], S = r[1], M = r[4], T = r[7], U = r[2], P = r[5], D = r[8];
    return s[0] = o * w + a * S + c * U, s[3] = o * x + a * M + c * P, s[6] = o * g + a * T + c * D, s[1] = f * w + h * S + d * U, s[4] = f * x + h * M + d * P, s[7] = f * g + h * T + d * D, s[2] = p * w + v * S + y * U, s[5] = p * x + v * M + y * P, s[8] = p * g + v * T + y * D, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], i = e[1], r = e[2], s = e[3], o = e[4], a = e[5], c = e[6], f = e[7], h = e[8];
    return t * o * h - t * a * f - i * s * h + i * a * c + r * s * f - r * o * c;
  }
  invert() {
    const e = this.elements, t = e[0], i = e[1], r = e[2], s = e[3], o = e[4], a = e[5], c = e[6], f = e[7], h = e[8], d = h * o - a * f, p = a * c - h * s, v = f * s - o * c, y = t * d + i * p + r * v;
    if (y === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const w = 1 / y;
    return e[0] = d * w, e[1] = (r * f - h * i) * w, e[2] = (a * i - r * o) * w, e[3] = p * w, e[4] = (h * t - r * c) * w, e[5] = (r * s - a * t) * w, e[6] = v * w, e[7] = (i * c - f * t) * w, e[8] = (o * t - i * s) * w, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, i, r, s, o, a) {
    const c = Math.cos(s), f = Math.sin(s);
    return this.set(
      i * c,
      i * f,
      -i * (c * o + f * a) + o + e,
      -r * f,
      r * c,
      -r * (-f * o + c * a) + a + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(bv.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(bv.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(bv.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      t,
      -i,
      0,
      i,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, i = e.elements;
    for (let r = 0; r < 9; r++)
      if (t[r] !== i[r])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let i = 0; i < 9; i++)
      this.elements[i] = e[i + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const i = this.elements;
    return e[t] = i[0], e[t + 1] = i[1], e[t + 2] = i[2], e[t + 3] = i[3], e[t + 4] = i[4], e[t + 5] = i[5], e[t + 6] = i[6], e[t + 7] = i[7], e[t + 8] = i[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const bv = /* @__PURE__ */ new bt();
function P2(n) {
  for (let e = n.length - 1; e >= 0; --e)
    if (n[e] >= 65535)
      return !0;
  return !1;
}
const LD = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function su(n, e) {
  return new LD[n](e);
}
function zf(n) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", n);
}
function I2() {
  const n = zf("canvas");
  return n.style.display = "block", n;
}
const Uw = {};
function l1(n) {
  n in Uw || (Uw[n] = !0, console.warn(n));
}
function DD(n, e, t) {
  return new Promise(function(i, r) {
    function s() {
      switch (n.clientWaitSync(e, n.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case n.WAIT_FAILED:
          r();
          break;
        case n.TIMEOUT_EXPIRED:
          setTimeout(s, t);
          break;
        default:
          i();
      }
    }
    setTimeout(s, t);
  });
}
const Ow = /* @__PURE__ */ new bt().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
), Fw = /* @__PURE__ */ new bt().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
), Id = {
  [br]: {
    transfer: Nf,
    primaries: Uf,
    toReference: (n) => n,
    fromReference: (n) => n
  },
  [Bi]: {
    transfer: an,
    primaries: Uf,
    toReference: (n) => n.convertSRGBToLinear(),
    fromReference: (n) => n.convertLinearToSRGB()
  },
  [ah]: {
    transfer: Nf,
    primaries: Of,
    toReference: (n) => n.applyMatrix3(Fw),
    fromReference: (n) => n.applyMatrix3(Ow)
  },
  [Rg]: {
    transfer: an,
    primaries: Of,
    toReference: (n) => n.convertSRGBToLinear().applyMatrix3(Fw),
    fromReference: (n) => n.applyMatrix3(Ow).convertLinearToSRGB()
  }
}, ND = /* @__PURE__ */ new Set([br, ah]), Jt = {
  enabled: !0,
  _workingColorSpace: br,
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(n) {
    if (!ND.has(n))
      throw new Error(`Unsupported working color space, "${n}".`);
    this._workingColorSpace = n;
  },
  convert: function(n, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return n;
    const i = Id[e].toReference, r = Id[t].fromReference;
    return r(i(n));
  },
  fromWorkingColorSpace: function(n, e) {
    return this.convert(n, this._workingColorSpace, e);
  },
  toWorkingColorSpace: function(n, e) {
    return this.convert(n, e, this._workingColorSpace);
  },
  getPrimaries: function(n) {
    return Id[n].primaries;
  },
  getTransfer: function(n) {
    return n === ks ? Nf : Id[n].transfer;
  }
};
function gu(n) {
  return n < 0.04045 ? n * 0.0773993808 : Math.pow(n * 0.9478672986 + 0.0521327014, 2.4);
}
function Pv(n) {
  return n < 31308e-7 ? n * 12.92 : 1.055 * Math.pow(n, 0.41666) - 0.055;
}
let _l;
class L2 {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      _l === void 0 && (_l = zf("canvas")), _l.width = e.width, _l.height = e.height;
      const i = _l.getContext("2d");
      e instanceof ImageData ? i.putImageData(e, 0, 0) : i.drawImage(e, 0, 0, e.width, e.height), t = _l;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = zf("canvas");
      t.width = e.width, t.height = e.height;
      const i = t.getContext("2d");
      i.drawImage(e, 0, 0, e.width, e.height);
      const r = i.getImageData(0, 0, e.width, e.height), s = r.data;
      for (let o = 0; o < s.length; o++)
        s[o] = gu(s[o] / 255) * 255;
      return i.putImageData(r, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let i = 0; i < t.length; i++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[i] = Math.floor(gu(t[i] / 255) * 255) : t[i] = gu(t[i]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let UD = 0;
class Ia {
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: UD++ }), this.uuid = rr(), this.data = e, this.dataReady = !0, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const i = {
      uuid: this.uuid,
      url: ""
    }, r = this.data;
    if (r !== null) {
      let s;
      if (Array.isArray(r)) {
        s = [];
        for (let o = 0, a = r.length; o < a; o++)
          r[o].isDataTexture ? s.push(Iv(r[o].image)) : s.push(Iv(r[o]));
      } else
        s = Iv(r);
      i.url = s;
    }
    return t || (e.images[this.uuid] = i), i;
  }
}
function Iv(n) {
  return typeof HTMLImageElement < "u" && n instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && n instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && n instanceof ImageBitmap ? L2.getDataURL(n) : n.data ? {
    data: Array.from(n.data),
    width: n.width,
    height: n.height,
    type: n.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let OD = 0;
class Kt extends _s {
  constructor(e = Kt.DEFAULT_IMAGE, t = Kt.DEFAULT_MAPPING, i = Bn, r = Bn, s = $t, o = us, a = Ln, c = Yi, f = Kt.DEFAULT_ANISOTROPY, h = ks) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: OD++ }), this.uuid = rr(), this.name = "", this.source = new Ia(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = i, this.wrapT = r, this.magFilter = s, this.minFilter = o, this.anisotropy = f, this.format = a, this.internalFormat = null, this.type = c, this.offset = new _e(0, 0), this.repeat = new _e(1, 1), this.center = new _e(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new bt(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = h, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.pmremVersion = 0;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const i = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (i.userData = this.userData), t || (e.textures[this.uuid] = i), i;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== Fo)
      return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case Pf:
          e.x = e.x - Math.floor(e.x);
          break;
        case Bn:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case If:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case Pf:
          e.y = e.y - Math.floor(e.y);
          break;
        case Bn:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case If:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  set needsPMREMUpdate(e) {
    e === !0 && this.pmremVersion++;
  }
}
Kt.DEFAULT_IMAGE = null;
Kt.DEFAULT_MAPPING = Fo;
Kt.DEFAULT_ANISOTROPY = 1;
class Vt {
  constructor(e = 0, t = 0, i = 0, r = 1) {
    Vt.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = i, this.w = r;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, i, r) {
    return this.x = e, this.y = t, this.z = i, this.w = r, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, i = this.y, r = this.z, s = this.w, o = e.elements;
    return this.x = o[0] * t + o[4] * i + o[8] * r + o[12] * s, this.y = o[1] * t + o[5] * i + o[9] * r + o[13] * s, this.z = o[2] * t + o[6] * i + o[10] * r + o[14] * s, this.w = o[3] * t + o[7] * i + o[11] * r + o[15] * s, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, i, r, s;
    const c = e.elements, f = c[0], h = c[4], d = c[8], p = c[1], v = c[5], y = c[9], w = c[2], x = c[6], g = c[10];
    if (Math.abs(h - p) < 0.01 && Math.abs(d - w) < 0.01 && Math.abs(y - x) < 0.01) {
      if (Math.abs(h + p) < 0.1 && Math.abs(d + w) < 0.1 && Math.abs(y + x) < 0.1 && Math.abs(f + v + g - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const M = (f + 1) / 2, T = (v + 1) / 2, U = (g + 1) / 2, P = (h + p) / 4, D = (d + w) / 4, R = (y + x) / 4;
      return M > T && M > U ? M < 0.01 ? (i = 0, r = 0.707106781, s = 0.707106781) : (i = Math.sqrt(M), r = P / i, s = D / i) : T > U ? T < 0.01 ? (i = 0.707106781, r = 0, s = 0.707106781) : (r = Math.sqrt(T), i = P / r, s = R / r) : U < 0.01 ? (i = 0.707106781, r = 0.707106781, s = 0) : (s = Math.sqrt(U), i = D / s, r = R / s), this.set(i, r, s, t), this;
    }
    let S = Math.sqrt((x - y) * (x - y) + (d - w) * (d - w) + (p - h) * (p - h));
    return Math.abs(S) < 1e-3 && (S = 1), this.x = (x - y) / S, this.y = (d - w) / S, this.z = (p - h) / S, this.w = Math.acos((f + v + g - 1) / 2), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this.w = t[15], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, i) {
    return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this.z = e.z + (t.z - e.z) * i, this.w = e.w + (t.w - e.w) * i, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class D2 extends _s {
  constructor(e = 1, t = 1, i = {}) {
    super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new Vt(0, 0, e, t), this.scissorTest = !1, this.viewport = new Vt(0, 0, e, t);
    const r = { width: e, height: t, depth: 1 };
    i = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: $t,
      depthBuffer: !0,
      stencilBuffer: !1,
      resolveDepthBuffer: !0,
      resolveStencilBuffer: !0,
      depthTexture: null,
      samples: 0,
      count: 1
    }, i);
    const s = new Kt(r, i.mapping, i.wrapS, i.wrapT, i.magFilter, i.minFilter, i.format, i.type, i.anisotropy, i.colorSpace);
    s.flipY = !1, s.generateMipmaps = i.generateMipmaps, s.internalFormat = i.internalFormat, this.textures = [];
    const o = i.count;
    for (let a = 0; a < o; a++)
      this.textures[a] = s.clone(), this.textures[a].isRenderTargetTexture = !0;
    this.depthBuffer = i.depthBuffer, this.stencilBuffer = i.stencilBuffer, this.resolveDepthBuffer = i.resolveDepthBuffer, this.resolveStencilBuffer = i.resolveStencilBuffer, this.depthTexture = i.depthTexture, this.samples = i.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(e) {
    this.textures[0] = e;
  }
  setSize(e, t, i = 1) {
    if (this.width !== e || this.height !== t || this.depth !== i) {
      this.width = e, this.height = t, this.depth = i;
      for (let r = 0, s = this.textures.length; r < s; r++)
        this.textures[r].image.width = e, this.textures[r].image.height = t, this.textures[r].image.depth = i;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.textures.length = 0;
    for (let i = 0, r = e.textures.length; i < r; i++)
      this.textures[i] = e.textures[i].clone(), this.textures[i].isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new Ia(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.resolveDepthBuffer = e.resolveDepthBuffer, this.resolveStencilBuffer = e.resolveStencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class ar extends D2 {
  constructor(e = 1, t = 1, i = {}) {
    super(e, t, i), this.isWebGLRenderTarget = !0;
  }
}
class bg extends Kt {
  constructor(e = null, t = 1, i = 1, r = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: i, depth: r }, this.magFilter = Qn, this.minFilter = Qn, this.wrapR = Bn, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class FD extends ar {
  constructor(e = 1, t = 1, i = 1, r = {}) {
    super(e, t, r), this.isWebGLArrayRenderTarget = !0, this.depth = i, this.texture = new bg(null, e, t, i), this.texture.isRenderTargetTexture = !0;
  }
}
class u1 extends Kt {
  constructor(e = null, t = 1, i = 1, r = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: i, depth: r }, this.magFilter = Qn, this.minFilter = Qn, this.wrapR = Bn, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class kD extends ar {
  constructor(e = 1, t = 1, i = 1, r = {}) {
    super(e, t, r), this.isWebGL3DRenderTarget = !0, this.depth = i, this.texture = new u1(null, e, t, i), this.texture.isRenderTargetTexture = !0;
  }
}
class Dn {
  constructor(e = 0, t = 0, i = 0, r = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = i, this._w = r;
  }
  static slerpFlat(e, t, i, r, s, o, a) {
    let c = i[r + 0], f = i[r + 1], h = i[r + 2], d = i[r + 3];
    const p = s[o + 0], v = s[o + 1], y = s[o + 2], w = s[o + 3];
    if (a === 0) {
      e[t + 0] = c, e[t + 1] = f, e[t + 2] = h, e[t + 3] = d;
      return;
    }
    if (a === 1) {
      e[t + 0] = p, e[t + 1] = v, e[t + 2] = y, e[t + 3] = w;
      return;
    }
    if (d !== w || c !== p || f !== v || h !== y) {
      let x = 1 - a;
      const g = c * p + f * v + h * y + d * w, S = g >= 0 ? 1 : -1, M = 1 - g * g;
      if (M > Number.EPSILON) {
        const U = Math.sqrt(M), P = Math.atan2(U, g * S);
        x = Math.sin(x * P) / U, a = Math.sin(a * P) / U;
      }
      const T = a * S;
      if (c = c * x + p * T, f = f * x + v * T, h = h * x + y * T, d = d * x + w * T, x === 1 - a) {
        const U = 1 / Math.sqrt(c * c + f * f + h * h + d * d);
        c *= U, f *= U, h *= U, d *= U;
      }
    }
    e[t] = c, e[t + 1] = f, e[t + 2] = h, e[t + 3] = d;
  }
  static multiplyQuaternionsFlat(e, t, i, r, s, o) {
    const a = i[r], c = i[r + 1], f = i[r + 2], h = i[r + 3], d = s[o], p = s[o + 1], v = s[o + 2], y = s[o + 3];
    return e[t] = a * y + h * d + c * v - f * p, e[t + 1] = c * y + h * p + f * d - a * v, e[t + 2] = f * y + h * v + a * p - c * d, e[t + 3] = h * y - a * d - c * p - f * v, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, i, r) {
    return this._x = e, this._y = t, this._z = i, this._w = r, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t = !0) {
    const i = e._x, r = e._y, s = e._z, o = e._order, a = Math.cos, c = Math.sin, f = a(i / 2), h = a(r / 2), d = a(s / 2), p = c(i / 2), v = c(r / 2), y = c(s / 2);
    switch (o) {
      case "XYZ":
        this._x = p * h * d + f * v * y, this._y = f * v * d - p * h * y, this._z = f * h * y + p * v * d, this._w = f * h * d - p * v * y;
        break;
      case "YXZ":
        this._x = p * h * d + f * v * y, this._y = f * v * d - p * h * y, this._z = f * h * y - p * v * d, this._w = f * h * d + p * v * y;
        break;
      case "ZXY":
        this._x = p * h * d - f * v * y, this._y = f * v * d + p * h * y, this._z = f * h * y + p * v * d, this._w = f * h * d - p * v * y;
        break;
      case "ZYX":
        this._x = p * h * d - f * v * y, this._y = f * v * d + p * h * y, this._z = f * h * y - p * v * d, this._w = f * h * d + p * v * y;
        break;
      case "YZX":
        this._x = p * h * d + f * v * y, this._y = f * v * d + p * h * y, this._z = f * h * y - p * v * d, this._w = f * h * d - p * v * y;
        break;
      case "XZY":
        this._x = p * h * d - f * v * y, this._y = f * v * d - p * h * y, this._z = f * h * y + p * v * d, this._w = f * h * d + p * v * y;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + o);
    }
    return t === !0 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const i = t / 2, r = Math.sin(i);
    return this._x = e.x * r, this._y = e.y * r, this._z = e.z * r, this._w = Math.cos(i), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, i = t[0], r = t[4], s = t[8], o = t[1], a = t[5], c = t[9], f = t[2], h = t[6], d = t[10], p = i + a + d;
    if (p > 0) {
      const v = 0.5 / Math.sqrt(p + 1);
      this._w = 0.25 / v, this._x = (h - c) * v, this._y = (s - f) * v, this._z = (o - r) * v;
    } else if (i > a && i > d) {
      const v = 2 * Math.sqrt(1 + i - a - d);
      this._w = (h - c) / v, this._x = 0.25 * v, this._y = (r + o) / v, this._z = (s + f) / v;
    } else if (a > d) {
      const v = 2 * Math.sqrt(1 + a - i - d);
      this._w = (s - f) / v, this._x = (r + o) / v, this._y = 0.25 * v, this._z = (c + h) / v;
    } else {
      const v = 2 * Math.sqrt(1 + d - i - a);
      this._w = (o - r) / v, this._x = (s + f) / v, this._y = (c + h) / v, this._z = 0.25 * v;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let i = e.dot(t) + 1;
    return i < Number.EPSILON ? (i = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = i) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = i)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = i), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(Cn(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const i = this.angleTo(e);
    if (i === 0)
      return this;
    const r = Math.min(1, t / i);
    return this.slerp(e, r), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const i = e._x, r = e._y, s = e._z, o = e._w, a = t._x, c = t._y, f = t._z, h = t._w;
    return this._x = i * h + o * a + r * f - s * c, this._y = r * h + o * c + s * a - i * f, this._z = s * h + o * f + i * c - r * a, this._w = o * h - i * a - r * c - s * f, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const i = this._x, r = this._y, s = this._z, o = this._w;
    let a = o * e._w + i * e._x + r * e._y + s * e._z;
    if (a < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, a = -a) : this.copy(e), a >= 1)
      return this._w = o, this._x = i, this._y = r, this._z = s, this;
    const c = 1 - a * a;
    if (c <= Number.EPSILON) {
      const v = 1 - t;
      return this._w = v * o + t * this._w, this._x = v * i + t * this._x, this._y = v * r + t * this._y, this._z = v * s + t * this._z, this.normalize(), this;
    }
    const f = Math.sqrt(c), h = Math.atan2(f, a), d = Math.sin((1 - t) * h) / f, p = Math.sin(t * h) / f;
    return this._w = o * d + this._w * p, this._x = i * d + this._x * p, this._y = r * d + this._y * p, this._z = s * d + this._z * p, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, i) {
    return this.copy(e).slerp(t, i);
  }
  random() {
    const e = 2 * Math.PI * Math.random(), t = 2 * Math.PI * Math.random(), i = Math.random(), r = Math.sqrt(1 - i), s = Math.sqrt(i);
    return this.set(
      r * Math.sin(e),
      r * Math.cos(e),
      s * Math.sin(t),
      s * Math.cos(t)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this._onChangeCallback(), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class B {
  constructor(e = 0, t = 0, i = 0) {
    B.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = i;
  }
  set(e, t, i) {
    return i === void 0 && (i = this.z), this.x = e, this.y = t, this.z = i, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(kw.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(kw.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, i = this.y, r = this.z, s = e.elements;
    return this.x = s[0] * t + s[3] * i + s[6] * r, this.y = s[1] * t + s[4] * i + s[7] * r, this.z = s[2] * t + s[5] * i + s[8] * r, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, i = this.y, r = this.z, s = e.elements, o = 1 / (s[3] * t + s[7] * i + s[11] * r + s[15]);
    return this.x = (s[0] * t + s[4] * i + s[8] * r + s[12]) * o, this.y = (s[1] * t + s[5] * i + s[9] * r + s[13]) * o, this.z = (s[2] * t + s[6] * i + s[10] * r + s[14]) * o, this;
  }
  applyQuaternion(e) {
    const t = this.x, i = this.y, r = this.z, s = e.x, o = e.y, a = e.z, c = e.w, f = 2 * (o * r - a * i), h = 2 * (a * t - s * r), d = 2 * (s * i - o * t);
    return this.x = t + c * f + o * d - a * h, this.y = i + c * h + a * f - s * d, this.z = r + c * d + s * h - o * f, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, i = this.y, r = this.z, s = e.elements;
    return this.x = s[0] * t + s[4] * i + s[8] * r, this.y = s[1] * t + s[5] * i + s[9] * r, this.z = s[2] * t + s[6] * i + s[10] * r, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, i) {
    return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this.z = e.z + (t.z - e.z) * i, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const i = e.x, r = e.y, s = e.z, o = t.x, a = t.y, c = t.z;
    return this.x = r * c - s * a, this.y = s * o - i * c, this.z = i * a - r * o, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const i = e.dot(this) / t;
    return this.copy(e).multiplyScalar(i);
  }
  projectOnPlane(e) {
    return Lv.copy(this).projectOnVector(e), this.sub(Lv);
  }
  reflect(e) {
    return this.sub(Lv.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const i = this.dot(e) / t;
    return Math.acos(Cn(i, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, i = this.y - e.y, r = this.z - e.z;
    return t * t + i * i + r * r;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, i) {
    const r = Math.sin(t) * e;
    return this.x = r * Math.sin(i), this.y = Math.cos(t) * e, this.z = r * Math.cos(i), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, i) {
    return this.x = e * Math.sin(t), this.y = i, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), i = this.setFromMatrixColumn(e, 1).length(), r = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = i, this.z = r, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = Math.random() * Math.PI * 2, t = Math.random() * 2 - 1, i = Math.sqrt(1 - t * t);
    return this.x = i * Math.cos(e), this.y = t, this.z = i * Math.sin(e), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const Lv = /* @__PURE__ */ new B(), kw = /* @__PURE__ */ new Dn();
class Ri {
  constructor(e = new B(1 / 0, 1 / 0, 1 / 0), t = new B(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, i = e.length; t < i; t += 3)
      this.expandByPoint(Nr.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, i = e.count; t < i; t++)
      this.expandByPoint(Nr.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, i = e.length; t < i; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const i = Nr.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    e.updateWorldMatrix(!1, !1);
    const i = e.geometry;
    if (i !== void 0) {
      const s = i.getAttribute("position");
      if (t === !0 && s !== void 0 && e.isInstancedMesh !== !0)
        for (let o = 0, a = s.count; o < a; o++)
          e.isMesh === !0 ? e.getVertexPosition(o, Nr) : Nr.fromBufferAttribute(s, o), Nr.applyMatrix4(e.matrixWorld), this.expandByPoint(Nr);
      else
        e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), Ld.copy(e.boundingBox)) : (i.boundingBox === null && i.computeBoundingBox(), Ld.copy(i.boundingBox)), Ld.applyMatrix4(e.matrixWorld), this.union(Ld);
    }
    const r = e.children;
    for (let s = 0, o = r.length; s < o; s++)
      this.expandByObject(r[s], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, Nr), Nr.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, i;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, i = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, i = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, i += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, i += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, i += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, i += e.normal.z * this.min.z), t <= -e.constant && i >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(hc), Dd.subVectors(this.max, hc), xl.subVectors(e.a, hc), Sl.subVectors(e.b, hc), Ml.subVectors(e.c, hc), oo.subVectors(Sl, xl), ao.subVectors(Ml, Sl), sa.subVectors(xl, Ml);
    let t = [
      0,
      -oo.z,
      oo.y,
      0,
      -ao.z,
      ao.y,
      0,
      -sa.z,
      sa.y,
      oo.z,
      0,
      -oo.x,
      ao.z,
      0,
      -ao.x,
      sa.z,
      0,
      -sa.x,
      -oo.y,
      oo.x,
      0,
      -ao.y,
      ao.x,
      0,
      -sa.y,
      sa.x,
      0
    ];
    return !Dv(t, xl, Sl, Ml, Dd) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !Dv(t, xl, Sl, Ml, Dd)) ? !1 : (Nd.crossVectors(oo, ao), t = [Nd.x, Nd.y, Nd.z], Dv(t, xl, Sl, Ml, Dd));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, Nr).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(Nr).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (Cs[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), Cs[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), Cs[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), Cs[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), Cs[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), Cs[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), Cs[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), Cs[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(Cs), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Cs = [
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B(),
  /* @__PURE__ */ new B()
], Nr = /* @__PURE__ */ new B(), Ld = /* @__PURE__ */ new Ri(), xl = /* @__PURE__ */ new B(), Sl = /* @__PURE__ */ new B(), Ml = /* @__PURE__ */ new B(), oo = /* @__PURE__ */ new B(), ao = /* @__PURE__ */ new B(), sa = /* @__PURE__ */ new B(), hc = /* @__PURE__ */ new B(), Dd = /* @__PURE__ */ new B(), Nd = /* @__PURE__ */ new B(), oa = /* @__PURE__ */ new B();
function Dv(n, e, t, i, r) {
  for (let s = 0, o = n.length - 3; s <= o; s += 3) {
    oa.fromArray(n, s);
    const a = r.x * Math.abs(oa.x) + r.y * Math.abs(oa.y) + r.z * Math.abs(oa.z), c = e.dot(oa), f = t.dot(oa), h = i.dot(oa);
    if (Math.max(-Math.max(c, f, h), Math.min(c, f, h)) > a)
      return !1;
  }
  return !0;
}
const zD = /* @__PURE__ */ new Ri(), dc = /* @__PURE__ */ new B(), Nv = /* @__PURE__ */ new B();
class gi {
  constructor(e = new B(), t = -1) {
    this.isSphere = !0, this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const i = this.center;
    t !== void 0 ? i.copy(t) : zD.setFromPoints(e).getCenter(i);
    let r = 0;
    for (let s = 0, o = e.length; s < o; s++)
      r = Math.max(r, i.distanceToSquared(e[s]));
    return this.radius = Math.sqrt(r), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const i = this.center.distanceToSquared(e);
    return t.copy(e), i > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    dc.subVectors(e, this.center);
    const t = dc.lengthSq();
    if (t > this.radius * this.radius) {
      const i = Math.sqrt(t), r = (i - this.radius) * 0.5;
      this.center.addScaledVector(dc, r / i), this.radius += r;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (Nv.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(dc.copy(e.center).add(Nv)), this.expandByPoint(dc.copy(e.center).sub(Nv))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Rs = /* @__PURE__ */ new B(), Uv = /* @__PURE__ */ new B(), Ud = /* @__PURE__ */ new B(), lo = /* @__PURE__ */ new B(), Ov = /* @__PURE__ */ new B(), Od = /* @__PURE__ */ new B(), Fv = /* @__PURE__ */ new B();
class el {
  constructor(e = new B(), t = new B(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, Rs)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const i = t.dot(this.direction);
    return i < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, i);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = Rs.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (Rs.copy(this.origin).addScaledVector(this.direction, t), Rs.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, i, r) {
    Uv.copy(e).add(t).multiplyScalar(0.5), Ud.copy(t).sub(e).normalize(), lo.copy(this.origin).sub(Uv);
    const s = e.distanceTo(t) * 0.5, o = -this.direction.dot(Ud), a = lo.dot(this.direction), c = -lo.dot(Ud), f = lo.lengthSq(), h = Math.abs(1 - o * o);
    let d, p, v, y;
    if (h > 0)
      if (d = o * c - a, p = o * a - c, y = s * h, d >= 0)
        if (p >= -y)
          if (p <= y) {
            const w = 1 / h;
            d *= w, p *= w, v = d * (d + o * p + 2 * a) + p * (o * d + p + 2 * c) + f;
          } else
            p = s, d = Math.max(0, -(o * p + a)), v = -d * d + p * (p + 2 * c) + f;
        else
          p = -s, d = Math.max(0, -(o * p + a)), v = -d * d + p * (p + 2 * c) + f;
      else
        p <= -y ? (d = Math.max(0, -(-o * s + a)), p = d > 0 ? -s : Math.min(Math.max(-s, -c), s), v = -d * d + p * (p + 2 * c) + f) : p <= y ? (d = 0, p = Math.min(Math.max(-s, -c), s), v = p * (p + 2 * c) + f) : (d = Math.max(0, -(o * s + a)), p = d > 0 ? s : Math.min(Math.max(-s, -c), s), v = -d * d + p * (p + 2 * c) + f);
    else
      p = o > 0 ? -s : s, d = Math.max(0, -(o * p + a)), v = -d * d + p * (p + 2 * c) + f;
    return i && i.copy(this.origin).addScaledVector(this.direction, d), r && r.copy(Uv).addScaledVector(Ud, p), v;
  }
  intersectSphere(e, t) {
    Rs.subVectors(e.center, this.origin);
    const i = Rs.dot(this.direction), r = Rs.dot(Rs) - i * i, s = e.radius * e.radius;
    if (r > s)
      return null;
    const o = Math.sqrt(s - r), a = i - o, c = i + o;
    return c < 0 ? null : a < 0 ? this.at(c, t) : this.at(a, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const i = -(this.origin.dot(e.normal) + e.constant) / t;
    return i >= 0 ? i : null;
  }
  intersectPlane(e, t) {
    const i = this.distanceToPlane(e);
    return i === null ? null : this.at(i, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let i, r, s, o, a, c;
    const f = 1 / this.direction.x, h = 1 / this.direction.y, d = 1 / this.direction.z, p = this.origin;
    return f >= 0 ? (i = (e.min.x - p.x) * f, r = (e.max.x - p.x) * f) : (i = (e.max.x - p.x) * f, r = (e.min.x - p.x) * f), h >= 0 ? (s = (e.min.y - p.y) * h, o = (e.max.y - p.y) * h) : (s = (e.max.y - p.y) * h, o = (e.min.y - p.y) * h), i > o || s > r || ((s > i || isNaN(i)) && (i = s), (o < r || isNaN(r)) && (r = o), d >= 0 ? (a = (e.min.z - p.z) * d, c = (e.max.z - p.z) * d) : (a = (e.max.z - p.z) * d, c = (e.min.z - p.z) * d), i > c || a > r) || ((a > i || i !== i) && (i = a), (c < r || r !== r) && (r = c), r < 0) ? null : this.at(i >= 0 ? i : r, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, Rs) !== null;
  }
  intersectTriangle(e, t, i, r, s) {
    Ov.subVectors(t, e), Od.subVectors(i, e), Fv.crossVectors(Ov, Od);
    let o = this.direction.dot(Fv), a;
    if (o > 0) {
      if (r)
        return null;
      a = 1;
    } else if (o < 0)
      a = -1, o = -o;
    else
      return null;
    lo.subVectors(this.origin, e);
    const c = a * this.direction.dot(Od.crossVectors(lo, Od));
    if (c < 0)
      return null;
    const f = a * this.direction.dot(Ov.cross(lo));
    if (f < 0 || c + f > o)
      return null;
    const h = -a * lo.dot(Fv);
    return h < 0 ? null : this.at(h / o, s);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class yt {
  constructor(e, t, i, r, s, o, a, c, f, h, d, p, v, y, w, x) {
    yt.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, i, r, s, o, a, c, f, h, d, p, v, y, w, x);
  }
  set(e, t, i, r, s, o, a, c, f, h, d, p, v, y, w, x) {
    const g = this.elements;
    return g[0] = e, g[4] = t, g[8] = i, g[12] = r, g[1] = s, g[5] = o, g[9] = a, g[13] = c, g[2] = f, g[6] = h, g[10] = d, g[14] = p, g[3] = v, g[7] = y, g[11] = w, g[15] = x, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new yt().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, i = e.elements;
    return t[0] = i[0], t[1] = i[1], t[2] = i[2], t[3] = i[3], t[4] = i[4], t[5] = i[5], t[6] = i[6], t[7] = i[7], t[8] = i[8], t[9] = i[9], t[10] = i[10], t[11] = i[11], t[12] = i[12], t[13] = i[13], t[14] = i[14], t[15] = i[15], this;
  }
  copyPosition(e) {
    const t = this.elements, i = e.elements;
    return t[12] = i[12], t[13] = i[13], t[14] = i[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, i) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), i.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, i) {
    return this.set(
      e.x,
      t.x,
      i.x,
      0,
      e.y,
      t.y,
      i.y,
      0,
      e.z,
      t.z,
      i.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, i = e.elements, r = 1 / wl.setFromMatrixColumn(e, 0).length(), s = 1 / wl.setFromMatrixColumn(e, 1).length(), o = 1 / wl.setFromMatrixColumn(e, 2).length();
    return t[0] = i[0] * r, t[1] = i[1] * r, t[2] = i[2] * r, t[3] = 0, t[4] = i[4] * s, t[5] = i[5] * s, t[6] = i[6] * s, t[7] = 0, t[8] = i[8] * o, t[9] = i[9] * o, t[10] = i[10] * o, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, i = e.x, r = e.y, s = e.z, o = Math.cos(i), a = Math.sin(i), c = Math.cos(r), f = Math.sin(r), h = Math.cos(s), d = Math.sin(s);
    if (e.order === "XYZ") {
      const p = o * h, v = o * d, y = a * h, w = a * d;
      t[0] = c * h, t[4] = -c * d, t[8] = f, t[1] = v + y * f, t[5] = p - w * f, t[9] = -a * c, t[2] = w - p * f, t[6] = y + v * f, t[10] = o * c;
    } else if (e.order === "YXZ") {
      const p = c * h, v = c * d, y = f * h, w = f * d;
      t[0] = p + w * a, t[4] = y * a - v, t[8] = o * f, t[1] = o * d, t[5] = o * h, t[9] = -a, t[2] = v * a - y, t[6] = w + p * a, t[10] = o * c;
    } else if (e.order === "ZXY") {
      const p = c * h, v = c * d, y = f * h, w = f * d;
      t[0] = p - w * a, t[4] = -o * d, t[8] = y + v * a, t[1] = v + y * a, t[5] = o * h, t[9] = w - p * a, t[2] = -o * f, t[6] = a, t[10] = o * c;
    } else if (e.order === "ZYX") {
      const p = o * h, v = o * d, y = a * h, w = a * d;
      t[0] = c * h, t[4] = y * f - v, t[8] = p * f + w, t[1] = c * d, t[5] = w * f + p, t[9] = v * f - y, t[2] = -f, t[6] = a * c, t[10] = o * c;
    } else if (e.order === "YZX") {
      const p = o * c, v = o * f, y = a * c, w = a * f;
      t[0] = c * h, t[4] = w - p * d, t[8] = y * d + v, t[1] = d, t[5] = o * h, t[9] = -a * h, t[2] = -f * h, t[6] = v * d + y, t[10] = p - w * d;
    } else if (e.order === "XZY") {
      const p = o * c, v = o * f, y = a * c, w = a * f;
      t[0] = c * h, t[4] = -d, t[8] = f * h, t[1] = p * d + w, t[5] = o * h, t[9] = v * d - y, t[2] = y * d - v, t[6] = a * h, t[10] = w * d + p;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(BD, e, HD);
  }
  lookAt(e, t, i) {
    const r = this.elements;
    return Qi.subVectors(e, t), Qi.lengthSq() === 0 && (Qi.z = 1), Qi.normalize(), uo.crossVectors(i, Qi), uo.lengthSq() === 0 && (Math.abs(i.z) === 1 ? Qi.x += 1e-4 : Qi.z += 1e-4, Qi.normalize(), uo.crossVectors(i, Qi)), uo.normalize(), Fd.crossVectors(Qi, uo), r[0] = uo.x, r[4] = Fd.x, r[8] = Qi.x, r[1] = uo.y, r[5] = Fd.y, r[9] = Qi.y, r[2] = uo.z, r[6] = Fd.z, r[10] = Qi.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const i = e.elements, r = t.elements, s = this.elements, o = i[0], a = i[4], c = i[8], f = i[12], h = i[1], d = i[5], p = i[9], v = i[13], y = i[2], w = i[6], x = i[10], g = i[14], S = i[3], M = i[7], T = i[11], U = i[15], P = r[0], D = r[4], R = r[8], C = r[12], A = r[1], N = r[5], G = r[9], W = r[13], j = r[2], Q = r[6], J = r[10], oe = r[14], z = r[3], te = r[7], ne = r[11], he = r[15];
    return s[0] = o * P + a * A + c * j + f * z, s[4] = o * D + a * N + c * Q + f * te, s[8] = o * R + a * G + c * J + f * ne, s[12] = o * C + a * W + c * oe + f * he, s[1] = h * P + d * A + p * j + v * z, s[5] = h * D + d * N + p * Q + v * te, s[9] = h * R + d * G + p * J + v * ne, s[13] = h * C + d * W + p * oe + v * he, s[2] = y * P + w * A + x * j + g * z, s[6] = y * D + w * N + x * Q + g * te, s[10] = y * R + w * G + x * J + g * ne, s[14] = y * C + w * W + x * oe + g * he, s[3] = S * P + M * A + T * j + U * z, s[7] = S * D + M * N + T * Q + U * te, s[11] = S * R + M * G + T * J + U * ne, s[15] = S * C + M * W + T * oe + U * he, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], i = e[4], r = e[8], s = e[12], o = e[1], a = e[5], c = e[9], f = e[13], h = e[2], d = e[6], p = e[10], v = e[14], y = e[3], w = e[7], x = e[11], g = e[15];
    return y * (+s * c * d - r * f * d - s * a * p + i * f * p + r * a * v - i * c * v) + w * (+t * c * v - t * f * p + s * o * p - r * o * v + r * f * h - s * c * h) + x * (+t * f * d - t * a * v - s * o * d + i * o * v + s * a * h - i * f * h) + g * (-r * a * h - t * c * d + t * a * p + r * o * d - i * o * p + i * c * h);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, i) {
    const r = this.elements;
    return e.isVector3 ? (r[12] = e.x, r[13] = e.y, r[14] = e.z) : (r[12] = e, r[13] = t, r[14] = i), this;
  }
  invert() {
    const e = this.elements, t = e[0], i = e[1], r = e[2], s = e[3], o = e[4], a = e[5], c = e[6], f = e[7], h = e[8], d = e[9], p = e[10], v = e[11], y = e[12], w = e[13], x = e[14], g = e[15], S = d * x * f - w * p * f + w * c * v - a * x * v - d * c * g + a * p * g, M = y * p * f - h * x * f - y * c * v + o * x * v + h * c * g - o * p * g, T = h * w * f - y * d * f + y * a * v - o * w * v - h * a * g + o * d * g, U = y * d * c - h * w * c - y * a * p + o * w * p + h * a * x - o * d * x, P = t * S + i * M + r * T + s * U;
    if (P === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const D = 1 / P;
    return e[0] = S * D, e[1] = (w * p * s - d * x * s - w * r * v + i * x * v + d * r * g - i * p * g) * D, e[2] = (a * x * s - w * c * s + w * r * f - i * x * f - a * r * g + i * c * g) * D, e[3] = (d * c * s - a * p * s - d * r * f + i * p * f + a * r * v - i * c * v) * D, e[4] = M * D, e[5] = (h * x * s - y * p * s + y * r * v - t * x * v - h * r * g + t * p * g) * D, e[6] = (y * c * s - o * x * s - y * r * f + t * x * f + o * r * g - t * c * g) * D, e[7] = (o * p * s - h * c * s + h * r * f - t * p * f - o * r * v + t * c * v) * D, e[8] = T * D, e[9] = (y * d * s - h * w * s - y * i * v + t * w * v + h * i * g - t * d * g) * D, e[10] = (o * w * s - y * a * s + y * i * f - t * w * f - o * i * g + t * a * g) * D, e[11] = (h * a * s - o * d * s - h * i * f + t * d * f + o * i * v - t * a * v) * D, e[12] = U * D, e[13] = (h * w * r - y * d * r + y * i * p - t * w * p - h * i * x + t * d * x) * D, e[14] = (y * a * r - o * w * r - y * i * c + t * w * c + o * i * x - t * a * x) * D, e[15] = (o * d * r - h * a * r + h * i * c - t * d * c - o * i * p + t * a * p) * D, this;
  }
  scale(e) {
    const t = this.elements, i = e.x, r = e.y, s = e.z;
    return t[0] *= i, t[4] *= r, t[8] *= s, t[1] *= i, t[5] *= r, t[9] *= s, t[2] *= i, t[6] *= r, t[10] *= s, t[3] *= i, t[7] *= r, t[11] *= s, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, i, r));
  }
  makeTranslation(e, t, i) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      i,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -i,
      0,
      0,
      i,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      t,
      0,
      i,
      0,
      0,
      1,
      0,
      0,
      -i,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      t,
      -i,
      0,
      0,
      i,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const i = Math.cos(t), r = Math.sin(t), s = 1 - i, o = e.x, a = e.y, c = e.z, f = s * o, h = s * a;
    return this.set(
      f * o + i,
      f * a - r * c,
      f * c + r * a,
      0,
      f * a + r * c,
      h * a + i,
      h * c - r * o,
      0,
      f * c - r * a,
      h * c + r * o,
      s * c * c + i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, i) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, i, r, s, o) {
    return this.set(
      1,
      i,
      s,
      0,
      e,
      1,
      o,
      0,
      t,
      r,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, i) {
    const r = this.elements, s = t._x, o = t._y, a = t._z, c = t._w, f = s + s, h = o + o, d = a + a, p = s * f, v = s * h, y = s * d, w = o * h, x = o * d, g = a * d, S = c * f, M = c * h, T = c * d, U = i.x, P = i.y, D = i.z;
    return r[0] = (1 - (w + g)) * U, r[1] = (v + T) * U, r[2] = (y - M) * U, r[3] = 0, r[4] = (v - T) * P, r[5] = (1 - (p + g)) * P, r[6] = (x + S) * P, r[7] = 0, r[8] = (y + M) * D, r[9] = (x - S) * D, r[10] = (1 - (p + w)) * D, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this;
  }
  decompose(e, t, i) {
    const r = this.elements;
    let s = wl.set(r[0], r[1], r[2]).length();
    const o = wl.set(r[4], r[5], r[6]).length(), a = wl.set(r[8], r[9], r[10]).length();
    this.determinant() < 0 && (s = -s), e.x = r[12], e.y = r[13], e.z = r[14], Ur.copy(this);
    const f = 1 / s, h = 1 / o, d = 1 / a;
    return Ur.elements[0] *= f, Ur.elements[1] *= f, Ur.elements[2] *= f, Ur.elements[4] *= h, Ur.elements[5] *= h, Ur.elements[6] *= h, Ur.elements[8] *= d, Ur.elements[9] *= d, Ur.elements[10] *= d, t.setFromRotationMatrix(Ur), i.x = s, i.y = o, i.z = a, this;
  }
  makePerspective(e, t, i, r, s, o, a = cs) {
    const c = this.elements, f = 2 * s / (t - e), h = 2 * s / (i - r), d = (t + e) / (t - e), p = (i + r) / (i - r);
    let v, y;
    if (a === cs)
      v = -(o + s) / (o - s), y = -2 * o * s / (o - s);
    else if (a === kf)
      v = -o / (o - s), y = -o * s / (o - s);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + a);
    return c[0] = f, c[4] = 0, c[8] = d, c[12] = 0, c[1] = 0, c[5] = h, c[9] = p, c[13] = 0, c[2] = 0, c[6] = 0, c[10] = v, c[14] = y, c[3] = 0, c[7] = 0, c[11] = -1, c[15] = 0, this;
  }
  makeOrthographic(e, t, i, r, s, o, a = cs) {
    const c = this.elements, f = 1 / (t - e), h = 1 / (i - r), d = 1 / (o - s), p = (t + e) * f, v = (i + r) * h;
    let y, w;
    if (a === cs)
      y = (o + s) * d, w = -2 * d;
    else if (a === kf)
      y = s * d, w = -1 * d;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + a);
    return c[0] = 2 * f, c[4] = 0, c[8] = 0, c[12] = -p, c[1] = 0, c[5] = 2 * h, c[9] = 0, c[13] = -v, c[2] = 0, c[6] = 0, c[10] = w, c[14] = -y, c[3] = 0, c[7] = 0, c[11] = 0, c[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, i = e.elements;
    for (let r = 0; r < 16; r++)
      if (t[r] !== i[r])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let i = 0; i < 16; i++)
      this.elements[i] = e[i + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const i = this.elements;
    return e[t] = i[0], e[t + 1] = i[1], e[t + 2] = i[2], e[t + 3] = i[3], e[t + 4] = i[4], e[t + 5] = i[5], e[t + 6] = i[6], e[t + 7] = i[7], e[t + 8] = i[8], e[t + 9] = i[9], e[t + 10] = i[10], e[t + 11] = i[11], e[t + 12] = i[12], e[t + 13] = i[13], e[t + 14] = i[14], e[t + 15] = i[15], e;
  }
}
const wl = /* @__PURE__ */ new B(), Ur = /* @__PURE__ */ new yt(), BD = /* @__PURE__ */ new B(0, 0, 0), HD = /* @__PURE__ */ new B(1, 1, 1), uo = /* @__PURE__ */ new B(), Fd = /* @__PURE__ */ new B(), Qi = /* @__PURE__ */ new B(), zw = /* @__PURE__ */ new yt(), Bw = /* @__PURE__ */ new Dn();
class bi {
  constructor(e = 0, t = 0, i = 0, r = bi.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = i, this._order = r;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, i, r = this._order) {
    return this._x = e, this._y = t, this._z = i, this._order = r, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, i = !0) {
    const r = e.elements, s = r[0], o = r[4], a = r[8], c = r[1], f = r[5], h = r[9], d = r[2], p = r[6], v = r[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(Cn(a, -1, 1)), Math.abs(a) < 0.9999999 ? (this._x = Math.atan2(-h, v), this._z = Math.atan2(-o, s)) : (this._x = Math.atan2(p, f), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-Cn(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._y = Math.atan2(a, v), this._z = Math.atan2(c, f)) : (this._y = Math.atan2(-d, s), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(Cn(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._y = Math.atan2(-d, v), this._z = Math.atan2(-o, f)) : (this._y = 0, this._z = Math.atan2(c, s));
        break;
      case "ZYX":
        this._y = Math.asin(-Cn(d, -1, 1)), Math.abs(d) < 0.9999999 ? (this._x = Math.atan2(p, v), this._z = Math.atan2(c, s)) : (this._x = 0, this._z = Math.atan2(-o, f));
        break;
      case "YZX":
        this._z = Math.asin(Cn(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(-h, f), this._y = Math.atan2(-d, s)) : (this._x = 0, this._y = Math.atan2(a, v));
        break;
      case "XZY":
        this._z = Math.asin(-Cn(o, -1, 1)), Math.abs(o) < 0.9999999 ? (this._x = Math.atan2(p, f), this._y = Math.atan2(a, s)) : (this._x = Math.atan2(-h, v), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, i === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, i) {
    return zw.makeRotationFromQuaternion(e), this.setFromRotationMatrix(zw, t, i);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return Bw.setFromEuler(this), this.setFromQuaternion(Bw, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
bi.DEFAULT_ORDER = "XYZ";
class Ba {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let VD = 0;
const Hw = /* @__PURE__ */ new B(), El = /* @__PURE__ */ new Dn(), bs = /* @__PURE__ */ new yt(), kd = /* @__PURE__ */ new B(), pc = /* @__PURE__ */ new B(), GD = /* @__PURE__ */ new B(), WD = /* @__PURE__ */ new Dn(), Vw = /* @__PURE__ */ new B(1, 0, 0), Gw = /* @__PURE__ */ new B(0, 1, 0), Ww = /* @__PURE__ */ new B(0, 0, 1), Xw = { type: "added" }, XD = { type: "removed" }, Tl = { type: "childadded", child: null }, kv = { type: "childremoved", child: null };
class Yt extends _s {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: VD++ }), this.uuid = rr(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Yt.DEFAULT_UP.clone();
    const e = new B(), t = new bi(), i = new Dn(), r = new B(1, 1, 1);
    function s() {
      i.setFromEuler(t, !1);
    }
    function o() {
      t.setFromQuaternion(i, void 0, !1);
    }
    t._onChange(s), i._onChange(o), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: r
      },
      modelViewMatrix: {
        value: new yt()
      },
      normalMatrix: {
        value: new bt()
      }
    }), this.matrix = new yt(), this.matrixWorld = new yt(), this.matrixAutoUpdate = Yt.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = Yt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new Ba(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return El.setFromAxisAngle(e, t), this.quaternion.multiply(El), this;
  }
  rotateOnWorldAxis(e, t) {
    return El.setFromAxisAngle(e, t), this.quaternion.premultiply(El), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(Vw, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(Gw, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(Ww, e);
  }
  translateOnAxis(e, t) {
    return Hw.copy(e).applyQuaternion(this.quaternion), this.position.add(Hw.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(Vw, e);
  }
  translateY(e) {
    return this.translateOnAxis(Gw, e);
  }
  translateZ(e) {
    return this.translateOnAxis(Ww, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(bs.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, i) {
    e.isVector3 ? kd.copy(e) : kd.set(e, t, i);
    const r = this.parent;
    this.updateWorldMatrix(!0, !1), pc.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? bs.lookAt(pc, kd, this.up) : bs.lookAt(kd, pc, this.up), this.quaternion.setFromRotationMatrix(bs), r && (bs.extractRotation(r.matrixWorld), El.setFromRotationMatrix(bs), this.quaternion.premultiply(El.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.removeFromParent(), e.parent = this, this.children.push(e), e.dispatchEvent(Xw), Tl.child = e, this.dispatchEvent(Tl), Tl.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++)
        this.remove(arguments[i]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(XD), kv.child = e, this.dispatchEvent(kv), kv.child = null), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), bs.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), bs.multiply(e.parent.matrixWorld)), e.applyMatrix4(bs), e.removeFromParent(), e.parent = this, this.children.push(e), e.updateWorldMatrix(!1, !0), e.dispatchEvent(Xw), Tl.child = e, this.dispatchEvent(Tl), Tl.child = null, this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let i = 0, r = this.children.length; i < r; i++) {
      const o = this.children[i].getObjectByProperty(e, t);
      if (o !== void 0)
        return o;
    }
  }
  getObjectsByProperty(e, t, i = []) {
    this[e] === t && i.push(this);
    const r = this.children;
    for (let s = 0, o = r.length; s < o; s++)
      r[s].getObjectsByProperty(e, t, i);
    return i;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(pc, e, GD), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(pc, WD, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let i = 0, r = t.length; i < r; i++)
      t[i].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1)
      return;
    e(this);
    const t = this.children;
    for (let i = 0, r = t.length; i < r; i++)
      t[i].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let i = 0, r = t.length; i < r; i++)
      t[i].updateMatrixWorld(e);
  }
  updateWorldMatrix(e, t) {
    const i = this.parent;
    if (e === !0 && i !== null && i.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), t === !0) {
      const r = this.children;
      for (let s = 0, o = r.length; s < o; s++)
        r[s].updateWorldMatrix(!1, !0);
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", i = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, i.metadata = {
      version: 4.6,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const r = {};
    r.uuid = this.uuid, r.type = this.type, this.name !== "" && (r.name = this.name), this.castShadow === !0 && (r.castShadow = !0), this.receiveShadow === !0 && (r.receiveShadow = !0), this.visible === !1 && (r.visible = !1), this.frustumCulled === !1 && (r.frustumCulled = !1), this.renderOrder !== 0 && (r.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), r.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (r.matrixAutoUpdate = !1), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (r.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (r.type = "BatchedMesh", r.perObjectFrustumCulled = this.perObjectFrustumCulled, r.sortObjects = this.sortObjects, r.drawRanges = this._drawRanges, r.reservedRanges = this._reservedRanges, r.visibility = this._visibility, r.active = this._active, r.bounds = this._bounds.map((a) => ({
      boxInitialized: a.boxInitialized,
      boxMin: a.box.min.toArray(),
      boxMax: a.box.max.toArray(),
      sphereInitialized: a.sphereInitialized,
      sphereRadius: a.sphere.radius,
      sphereCenter: a.sphere.center.toArray()
    })), r.maxInstanceCount = this._maxInstanceCount, r.maxVertexCount = this._maxVertexCount, r.maxIndexCount = this._maxIndexCount, r.geometryInitialized = this._geometryInitialized, r.geometryCount = this._geometryCount, r.matricesTexture = this._matricesTexture.toJSON(e), this._colorsTexture !== null && (r.colorsTexture = this._colorsTexture.toJSON(e)), this.boundingSphere !== null && (r.boundingSphere = {
      center: r.boundingSphere.center.toArray(),
      radius: r.boundingSphere.radius
    }), this.boundingBox !== null && (r.boundingBox = {
      min: r.boundingBox.min.toArray(),
      max: r.boundingBox.max.toArray()
    }));
    function s(a, c) {
      return a[c.uuid] === void 0 && (a[c.uuid] = c.toJSON(e)), c.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? r.background = this.background.toJSON() : this.background.isTexture && (r.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (r.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      r.geometry = s(e.geometries, this.geometry);
      const a = this.geometry.parameters;
      if (a !== void 0 && a.shapes !== void 0) {
        const c = a.shapes;
        if (Array.isArray(c))
          for (let f = 0, h = c.length; f < h; f++) {
            const d = c[f];
            s(e.shapes, d);
          }
        else
          s(e.shapes, c);
      }
    }
    if (this.isSkinnedMesh && (r.bindMode = this.bindMode, r.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (s(e.skeletons, this.skeleton), r.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const a = [];
        for (let c = 0, f = this.material.length; c < f; c++)
          a.push(s(e.materials, this.material[c]));
        r.material = a;
      } else
        r.material = s(e.materials, this.material);
    if (this.children.length > 0) {
      r.children = [];
      for (let a = 0; a < this.children.length; a++)
        r.children.push(this.children[a].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      r.animations = [];
      for (let a = 0; a < this.animations.length; a++) {
        const c = this.animations[a];
        r.animations.push(s(e.animations, c));
      }
    }
    if (t) {
      const a = o(e.geometries), c = o(e.materials), f = o(e.textures), h = o(e.images), d = o(e.shapes), p = o(e.skeletons), v = o(e.animations), y = o(e.nodes);
      a.length > 0 && (i.geometries = a), c.length > 0 && (i.materials = c), f.length > 0 && (i.textures = f), h.length > 0 && (i.images = h), d.length > 0 && (i.shapes = d), p.length > 0 && (i.skeletons = p), v.length > 0 && (i.animations = v), y.length > 0 && (i.nodes = y);
    }
    return i.object = r, i;
    function o(a) {
      const c = [];
      for (const f in a) {
        const h = a[f];
        delete h.metadata, c.push(h);
      }
      return c;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let i = 0; i < e.children.length; i++) {
        const r = e.children[i];
        this.add(r.clone());
      }
    return this;
  }
}
Yt.DEFAULT_UP = /* @__PURE__ */ new B(0, 1, 0);
Yt.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Yt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const Or = /* @__PURE__ */ new B(), Ps = /* @__PURE__ */ new B(), zv = /* @__PURE__ */ new B(), Is = /* @__PURE__ */ new B(), Al = /* @__PURE__ */ new B(), Cl = /* @__PURE__ */ new B(), Yw = /* @__PURE__ */ new B(), Bv = /* @__PURE__ */ new B(), Hv = /* @__PURE__ */ new B(), Vv = /* @__PURE__ */ new B();
class tr {
  constructor(e = new B(), t = new B(), i = new B()) {
    this.a = e, this.b = t, this.c = i;
  }
  static getNormal(e, t, i, r) {
    r.subVectors(i, t), Or.subVectors(e, t), r.cross(Or);
    const s = r.lengthSq();
    return s > 0 ? r.multiplyScalar(1 / Math.sqrt(s)) : r.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, i, r, s) {
    Or.subVectors(r, t), Ps.subVectors(i, t), zv.subVectors(e, t);
    const o = Or.dot(Or), a = Or.dot(Ps), c = Or.dot(zv), f = Ps.dot(Ps), h = Ps.dot(zv), d = o * f - a * a;
    if (d === 0)
      return s.set(0, 0, 0), null;
    const p = 1 / d, v = (f * c - a * h) * p, y = (o * h - a * c) * p;
    return s.set(1 - v - y, y, v);
  }
  static containsPoint(e, t, i, r) {
    return this.getBarycoord(e, t, i, r, Is) === null ? !1 : Is.x >= 0 && Is.y >= 0 && Is.x + Is.y <= 1;
  }
  static getInterpolation(e, t, i, r, s, o, a, c) {
    return this.getBarycoord(e, t, i, r, Is) === null ? (c.x = 0, c.y = 0, "z" in c && (c.z = 0), "w" in c && (c.w = 0), null) : (c.setScalar(0), c.addScaledVector(s, Is.x), c.addScaledVector(o, Is.y), c.addScaledVector(a, Is.z), c);
  }
  static isFrontFacing(e, t, i, r) {
    return Or.subVectors(i, t), Ps.subVectors(e, t), Or.cross(Ps).dot(r) < 0;
  }
  set(e, t, i) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(i), this;
  }
  setFromPointsAndIndices(e, t, i, r) {
    return this.a.copy(e[t]), this.b.copy(e[i]), this.c.copy(e[r]), this;
  }
  setFromAttributeAndIndices(e, t, i, r) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, i), this.c.fromBufferAttribute(e, r), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return Or.subVectors(this.c, this.b), Ps.subVectors(this.a, this.b), Or.cross(Ps).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return tr.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return tr.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getInterpolation(e, t, i, r, s) {
    return tr.getInterpolation(e, this.a, this.b, this.c, t, i, r, s);
  }
  containsPoint(e) {
    return tr.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return tr.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const i = this.a, r = this.b, s = this.c;
    let o, a;
    Al.subVectors(r, i), Cl.subVectors(s, i), Bv.subVectors(e, i);
    const c = Al.dot(Bv), f = Cl.dot(Bv);
    if (c <= 0 && f <= 0)
      return t.copy(i);
    Hv.subVectors(e, r);
    const h = Al.dot(Hv), d = Cl.dot(Hv);
    if (h >= 0 && d <= h)
      return t.copy(r);
    const p = c * d - h * f;
    if (p <= 0 && c >= 0 && h <= 0)
      return o = c / (c - h), t.copy(i).addScaledVector(Al, o);
    Vv.subVectors(e, s);
    const v = Al.dot(Vv), y = Cl.dot(Vv);
    if (y >= 0 && v <= y)
      return t.copy(s);
    const w = v * f - c * y;
    if (w <= 0 && f >= 0 && y <= 0)
      return a = f / (f - y), t.copy(i).addScaledVector(Cl, a);
    const x = h * y - v * d;
    if (x <= 0 && d - h >= 0 && v - y >= 0)
      return Yw.subVectors(s, r), a = (d - h) / (d - h + (v - y)), t.copy(r).addScaledVector(Yw, a);
    const g = 1 / (x + w + p);
    return o = w * g, a = p * g, t.copy(i).addScaledVector(Al, o).addScaledVector(Cl, a);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const N2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, co = { h: 0, s: 0, l: 0 }, zd = { h: 0, s: 0, l: 0 };
function Gv(n, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? n + (e - n) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? n + (e - n) * 6 * (2 / 3 - t) : n;
}
class Qe {
  constructor(e, t, i) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, i);
  }
  set(e, t, i) {
    if (t === void 0 && i === void 0) {
      const r = e;
      r && r.isColor ? this.copy(r) : typeof r == "number" ? this.setHex(r) : typeof r == "string" && this.setStyle(r);
    } else
      this.setRGB(e, t, i);
    return this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = Bi) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Jt.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, i, r = Jt.workingColorSpace) {
    return this.r = e, this.g = t, this.b = i, Jt.toWorkingColorSpace(this, r), this;
  }
  setHSL(e, t, i, r = Jt.workingColorSpace) {
    if (e = o1(e, 1), t = Cn(t, 0, 1), i = Cn(i, 0, 1), t === 0)
      this.r = this.g = this.b = i;
    else {
      const s = i <= 0.5 ? i * (1 + t) : i + t - i * t, o = 2 * i - s;
      this.r = Gv(o, s, e + 1 / 3), this.g = Gv(o, s, e), this.b = Gv(o, s, e - 1 / 3);
    }
    return Jt.toWorkingColorSpace(this, r), this;
  }
  setStyle(e, t = Bi) {
    function i(s) {
      s !== void 0 && parseFloat(s) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let r;
    if (r = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let s;
      const o = r[1], a = r[2];
      switch (o) {
        case "rgb":
        case "rgba":
          if (s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))
            return i(s[4]), this.setRGB(
              Math.min(255, parseInt(s[1], 10)) / 255,
              Math.min(255, parseInt(s[2], 10)) / 255,
              Math.min(255, parseInt(s[3], 10)) / 255,
              t
            );
          if (s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))
            return i(s[4]), this.setRGB(
              Math.min(100, parseInt(s[1], 10)) / 100,
              Math.min(100, parseInt(s[2], 10)) / 100,
              Math.min(100, parseInt(s[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))
            return i(s[4]), this.setHSL(
              parseFloat(s[1]) / 360,
              parseFloat(s[2]) / 100,
              parseFloat(s[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (r = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const s = r[1], o = s.length;
      if (o === 3)
        return this.setRGB(
          parseInt(s.charAt(0), 16) / 15,
          parseInt(s.charAt(1), 16) / 15,
          parseInt(s.charAt(2), 16) / 15,
          t
        );
      if (o === 6)
        return this.setHex(parseInt(s, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = Bi) {
    const i = N2[e.toLowerCase()];
    return i !== void 0 ? this.setHex(i, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = gu(e.r), this.g = gu(e.g), this.b = gu(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = Pv(e.r), this.g = Pv(e.g), this.b = Pv(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = Bi) {
    return Jt.fromWorkingColorSpace(di.copy(this), e), Math.round(Cn(di.r * 255, 0, 255)) * 65536 + Math.round(Cn(di.g * 255, 0, 255)) * 256 + Math.round(Cn(di.b * 255, 0, 255));
  }
  getHexString(e = Bi) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Jt.workingColorSpace) {
    Jt.fromWorkingColorSpace(di.copy(this), t);
    const i = di.r, r = di.g, s = di.b, o = Math.max(i, r, s), a = Math.min(i, r, s);
    let c, f;
    const h = (a + o) / 2;
    if (a === o)
      c = 0, f = 0;
    else {
      const d = o - a;
      switch (f = h <= 0.5 ? d / (o + a) : d / (2 - o - a), o) {
        case i:
          c = (r - s) / d + (r < s ? 6 : 0);
          break;
        case r:
          c = (s - i) / d + 2;
          break;
        case s:
          c = (i - r) / d + 4;
          break;
      }
      c /= 6;
    }
    return e.h = c, e.s = f, e.l = h, e;
  }
  getRGB(e, t = Jt.workingColorSpace) {
    return Jt.fromWorkingColorSpace(di.copy(this), t), e.r = di.r, e.g = di.g, e.b = di.b, e;
  }
  getStyle(e = Bi) {
    Jt.fromWorkingColorSpace(di.copy(this), e);
    const t = di.r, i = di.g, r = di.b;
    return e !== Bi ? `color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${r.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(i * 255)},${Math.round(r * 255)})`;
  }
  offsetHSL(e, t, i) {
    return this.getHSL(co), this.setHSL(co.h + e, co.s + t, co.l + i);
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, i) {
    return this.r = e.r + (t.r - e.r) * i, this.g = e.g + (t.g - e.g) * i, this.b = e.b + (t.b - e.b) * i, this;
  }
  lerpHSL(e, t) {
    this.getHSL(co), e.getHSL(zd);
    const i = sf(co.h, zd.h, t), r = sf(co.s, zd.s, t), s = sf(co.l, zd.l, t);
    return this.setHSL(i, r, s), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, i = this.g, r = this.b, s = e.elements;
    return this.r = s[0] * t + s[3] * i + s[6] * r, this.g = s[1] * t + s[4] * i + s[7] * r, this.b = s[2] * t + s[5] * i + s[8] * r, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const di = /* @__PURE__ */ new Qe();
Qe.NAMES = N2;
let YD = 0;
class si extends _s {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: YD++ }), this.uuid = rr(), this.name = "", this.type = "Material", this.blending = Fa, this.side = js, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = wm, this.blendDst = Em, this.blendEquation = So, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new Qe(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Rf, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = L_, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = wa, this.stencilZFail = wa, this.stencilZPass = wa, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const i = e[t];
        if (i === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const r = this[t];
        if (r === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        r && r.isColor ? r.set(i) : r && r.isVector3 && i && i.isVector3 ? r.copy(i) : this[t] = i;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const i = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.color && this.color.isColor && (i.color = this.color.getHex()), this.roughness !== void 0 && (i.roughness = this.roughness), this.metalness !== void 0 && (i.metalness = this.metalness), this.sheen !== void 0 && (i.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (i.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (i.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (i.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (i.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (i.shininess = this.shininess), this.clearcoat !== void 0 && (i.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, i.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (i.dispersion = this.dispersion), this.iridescence !== void 0 && (i.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (i.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (i.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (i.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (i.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (i.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (i.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (i.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (i.lightMap = this.lightMap.toJSON(e).uuid, i.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (i.aoMap = this.aoMap.toJSON(e).uuid, i.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (i.bumpMap = this.bumpMap.toJSON(e).uuid, i.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (i.normalMap = this.normalMap.toJSON(e).uuid, i.normalMapType = this.normalMapType, i.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (i.displacementMap = this.displacementMap.toJSON(e).uuid, i.displacementScale = this.displacementScale, i.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (i.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (i.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (i.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (i.combine = this.combine)), this.envMapRotation !== void 0 && (i.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (i.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (i.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (i.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (i.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (i.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (i.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (i.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (i.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (i.size = this.size), this.shadowSide !== null && (i.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (i.sizeAttenuation = this.sizeAttenuation), this.blending !== Fa && (i.blending = this.blending), this.side !== js && (i.side = this.side), this.vertexColors === !0 && (i.vertexColors = !0), this.opacity < 1 && (i.opacity = this.opacity), this.transparent === !0 && (i.transparent = !0), this.blendSrc !== wm && (i.blendSrc = this.blendSrc), this.blendDst !== Em && (i.blendDst = this.blendDst), this.blendEquation !== So && (i.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (i.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (i.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (i.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (i.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (i.blendAlpha = this.blendAlpha), this.depthFunc !== Rf && (i.depthFunc = this.depthFunc), this.depthTest === !1 && (i.depthTest = this.depthTest), this.depthWrite === !1 && (i.depthWrite = this.depthWrite), this.colorWrite === !1 && (i.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (i.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== L_ && (i.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (i.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (i.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== wa && (i.stencilFail = this.stencilFail), this.stencilZFail !== wa && (i.stencilZFail = this.stencilZFail), this.stencilZPass !== wa && (i.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (i.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (i.rotation = this.rotation), this.polygonOffset === !0 && (i.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (i.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (i.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (i.linewidth = this.linewidth), this.dashSize !== void 0 && (i.dashSize = this.dashSize), this.gapSize !== void 0 && (i.gapSize = this.gapSize), this.scale !== void 0 && (i.scale = this.scale), this.dithering === !0 && (i.dithering = !0), this.alphaTest > 0 && (i.alphaTest = this.alphaTest), this.alphaHash === !0 && (i.alphaHash = !0), this.alphaToCoverage === !0 && (i.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (i.premultipliedAlpha = !0), this.forceSinglePass === !0 && (i.forceSinglePass = !0), this.wireframe === !0 && (i.wireframe = !0), this.wireframeLinewidth > 1 && (i.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (i.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (i.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (i.flatShading = !0), this.visible === !1 && (i.visible = !1), this.toneMapped === !1 && (i.toneMapped = !1), this.fog === !1 && (i.fog = !1), Object.keys(this.userData).length > 0 && (i.userData = this.userData);
    function r(s) {
      const o = [];
      for (const a in s) {
        const c = s[a];
        delete c.metadata, o.push(c);
      }
      return o;
    }
    if (t) {
      const s = r(e.textures), o = r(e.images);
      s.length > 0 && (i.textures = s), o.length > 0 && (i.images = o);
    }
    return i;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let i = null;
    if (t !== null) {
      const r = t.length;
      i = new Array(r);
      for (let s = 0; s !== r; ++s)
        i[s] = t[s].clone();
    }
    return this.clippingPlanes = i, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  onBuild() {
    console.warn("Material: onBuild() has been removed.");
  }
  onBeforeRender() {
    console.warn("Material: onBeforeRender() has been removed.");
  }
}
class Ti extends si {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Qe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new bi(), this.combine = ih, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const zs = /* @__PURE__ */ qD();
function qD() {
  const n = new ArrayBuffer(4), e = new Float32Array(n), t = new Uint32Array(n), i = new Uint32Array(512), r = new Uint32Array(512);
  for (let c = 0; c < 256; ++c) {
    const f = c - 127;
    f < -27 ? (i[c] = 0, i[c | 256] = 32768, r[c] = 24, r[c | 256] = 24) : f < -14 ? (i[c] = 1024 >> -f - 14, i[c | 256] = 1024 >> -f - 14 | 32768, r[c] = -f - 1, r[c | 256] = -f - 1) : f <= 15 ? (i[c] = f + 15 << 10, i[c | 256] = f + 15 << 10 | 32768, r[c] = 13, r[c | 256] = 13) : f < 128 ? (i[c] = 31744, i[c | 256] = 64512, r[c] = 24, r[c | 256] = 24) : (i[c] = 31744, i[c | 256] = 64512, r[c] = 13, r[c | 256] = 13);
  }
  const s = new Uint32Array(2048), o = new Uint32Array(64), a = new Uint32Array(64);
  for (let c = 1; c < 1024; ++c) {
    let f = c << 13, h = 0;
    for (; !(f & 8388608); )
      f <<= 1, h -= 8388608;
    f &= -8388609, h += 947912704, s[c] = f | h;
  }
  for (let c = 1024; c < 2048; ++c)
    s[c] = 939524096 + (c - 1024 << 13);
  for (let c = 1; c < 31; ++c)
    o[c] = c << 23;
  o[31] = 1199570944, o[32] = 2147483648;
  for (let c = 33; c < 63; ++c)
    o[c] = 2147483648 + (c - 32 << 23);
  o[63] = 3347054592;
  for (let c = 1; c < 64; ++c)
    c !== 32 && (a[c] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: i,
    shiftTable: r,
    mantissaTable: s,
    exponentTable: o,
    offsetTable: a
  };
}
function ki(n) {
  Math.abs(n) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), n = Cn(n, -65504, 65504), zs.floatView[0] = n;
  const e = zs.uint32View[0], t = e >> 23 & 511;
  return zs.baseTable[t] + ((e & 8388607) >> zs.shiftTable[t]);
}
function Bc(n) {
  const e = n >> 10;
  return zs.uint32View[0] = zs.mantissaTable[zs.offsetTable[e] + (n & 1023)] + zs.exponentTable[e], zs.floatView[0];
}
const La = {
  toHalfFloat: ki,
  fromHalfFloat: Bc
}, kn = /* @__PURE__ */ new B(), Bd = /* @__PURE__ */ new _e();
class nn {
  constructor(e, t, i = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = i, this.usage = Ff, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.gpuType = xn, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  get updateRange() {
    return l1("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  copyAt(e, t, i) {
    e *= this.itemSize, i *= t.itemSize;
    for (let r = 0, s = this.itemSize; r < s; r++)
      this.array[e + r] = t.array[i + r];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, i = this.count; t < i; t++)
        Bd.fromBufferAttribute(this, t), Bd.applyMatrix3(e), this.setXY(t, Bd.x, Bd.y);
    else if (this.itemSize === 3)
      for (let t = 0, i = this.count; t < i; t++)
        kn.fromBufferAttribute(this, t), kn.applyMatrix3(e), this.setXYZ(t, kn.x, kn.y, kn.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, i = this.count; t < i; t++)
      kn.fromBufferAttribute(this, t), kn.applyMatrix4(e), this.setXYZ(t, kn.x, kn.y, kn.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, i = this.count; t < i; t++)
      kn.fromBufferAttribute(this, t), kn.applyNormalMatrix(e), this.setXYZ(t, kn.x, kn.y, kn.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, i = this.count; t < i; t++)
      kn.fromBufferAttribute(this, t), kn.transformDirection(e), this.setXYZ(t, kn.x, kn.y, kn.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let i = this.array[e * this.itemSize + t];
    return this.normalized && (i = Ei(i, this.array)), i;
  }
  setComponent(e, t, i) {
    return this.normalized && (i = Pt(i, this.array)), this.array[e * this.itemSize + t] = i, this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, i) {
    return e *= this.itemSize, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this;
  }
  setXYZ(e, t, i, r) {
    return e *= this.itemSize, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array), r = Pt(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this.array[e + 2] = r, this;
  }
  setXYZW(e, t, i, r, s) {
    return e *= this.itemSize, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array), r = Pt(r, this.array), s = Pt(s, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this.array[e + 2] = r, this.array[e + 3] = s, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== Ff && (e.usage = this.usage), e;
  }
}
class jD extends nn {
  constructor(e, t, i) {
    super(new Int8Array(e), t, i);
  }
}
class ZD extends nn {
  constructor(e, t, i) {
    super(new Uint8Array(e), t, i);
  }
}
class KD extends nn {
  constructor(e, t, i) {
    super(new Uint8ClampedArray(e), t, i);
  }
}
class JD extends nn {
  constructor(e, t, i) {
    super(new Int16Array(e), t, i);
  }
}
class Pg extends nn {
  constructor(e, t, i) {
    super(new Uint16Array(e), t, i);
  }
}
class QD extends nn {
  constructor(e, t, i) {
    super(new Int32Array(e), t, i);
  }
}
class c1 extends nn {
  constructor(e, t, i) {
    super(new Uint32Array(e), t, i);
  }
}
class $D extends nn {
  constructor(e, t, i) {
    super(new Uint16Array(e), t, i), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = Bc(this.array[e * this.itemSize]);
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize] = ki(t), this;
  }
  getY(e) {
    let t = Bc(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize + 1] = ki(t), this;
  }
  getZ(e) {
    let t = Bc(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize + 2] = ki(t), this;
  }
  getW(e) {
    let t = Bc(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.array[e * this.itemSize + 3] = ki(t), this;
  }
  setXY(e, t, i) {
    return e *= this.itemSize, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array)), this.array[e + 0] = ki(t), this.array[e + 1] = ki(i), this;
  }
  setXYZ(e, t, i, r) {
    return e *= this.itemSize, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array), r = Pt(r, this.array)), this.array[e + 0] = ki(t), this.array[e + 1] = ki(i), this.array[e + 2] = ki(r), this;
  }
  setXYZW(e, t, i, r, s) {
    return e *= this.itemSize, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array), r = Pt(r, this.array), s = Pt(s, this.array)), this.array[e + 0] = ki(t), this.array[e + 1] = ki(i), this.array[e + 2] = ki(r), this.array[e + 3] = ki(s), this;
  }
}
class rt extends nn {
  constructor(e, t, i) {
    super(new Float32Array(e), t, i);
  }
}
let eN = 0;
const xr = /* @__PURE__ */ new yt(), Wv = /* @__PURE__ */ new Yt(), Rl = /* @__PURE__ */ new B(), $i = /* @__PURE__ */ new Ri(), mc = /* @__PURE__ */ new Ri(), Kn = /* @__PURE__ */ new B();
class Dt extends _s {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: eN++ }), this.uuid = rr(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (P2(e) ? c1 : Pg)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, i = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: i
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const i = this.attributes.normal;
    if (i !== void 0) {
      const s = new bt().getNormalMatrix(e);
      i.applyNormalMatrix(s), i.needsUpdate = !0;
    }
    const r = this.attributes.tangent;
    return r !== void 0 && (r.transformDirection(e), r.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return xr.makeRotationFromQuaternion(e), this.applyMatrix4(xr), this;
  }
  rotateX(e) {
    return xr.makeRotationX(e), this.applyMatrix4(xr), this;
  }
  rotateY(e) {
    return xr.makeRotationY(e), this.applyMatrix4(xr), this;
  }
  rotateZ(e) {
    return xr.makeRotationZ(e), this.applyMatrix4(xr), this;
  }
  translate(e, t, i) {
    return xr.makeTranslation(e, t, i), this.applyMatrix4(xr), this;
  }
  scale(e, t, i) {
    return xr.makeScale(e, t, i), this.applyMatrix4(xr), this;
  }
  lookAt(e) {
    return Wv.lookAt(e), Wv.updateMatrix(), this.applyMatrix4(Wv.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Rl).negate(), this.translate(Rl.x, Rl.y, Rl.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let i = 0, r = e.length; i < r; i++) {
      const s = e[i];
      t.push(s.x, s.y, s.z || 0);
    }
    return this.setAttribute("position", new rt(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ri());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(
        new B(-1 / 0, -1 / 0, -1 / 0),
        new B(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let i = 0, r = t.length; i < r; i++) {
          const s = t[i];
          $i.setFromBufferAttribute(s), this.morphTargetsRelative ? (Kn.addVectors(this.boundingBox.min, $i.min), this.boundingBox.expandByPoint(Kn), Kn.addVectors(this.boundingBox.max, $i.max), this.boundingBox.expandByPoint(Kn)) : (this.boundingBox.expandByPoint($i.min), this.boundingBox.expandByPoint($i.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new gi());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new B(), 1 / 0);
      return;
    }
    if (e) {
      const i = this.boundingSphere.center;
      if ($i.setFromBufferAttribute(e), t)
        for (let s = 0, o = t.length; s < o; s++) {
          const a = t[s];
          mc.setFromBufferAttribute(a), this.morphTargetsRelative ? (Kn.addVectors($i.min, mc.min), $i.expandByPoint(Kn), Kn.addVectors($i.max, mc.max), $i.expandByPoint(Kn)) : ($i.expandByPoint(mc.min), $i.expandByPoint(mc.max));
        }
      $i.getCenter(i);
      let r = 0;
      for (let s = 0, o = e.count; s < o; s++)
        Kn.fromBufferAttribute(e, s), r = Math.max(r, i.distanceToSquared(Kn));
      if (t)
        for (let s = 0, o = t.length; s < o; s++) {
          const a = t[s], c = this.morphTargetsRelative;
          for (let f = 0, h = a.count; f < h; f++)
            Kn.fromBufferAttribute(a, f), c && (Rl.fromBufferAttribute(e, f), Kn.add(Rl)), r = Math.max(r, i.distanceToSquared(Kn));
        }
      this.boundingSphere.radius = Math.sqrt(r), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const i = t.position, r = t.normal, s = t.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new nn(new Float32Array(4 * i.count), 4));
    const o = this.getAttribute("tangent"), a = [], c = [];
    for (let R = 0; R < i.count; R++)
      a[R] = new B(), c[R] = new B();
    const f = new B(), h = new B(), d = new B(), p = new _e(), v = new _e(), y = new _e(), w = new B(), x = new B();
    function g(R, C, A) {
      f.fromBufferAttribute(i, R), h.fromBufferAttribute(i, C), d.fromBufferAttribute(i, A), p.fromBufferAttribute(s, R), v.fromBufferAttribute(s, C), y.fromBufferAttribute(s, A), h.sub(f), d.sub(f), v.sub(p), y.sub(p);
      const N = 1 / (v.x * y.y - y.x * v.y);
      isFinite(N) && (w.copy(h).multiplyScalar(y.y).addScaledVector(d, -v.y).multiplyScalar(N), x.copy(d).multiplyScalar(v.x).addScaledVector(h, -y.x).multiplyScalar(N), a[R].add(w), a[C].add(w), a[A].add(w), c[R].add(x), c[C].add(x), c[A].add(x));
    }
    let S = this.groups;
    S.length === 0 && (S = [{
      start: 0,
      count: e.count
    }]);
    for (let R = 0, C = S.length; R < C; ++R) {
      const A = S[R], N = A.start, G = A.count;
      for (let W = N, j = N + G; W < j; W += 3)
        g(
          e.getX(W + 0),
          e.getX(W + 1),
          e.getX(W + 2)
        );
    }
    const M = new B(), T = new B(), U = new B(), P = new B();
    function D(R) {
      U.fromBufferAttribute(r, R), P.copy(U);
      const C = a[R];
      M.copy(C), M.sub(U.multiplyScalar(U.dot(C))).normalize(), T.crossVectors(P, C);
      const N = T.dot(c[R]) < 0 ? -1 : 1;
      o.setXYZW(R, M.x, M.y, M.z, N);
    }
    for (let R = 0, C = S.length; R < C; ++R) {
      const A = S[R], N = A.start, G = A.count;
      for (let W = N, j = N + G; W < j; W += 3)
        D(e.getX(W + 0)), D(e.getX(W + 1)), D(e.getX(W + 2));
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let i = this.getAttribute("normal");
      if (i === void 0)
        i = new nn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", i);
      else
        for (let p = 0, v = i.count; p < v; p++)
          i.setXYZ(p, 0, 0, 0);
      const r = new B(), s = new B(), o = new B(), a = new B(), c = new B(), f = new B(), h = new B(), d = new B();
      if (e)
        for (let p = 0, v = e.count; p < v; p += 3) {
          const y = e.getX(p + 0), w = e.getX(p + 1), x = e.getX(p + 2);
          r.fromBufferAttribute(t, y), s.fromBufferAttribute(t, w), o.fromBufferAttribute(t, x), h.subVectors(o, s), d.subVectors(r, s), h.cross(d), a.fromBufferAttribute(i, y), c.fromBufferAttribute(i, w), f.fromBufferAttribute(i, x), a.add(h), c.add(h), f.add(h), i.setXYZ(y, a.x, a.y, a.z), i.setXYZ(w, c.x, c.y, c.z), i.setXYZ(x, f.x, f.y, f.z);
        }
      else
        for (let p = 0, v = t.count; p < v; p += 3)
          r.fromBufferAttribute(t, p + 0), s.fromBufferAttribute(t, p + 1), o.fromBufferAttribute(t, p + 2), h.subVectors(o, s), d.subVectors(r, s), h.cross(d), i.setXYZ(p + 0, h.x, h.y, h.z), i.setXYZ(p + 1, h.x, h.y, h.z), i.setXYZ(p + 2, h.x, h.y, h.z);
      this.normalizeNormals(), i.needsUpdate = !0;
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, i = e.count; t < i; t++)
      Kn.fromBufferAttribute(e, t), Kn.normalize(), e.setXYZ(t, Kn.x, Kn.y, Kn.z);
  }
  toNonIndexed() {
    function e(a, c) {
      const f = a.array, h = a.itemSize, d = a.normalized, p = new f.constructor(c.length * h);
      let v = 0, y = 0;
      for (let w = 0, x = c.length; w < x; w++) {
        a.isInterleavedBufferAttribute ? v = c[w] * a.data.stride + a.offset : v = c[w] * h;
        for (let g = 0; g < h; g++)
          p[y++] = f[v++];
      }
      return new nn(p, h, d);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new Dt(), i = this.index.array, r = this.attributes;
    for (const a in r) {
      const c = r[a], f = e(c, i);
      t.setAttribute(a, f);
    }
    const s = this.morphAttributes;
    for (const a in s) {
      const c = [], f = s[a];
      for (let h = 0, d = f.length; h < d; h++) {
        const p = f[h], v = e(p, i);
        c.push(v);
      }
      t.morphAttributes[a] = c;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const o = this.groups;
    for (let a = 0, c = o.length; a < c; a++) {
      const f = o[a];
      t.addGroup(f.start, f.count, f.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const c = this.parameters;
      for (const f in c)
        c[f] !== void 0 && (e[f] = c[f]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const i = this.attributes;
    for (const c in i) {
      const f = i[c];
      e.data.attributes[c] = f.toJSON(e.data);
    }
    const r = {};
    let s = !1;
    for (const c in this.morphAttributes) {
      const f = this.morphAttributes[c], h = [];
      for (let d = 0, p = f.length; d < p; d++) {
        const v = f[d];
        h.push(v.toJSON(e.data));
      }
      h.length > 0 && (r[c] = h, s = !0);
    }
    s && (e.data.morphAttributes = r, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const o = this.groups;
    o.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(o)));
    const a = this.boundingSphere;
    return a !== null && (e.data.boundingSphere = {
      center: a.center.toArray(),
      radius: a.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const i = e.index;
    i !== null && this.setIndex(i.clone(t));
    const r = e.attributes;
    for (const f in r) {
      const h = r[f];
      this.setAttribute(f, h.clone(t));
    }
    const s = e.morphAttributes;
    for (const f in s) {
      const h = [], d = s[f];
      for (let p = 0, v = d.length; p < v; p++)
        h.push(d[p].clone(t));
      this.morphAttributes[f] = h;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const o = e.groups;
    for (let f = 0, h = o.length; f < h; f++) {
      const d = o[f];
      this.addGroup(d.start, d.count, d.materialIndex);
    }
    const a = e.boundingBox;
    a !== null && (this.boundingBox = a.clone());
    const c = e.boundingSphere;
    return c !== null && (this.boundingSphere = c.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const qw = /* @__PURE__ */ new yt(), aa = /* @__PURE__ */ new el(), Hd = /* @__PURE__ */ new gi(), jw = /* @__PURE__ */ new B(), bl = /* @__PURE__ */ new B(), Pl = /* @__PURE__ */ new B(), Il = /* @__PURE__ */ new B(), Xv = /* @__PURE__ */ new B(), Vd = /* @__PURE__ */ new B(), Gd = /* @__PURE__ */ new _e(), Wd = /* @__PURE__ */ new _e(), Xd = /* @__PURE__ */ new _e(), Zw = /* @__PURE__ */ new B(), Kw = /* @__PURE__ */ new B(), Jw = /* @__PURE__ */ new B(), Yd = /* @__PURE__ */ new B(), qd = /* @__PURE__ */ new B();
class Sn extends Yt {
  constructor(e = new Dt(), t = new Ti()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, i = Object.keys(t);
    if (i.length > 0) {
      const r = t[i[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, o = r.length; s < o; s++) {
          const a = r[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = s;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const i = this.geometry, r = i.attributes.position, s = i.morphAttributes.position, o = i.morphTargetsRelative;
    t.fromBufferAttribute(r, e);
    const a = this.morphTargetInfluences;
    if (s && a) {
      Vd.set(0, 0, 0);
      for (let c = 0, f = s.length; c < f; c++) {
        const h = a[c], d = s[c];
        h !== 0 && (Xv.fromBufferAttribute(d, e), o ? Vd.addScaledVector(Xv, h) : Vd.addScaledVector(Xv.sub(t), h));
      }
      t.add(Vd);
    }
    return t;
  }
  raycast(e, t) {
    const i = this.geometry, r = this.material, s = this.matrixWorld;
    r !== void 0 && (i.boundingSphere === null && i.computeBoundingSphere(), Hd.copy(i.boundingSphere), Hd.applyMatrix4(s), aa.copy(e.ray).recast(e.near), !(Hd.containsPoint(aa.origin) === !1 && (aa.intersectSphere(Hd, jw) === null || aa.origin.distanceToSquared(jw) > (e.far - e.near) ** 2)) && (qw.copy(s).invert(), aa.copy(e.ray).applyMatrix4(qw), !(i.boundingBox !== null && aa.intersectsBox(i.boundingBox) === !1) && this._computeIntersections(e, t, aa)));
  }
  _computeIntersections(e, t, i) {
    let r;
    const s = this.geometry, o = this.material, a = s.index, c = s.attributes.position, f = s.attributes.uv, h = s.attributes.uv1, d = s.attributes.normal, p = s.groups, v = s.drawRange;
    if (a !== null)
      if (Array.isArray(o))
        for (let y = 0, w = p.length; y < w; y++) {
          const x = p[y], g = o[x.materialIndex], S = Math.max(x.start, v.start), M = Math.min(a.count, Math.min(x.start + x.count, v.start + v.count));
          for (let T = S, U = M; T < U; T += 3) {
            const P = a.getX(T), D = a.getX(T + 1), R = a.getX(T + 2);
            r = jd(this, g, e, i, f, h, d, P, D, R), r && (r.faceIndex = Math.floor(T / 3), r.face.materialIndex = x.materialIndex, t.push(r));
          }
        }
      else {
        const y = Math.max(0, v.start), w = Math.min(a.count, v.start + v.count);
        for (let x = y, g = w; x < g; x += 3) {
          const S = a.getX(x), M = a.getX(x + 1), T = a.getX(x + 2);
          r = jd(this, o, e, i, f, h, d, S, M, T), r && (r.faceIndex = Math.floor(x / 3), t.push(r));
        }
      }
    else if (c !== void 0)
      if (Array.isArray(o))
        for (let y = 0, w = p.length; y < w; y++) {
          const x = p[y], g = o[x.materialIndex], S = Math.max(x.start, v.start), M = Math.min(c.count, Math.min(x.start + x.count, v.start + v.count));
          for (let T = S, U = M; T < U; T += 3) {
            const P = T, D = T + 1, R = T + 2;
            r = jd(this, g, e, i, f, h, d, P, D, R), r && (r.faceIndex = Math.floor(T / 3), r.face.materialIndex = x.materialIndex, t.push(r));
          }
        }
      else {
        const y = Math.max(0, v.start), w = Math.min(c.count, v.start + v.count);
        for (let x = y, g = w; x < g; x += 3) {
          const S = x, M = x + 1, T = x + 2;
          r = jd(this, o, e, i, f, h, d, S, M, T), r && (r.faceIndex = Math.floor(x / 3), t.push(r));
        }
      }
  }
}
function tN(n, e, t, i, r, s, o, a) {
  let c;
  if (e.side === Ci ? c = i.intersectTriangle(o, s, r, !0, a) : c = i.intersectTriangle(r, s, o, e.side === js, a), c === null)
    return null;
  qd.copy(a), qd.applyMatrix4(n.matrixWorld);
  const f = t.ray.origin.distanceTo(qd);
  return f < t.near || f > t.far ? null : {
    distance: f,
    point: qd.clone(),
    object: n
  };
}
function jd(n, e, t, i, r, s, o, a, c, f) {
  n.getVertexPosition(a, bl), n.getVertexPosition(c, Pl), n.getVertexPosition(f, Il);
  const h = tN(n, e, t, i, bl, Pl, Il, Yd);
  if (h) {
    r && (Gd.fromBufferAttribute(r, a), Wd.fromBufferAttribute(r, c), Xd.fromBufferAttribute(r, f), h.uv = tr.getInterpolation(Yd, bl, Pl, Il, Gd, Wd, Xd, new _e())), s && (Gd.fromBufferAttribute(s, a), Wd.fromBufferAttribute(s, c), Xd.fromBufferAttribute(s, f), h.uv1 = tr.getInterpolation(Yd, bl, Pl, Il, Gd, Wd, Xd, new _e())), o && (Zw.fromBufferAttribute(o, a), Kw.fromBufferAttribute(o, c), Jw.fromBufferAttribute(o, f), h.normal = tr.getInterpolation(Yd, bl, Pl, Il, Zw, Kw, Jw, new B()), h.normal.dot(i.direction) > 0 && h.normal.multiplyScalar(-1));
    const d = {
      a,
      b: c,
      c: f,
      normal: new B(),
      materialIndex: 0
    };
    tr.getNormal(bl, Pl, Il, d.normal), h.face = d;
  }
  return h;
}
class Wo extends Dt {
  constructor(e = 1, t = 1, i = 1, r = 1, s = 1, o = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: i,
      widthSegments: r,
      heightSegments: s,
      depthSegments: o
    };
    const a = this;
    r = Math.floor(r), s = Math.floor(s), o = Math.floor(o);
    const c = [], f = [], h = [], d = [];
    let p = 0, v = 0;
    y("z", "y", "x", -1, -1, i, t, e, o, s, 0), y("z", "y", "x", 1, -1, i, t, -e, o, s, 1), y("x", "z", "y", 1, 1, e, i, t, r, o, 2), y("x", "z", "y", 1, -1, e, i, -t, r, o, 3), y("x", "y", "z", 1, -1, e, t, i, r, s, 4), y("x", "y", "z", -1, -1, e, t, -i, r, s, 5), this.setIndex(c), this.setAttribute("position", new rt(f, 3)), this.setAttribute("normal", new rt(h, 3)), this.setAttribute("uv", new rt(d, 2));
    function y(w, x, g, S, M, T, U, P, D, R, C) {
      const A = T / D, N = U / R, G = T / 2, W = U / 2, j = P / 2, Q = D + 1, J = R + 1;
      let oe = 0, z = 0;
      const te = new B();
      for (let ne = 0; ne < J; ne++) {
        const he = ne * N - W;
        for (let Se = 0; Se < Q; Se++) {
          const ke = Se * A - G;
          te[w] = ke * S, te[x] = he * M, te[g] = j, f.push(te.x, te.y, te.z), te[w] = 0, te[x] = 0, te[g] = P > 0 ? 1 : -1, h.push(te.x, te.y, te.z), d.push(Se / D), d.push(1 - ne / R), oe += 1;
        }
      }
      for (let ne = 0; ne < R; ne++)
        for (let he = 0; he < D; he++) {
          const Se = p + he + Q * ne, ke = p + he + Q * (ne + 1), ce = p + (he + 1) + Q * (ne + 1), we = p + (he + 1) + Q * ne;
          c.push(Se, ke, we), c.push(ke, ce, we), z += 6;
        }
      a.addGroup(v, z, C), v += z, p += oe;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Wo(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function Ru(n) {
  const e = {};
  for (const t in n) {
    e[t] = {};
    for (const i in n[t]) {
      const r = n[t][i];
      r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? r.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][i] = null) : e[t][i] = r.clone() : Array.isArray(r) ? e[t][i] = r.slice() : e[t][i] = r;
    }
  }
  return e;
}
function Mi(n) {
  const e = {};
  for (let t = 0; t < n.length; t++) {
    const i = Ru(n[t]);
    for (const r in i)
      e[r] = i[r];
  }
  return e;
}
function nN(n) {
  const e = [];
  for (let t = 0; t < n.length; t++)
    e.push(n[t].clone());
  return e;
}
function U2(n) {
  const e = n.getRenderTarget();
  return e === null ? n.outputColorSpace : e.isXRRenderTarget === !0 ? e.texture.colorSpace : Jt.workingColorSpace;
}
const O2 = { clone: Ru, merge: Mi };
var iN = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, rN = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class qi extends si {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = iN, this.fragmentShader = rN, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      clipCullDistance: !1,
      // set to use vertex shader clipping
      multiDraw: !1
      // set to use vertex shader multi_draw / enable gl_DrawID
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = Ru(e.uniforms), this.uniformsGroups = nN(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const r in this.uniforms) {
      const o = this.uniforms[r].value;
      o && o.isTexture ? t.uniforms[r] = {
        type: "t",
        value: o.toJSON(e).uuid
      } : o && o.isColor ? t.uniforms[r] = {
        type: "c",
        value: o.getHex()
      } : o && o.isVector2 ? t.uniforms[r] = {
        type: "v2",
        value: o.toArray()
      } : o && o.isVector3 ? t.uniforms[r] = {
        type: "v3",
        value: o.toArray()
      } : o && o.isVector4 ? t.uniforms[r] = {
        type: "v4",
        value: o.toArray()
      } : o && o.isMatrix3 ? t.uniforms[r] = {
        type: "m3",
        value: o.toArray()
      } : o && o.isMatrix4 ? t.uniforms[r] = {
        type: "m4",
        value: o.toArray()
      } : t.uniforms[r] = {
        value: o
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const i = {};
    for (const r in this.extensions)
      this.extensions[r] === !0 && (i[r] = !0);
    return Object.keys(i).length > 0 && (t.extensions = i), t;
  }
}
class lh extends Yt {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new yt(), this.projectionMatrix = new yt(), this.projectionMatrixInverse = new yt(), this.coordinateSystem = cs;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const fo = /* @__PURE__ */ new B(), Qw = /* @__PURE__ */ new _e(), $w = /* @__PURE__ */ new _e();
class Rn extends lh {
  constructor(e = 50, t = 1, i = 0.1, r = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = i, this.far = r, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = Cu * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(za * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return Cu * 2 * Math.atan(
      Math.tan(za * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
   */
  getViewBounds(e, t, i) {
    fo.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), t.set(fo.x, fo.y).multiplyScalar(-e / fo.z), fo.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), i.set(fo.x, fo.y).multiplyScalar(-e / fo.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   * Copies the result into the target Vector2, where x is width and y is height.
   */
  getViewSize(e, t) {
    return this.getViewBounds(e, Qw, $w), t.subVectors($w, Qw);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, i, r, s, o) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = i, this.view.offsetY = r, this.view.width = s, this.view.height = o, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(za * 0.5 * this.fov) / this.zoom, i = 2 * t, r = this.aspect * i, s = -0.5 * r;
    const o = this.view;
    if (this.view !== null && this.view.enabled) {
      const c = o.fullWidth, f = o.fullHeight;
      s += o.offsetX * r / c, t -= o.offsetY * i / f, r *= o.width / c, i *= o.height / f;
    }
    const a = this.filmOffset;
    a !== 0 && (s += e * a / this.getFilmWidth()), this.projectionMatrix.makePerspective(s, s + r, t, t - i, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const Ll = -90, Dl = 1;
class F2 extends Yt {
  constructor(e, t, i) {
    super(), this.type = "CubeCamera", this.renderTarget = i, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const r = new Rn(Ll, Dl, e, t);
    r.layers = this.layers, this.add(r);
    const s = new Rn(Ll, Dl, e, t);
    s.layers = this.layers, this.add(s);
    const o = new Rn(Ll, Dl, e, t);
    o.layers = this.layers, this.add(o);
    const a = new Rn(Ll, Dl, e, t);
    a.layers = this.layers, this.add(a);
    const c = new Rn(Ll, Dl, e, t);
    c.layers = this.layers, this.add(c);
    const f = new Rn(Ll, Dl, e, t);
    f.layers = this.layers, this.add(f);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [i, r, s, o, a, c] = t;
    for (const f of t)
      this.remove(f);
    if (e === cs)
      i.up.set(0, 1, 0), i.lookAt(1, 0, 0), r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), s.up.set(0, 0, -1), s.lookAt(0, 1, 0), o.up.set(0, 0, 1), o.lookAt(0, -1, 0), a.up.set(0, 1, 0), a.lookAt(0, 0, 1), c.up.set(0, 1, 0), c.lookAt(0, 0, -1);
    else if (e === kf)
      i.up.set(0, -1, 0), i.lookAt(-1, 0, 0), r.up.set(0, -1, 0), r.lookAt(1, 0, 0), s.up.set(0, 0, 1), s.lookAt(0, 1, 0), o.up.set(0, 0, -1), o.lookAt(0, -1, 0), a.up.set(0, -1, 0), a.lookAt(0, 0, 1), c.up.set(0, -1, 0), c.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const f of t)
      this.add(f), f.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: i, activeMipmapLevel: r } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [s, o, a, c, f, h] = this.children, d = e.getRenderTarget(), p = e.getActiveCubeFace(), v = e.getActiveMipmapLevel(), y = e.xr.enabled;
    e.xr.enabled = !1;
    const w = i.texture.generateMipmaps;
    i.texture.generateMipmaps = !1, e.setRenderTarget(i, 0, r), e.render(t, s), e.setRenderTarget(i, 1, r), e.render(t, o), e.setRenderTarget(i, 2, r), e.render(t, a), e.setRenderTarget(i, 3, r), e.render(t, c), e.setRenderTarget(i, 4, r), e.render(t, f), i.texture.generateMipmaps = w, e.setRenderTarget(i, 5, r), e.render(t, h), e.setRenderTarget(d, p, v), e.xr.enabled = y, i.texture.needsPMREMUpdate = !0;
  }
}
class uh extends Kt {
  constructor(e, t, i, r, s, o, a, c, f, h) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : vs, super(e, t, i, r, s, o, a, c, f, h), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class f1 extends ar {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const i = { width: e, height: e, depth: 1 }, r = [i, i, i, i, i, i];
    this.texture = new uh(r, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : $t;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const i = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, r = new Wo(5, 5, 5), s = new qi({
      name: "CubemapFromEquirect",
      uniforms: Ru(i.uniforms),
      vertexShader: i.vertexShader,
      fragmentShader: i.fragmentShader,
      side: Ci,
      blending: ps
    });
    s.uniforms.tEquirect.value = t;
    const o = new Sn(r, s), a = t.minFilter;
    return t.minFilter === us && (t.minFilter = $t), new F2(1, 10, this).update(e, o), t.minFilter = a, o.geometry.dispose(), o.material.dispose(), this;
  }
  clear(e, t, i, r) {
    const s = e.getRenderTarget();
    for (let o = 0; o < 6; o++)
      e.setRenderTarget(this, o), e.clear(t, i, r);
    e.setRenderTarget(s);
  }
}
const Yv = /* @__PURE__ */ new B(), sN = /* @__PURE__ */ new B(), oN = /* @__PURE__ */ new bt();
class Fs {
  constructor(e = new B(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, i, r) {
    return this.normal.set(e, t, i), this.constant = r, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, i) {
    const r = Yv.subVectors(i, t).cross(sN.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(r, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const i = e.delta(Yv), r = this.normal.dot(i);
    if (r === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const s = -(e.start.dot(this.normal) + this.constant) / r;
    return s < 0 || s > 1 ? null : t.copy(e.start).addScaledVector(i, s);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), i = this.distanceToPoint(e.end);
    return t < 0 && i > 0 || i < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const i = t || oN.getNormalMatrix(e), r = this.coplanarPoint(Yv).applyMatrix4(e), s = this.normal.applyMatrix3(i).normalize();
    return this.constant = -r.dot(s), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const la = /* @__PURE__ */ new gi(), Zd = /* @__PURE__ */ new B();
class ch {
  constructor(e = new Fs(), t = new Fs(), i = new Fs(), r = new Fs(), s = new Fs(), o = new Fs()) {
    this.planes = [e, t, i, r, s, o];
  }
  set(e, t, i, r, s, o) {
    const a = this.planes;
    return a[0].copy(e), a[1].copy(t), a[2].copy(i), a[3].copy(r), a[4].copy(s), a[5].copy(o), this;
  }
  copy(e) {
    const t = this.planes;
    for (let i = 0; i < 6; i++)
      t[i].copy(e.planes[i]);
    return this;
  }
  setFromProjectionMatrix(e, t = cs) {
    const i = this.planes, r = e.elements, s = r[0], o = r[1], a = r[2], c = r[3], f = r[4], h = r[5], d = r[6], p = r[7], v = r[8], y = r[9], w = r[10], x = r[11], g = r[12], S = r[13], M = r[14], T = r[15];
    if (i[0].setComponents(c - s, p - f, x - v, T - g).normalize(), i[1].setComponents(c + s, p + f, x + v, T + g).normalize(), i[2].setComponents(c + o, p + h, x + y, T + S).normalize(), i[3].setComponents(c - o, p - h, x - y, T - S).normalize(), i[4].setComponents(c - a, p - d, x - w, T - M).normalize(), t === cs)
      i[5].setComponents(c + a, p + d, x + w, T + M).normalize();
    else if (t === kf)
      i[5].setComponents(a, d, w, M).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), la.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), la.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(la);
  }
  intersectsSprite(e) {
    return la.center.set(0, 0, 0), la.radius = 0.7071067811865476, la.applyMatrix4(e.matrixWorld), this.intersectsSphere(la);
  }
  intersectsSphere(e) {
    const t = this.planes, i = e.center, r = -e.radius;
    for (let s = 0; s < 6; s++)
      if (t[s].distanceToPoint(i) < r)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let i = 0; i < 6; i++) {
      const r = t[i];
      if (Zd.x = r.normal.x > 0 ? e.max.x : e.min.x, Zd.y = r.normal.y > 0 ? e.max.y : e.min.y, Zd.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(Zd) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let i = 0; i < 6; i++)
      if (t[i].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function k2() {
  let n = null, e = !1, t = null, i = null;
  function r(s, o) {
    t(s, o), i = n.requestAnimationFrame(r);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (i = n.requestAnimationFrame(r), e = !0);
    },
    stop: function() {
      n.cancelAnimationFrame(i), e = !1;
    },
    setAnimationLoop: function(s) {
      t = s;
    },
    setContext: function(s) {
      n = s;
    }
  };
}
function aN(n) {
  const e = /* @__PURE__ */ new WeakMap();
  function t(a, c) {
    const f = a.array, h = a.usage, d = f.byteLength, p = n.createBuffer();
    n.bindBuffer(c, p), n.bufferData(c, f, h), a.onUploadCallback();
    let v;
    if (f instanceof Float32Array)
      v = n.FLOAT;
    else if (f instanceof Uint16Array)
      a.isFloat16BufferAttribute ? v = n.HALF_FLOAT : v = n.UNSIGNED_SHORT;
    else if (f instanceof Int16Array)
      v = n.SHORT;
    else if (f instanceof Uint32Array)
      v = n.UNSIGNED_INT;
    else if (f instanceof Int32Array)
      v = n.INT;
    else if (f instanceof Int8Array)
      v = n.BYTE;
    else if (f instanceof Uint8Array)
      v = n.UNSIGNED_BYTE;
    else if (f instanceof Uint8ClampedArray)
      v = n.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + f);
    return {
      buffer: p,
      type: v,
      bytesPerElement: f.BYTES_PER_ELEMENT,
      version: a.version,
      size: d
    };
  }
  function i(a, c, f) {
    const h = c.array, d = c._updateRange, p = c.updateRanges;
    if (n.bindBuffer(f, a), d.count === -1 && p.length === 0 && n.bufferSubData(f, 0, h), p.length !== 0) {
      for (let v = 0, y = p.length; v < y; v++) {
        const w = p[v];
        n.bufferSubData(
          f,
          w.start * h.BYTES_PER_ELEMENT,
          h,
          w.start,
          w.count
        );
      }
      c.clearUpdateRanges();
    }
    d.count !== -1 && (n.bufferSubData(
      f,
      d.offset * h.BYTES_PER_ELEMENT,
      h,
      d.offset,
      d.count
    ), d.count = -1), c.onUploadCallback();
  }
  function r(a) {
    return a.isInterleavedBufferAttribute && (a = a.data), e.get(a);
  }
  function s(a) {
    a.isInterleavedBufferAttribute && (a = a.data);
    const c = e.get(a);
    c && (n.deleteBuffer(c.buffer), e.delete(a));
  }
  function o(a, c) {
    if (a.isGLBufferAttribute) {
      const h = e.get(a);
      (!h || h.version < a.version) && e.set(a, {
        buffer: a.buffer,
        type: a.type,
        bytesPerElement: a.elementSize,
        version: a.version
      });
      return;
    }
    a.isInterleavedBufferAttribute && (a = a.data);
    const f = e.get(a);
    if (f === void 0)
      e.set(a, t(a, c));
    else if (f.version < a.version) {
      if (f.size !== a.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      i(f.buffer, a, c), f.version = a.version;
    }
  }
  return {
    get: r,
    remove: s,
    update: o
  };
}
class Xo extends Dt {
  constructor(e = 1, t = 1, i = 1, r = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: i,
      heightSegments: r
    };
    const s = e / 2, o = t / 2, a = Math.floor(i), c = Math.floor(r), f = a + 1, h = c + 1, d = e / a, p = t / c, v = [], y = [], w = [], x = [];
    for (let g = 0; g < h; g++) {
      const S = g * p - o;
      for (let M = 0; M < f; M++) {
        const T = M * d - s;
        y.push(T, -S, 0), w.push(0, 0, 1), x.push(M / a), x.push(1 - g / c);
      }
    }
    for (let g = 0; g < c; g++)
      for (let S = 0; S < a; S++) {
        const M = S + f * g, T = S + f * (g + 1), U = S + 1 + f * (g + 1), P = S + 1 + f * g;
        v.push(M, T, P), v.push(T, U, P);
      }
    this.setIndex(v), this.setAttribute("position", new rt(y, 3)), this.setAttribute("normal", new rt(w, 3)), this.setAttribute("uv", new rt(x, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Xo(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var lN = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, uN = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, cN = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, fN = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, hN = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, dN = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, pN = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, mN = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, gN = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, vN = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, yN = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, _N = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, xN = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, SN = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, MN = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, wN = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, EN = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, TN = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, AN = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, CN = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, RN = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, bN = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, PN = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, IN = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, LN = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, DN = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, NN = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, UN = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, ON = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, FN = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, kN = "gl_FragColor = linearToOutputTexel( gl_FragColor );", zN = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`, BN = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, HN = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, VN = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, GN = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, WN = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, XN = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, YN = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, qN = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, jN = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, ZN = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, KN = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, JN = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, QN = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, $N = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, eU = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, tU = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, nU = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, iU = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, rU = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, sU = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, oU = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, aU = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, lU = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, uU = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, cU = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, fU = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, hU = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, dU = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, pU = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, mU = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, gU = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, vU = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, yU = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, _U = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, xU = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, SU = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, MU = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, wU = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, EU = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, TU = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, AU = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, CU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, RU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, bU = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, PU = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, IU = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, LU = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, DU = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, NU = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, UU = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, OU = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, FU = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, kU = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, zU = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, BU = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, HU = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, VU = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, GU = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, WU = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, XU = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, YU = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, qU = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, jU = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, ZU = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, KU = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, JU = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, QU = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, $U = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, eO = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, tO = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, nO = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, iO = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, rO = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, sO = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, oO = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const aO = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, lO = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, uO = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, cO = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, fO = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, hO = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, dO = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, pO = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, mO = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, gO = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, vO = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, yO = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, _O = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, xO = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, SO = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, MO = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, wO = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, EO = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, TO = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, AO = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, CO = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, RO = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, bO = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, PO = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, IO = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, LO = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, DO = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, NO = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, UO = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, OO = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, FO = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, kO = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, zO = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, BO = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, Lt = {
  alphahash_fragment: lN,
  alphahash_pars_fragment: uN,
  alphamap_fragment: cN,
  alphamap_pars_fragment: fN,
  alphatest_fragment: hN,
  alphatest_pars_fragment: dN,
  aomap_fragment: pN,
  aomap_pars_fragment: mN,
  batching_pars_vertex: gN,
  batching_vertex: vN,
  begin_vertex: yN,
  beginnormal_vertex: _N,
  bsdfs: xN,
  iridescence_fragment: SN,
  bumpmap_pars_fragment: MN,
  clipping_planes_fragment: wN,
  clipping_planes_pars_fragment: EN,
  clipping_planes_pars_vertex: TN,
  clipping_planes_vertex: AN,
  color_fragment: CN,
  color_pars_fragment: RN,
  color_pars_vertex: bN,
  color_vertex: PN,
  common: IN,
  cube_uv_reflection_fragment: LN,
  defaultnormal_vertex: DN,
  displacementmap_pars_vertex: NN,
  displacementmap_vertex: UN,
  emissivemap_fragment: ON,
  emissivemap_pars_fragment: FN,
  colorspace_fragment: kN,
  colorspace_pars_fragment: zN,
  envmap_fragment: BN,
  envmap_common_pars_fragment: HN,
  envmap_pars_fragment: VN,
  envmap_pars_vertex: GN,
  envmap_physical_pars_fragment: eU,
  envmap_vertex: WN,
  fog_vertex: XN,
  fog_pars_vertex: YN,
  fog_fragment: qN,
  fog_pars_fragment: jN,
  gradientmap_pars_fragment: ZN,
  lightmap_pars_fragment: KN,
  lights_lambert_fragment: JN,
  lights_lambert_pars_fragment: QN,
  lights_pars_begin: $N,
  lights_toon_fragment: tU,
  lights_toon_pars_fragment: nU,
  lights_phong_fragment: iU,
  lights_phong_pars_fragment: rU,
  lights_physical_fragment: sU,
  lights_physical_pars_fragment: oU,
  lights_fragment_begin: aU,
  lights_fragment_maps: lU,
  lights_fragment_end: uU,
  logdepthbuf_fragment: cU,
  logdepthbuf_pars_fragment: fU,
  logdepthbuf_pars_vertex: hU,
  logdepthbuf_vertex: dU,
  map_fragment: pU,
  map_pars_fragment: mU,
  map_particle_fragment: gU,
  map_particle_pars_fragment: vU,
  metalnessmap_fragment: yU,
  metalnessmap_pars_fragment: _U,
  morphinstance_vertex: xU,
  morphcolor_vertex: SU,
  morphnormal_vertex: MU,
  morphtarget_pars_vertex: wU,
  morphtarget_vertex: EU,
  normal_fragment_begin: TU,
  normal_fragment_maps: AU,
  normal_pars_fragment: CU,
  normal_pars_vertex: RU,
  normal_vertex: bU,
  normalmap_pars_fragment: PU,
  clearcoat_normal_fragment_begin: IU,
  clearcoat_normal_fragment_maps: LU,
  clearcoat_pars_fragment: DU,
  iridescence_pars_fragment: NU,
  opaque_fragment: UU,
  packing: OU,
  premultiplied_alpha_fragment: FU,
  project_vertex: kU,
  dithering_fragment: zU,
  dithering_pars_fragment: BU,
  roughnessmap_fragment: HU,
  roughnessmap_pars_fragment: VU,
  shadowmap_pars_fragment: GU,
  shadowmap_pars_vertex: WU,
  shadowmap_vertex: XU,
  shadowmask_pars_fragment: YU,
  skinbase_vertex: qU,
  skinning_pars_vertex: jU,
  skinning_vertex: ZU,
  skinnormal_vertex: KU,
  specularmap_fragment: JU,
  specularmap_pars_fragment: QU,
  tonemapping_fragment: $U,
  tonemapping_pars_fragment: eO,
  transmission_fragment: tO,
  transmission_pars_fragment: nO,
  uv_pars_fragment: iO,
  uv_pars_vertex: rO,
  uv_vertex: sO,
  worldpos_vertex: oO,
  background_vert: aO,
  background_frag: lO,
  backgroundCube_vert: uO,
  backgroundCube_frag: cO,
  cube_vert: fO,
  cube_frag: hO,
  depth_vert: dO,
  depth_frag: pO,
  distanceRGBA_vert: mO,
  distanceRGBA_frag: gO,
  equirect_vert: vO,
  equirect_frag: yO,
  linedashed_vert: _O,
  linedashed_frag: xO,
  meshbasic_vert: SO,
  meshbasic_frag: MO,
  meshlambert_vert: wO,
  meshlambert_frag: EO,
  meshmatcap_vert: TO,
  meshmatcap_frag: AO,
  meshnormal_vert: CO,
  meshnormal_frag: RO,
  meshphong_vert: bO,
  meshphong_frag: PO,
  meshphysical_vert: IO,
  meshphysical_frag: LO,
  meshtoon_vert: DO,
  meshtoon_frag: NO,
  points_vert: UO,
  points_frag: OO,
  shadow_vert: FO,
  shadow_frag: kO,
  sprite_vert: zO,
  sprite_frag: BO
}, qe = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Qe(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new bt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new bt() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new bt() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new bt() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new bt() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new bt() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new bt() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new bt() },
    normalScale: { value: /* @__PURE__ */ new _e(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new bt() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new bt() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new bt() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new bt() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Qe(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Qe(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new bt() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new bt() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Qe(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new _e(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new bt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new bt() },
    alphaTest: { value: 0 }
  }
}, Gr = {
  basic: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.specularmap,
      qe.envmap,
      qe.aomap,
      qe.lightmap,
      qe.fog
    ]),
    vertexShader: Lt.meshbasic_vert,
    fragmentShader: Lt.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.specularmap,
      qe.envmap,
      qe.aomap,
      qe.lightmap,
      qe.emissivemap,
      qe.bumpmap,
      qe.normalmap,
      qe.displacementmap,
      qe.fog,
      qe.lights,
      {
        emissive: { value: /* @__PURE__ */ new Qe(0) }
      }
    ]),
    vertexShader: Lt.meshlambert_vert,
    fragmentShader: Lt.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.specularmap,
      qe.envmap,
      qe.aomap,
      qe.lightmap,
      qe.emissivemap,
      qe.bumpmap,
      qe.normalmap,
      qe.displacementmap,
      qe.fog,
      qe.lights,
      {
        emissive: { value: /* @__PURE__ */ new Qe(0) },
        specular: { value: /* @__PURE__ */ new Qe(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: Lt.meshphong_vert,
    fragmentShader: Lt.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.envmap,
      qe.aomap,
      qe.lightmap,
      qe.emissivemap,
      qe.bumpmap,
      qe.normalmap,
      qe.displacementmap,
      qe.roughnessmap,
      qe.metalnessmap,
      qe.fog,
      qe.lights,
      {
        emissive: { value: /* @__PURE__ */ new Qe(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: Lt.meshphysical_vert,
    fragmentShader: Lt.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.aomap,
      qe.lightmap,
      qe.emissivemap,
      qe.bumpmap,
      qe.normalmap,
      qe.displacementmap,
      qe.gradientmap,
      qe.fog,
      qe.lights,
      {
        emissive: { value: /* @__PURE__ */ new Qe(0) }
      }
    ]),
    vertexShader: Lt.meshtoon_vert,
    fragmentShader: Lt.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.bumpmap,
      qe.normalmap,
      qe.displacementmap,
      qe.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: Lt.meshmatcap_vert,
    fragmentShader: Lt.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Mi([
      qe.points,
      qe.fog
    ]),
    vertexShader: Lt.points_vert,
    fragmentShader: Lt.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: Lt.linedashed_vert,
    fragmentShader: Lt.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.displacementmap
    ]),
    vertexShader: Lt.depth_vert,
    fragmentShader: Lt.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.bumpmap,
      qe.normalmap,
      qe.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Lt.meshnormal_vert,
    fragmentShader: Lt.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Mi([
      qe.sprite,
      qe.fog
    ]),
    vertexShader: Lt.sprite_vert,
    fragmentShader: Lt.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new bt() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: Lt.background_vert,
    fragmentShader: Lt.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new bt() }
    },
    vertexShader: Lt.backgroundCube_vert,
    fragmentShader: Lt.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: Lt.cube_vert,
    fragmentShader: Lt.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: Lt.equirect_vert,
    fragmentShader: Lt.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Mi([
      qe.common,
      qe.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new B() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: Lt.distanceRGBA_vert,
    fragmentShader: Lt.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Mi([
      qe.lights,
      qe.fog,
      {
        color: { value: /* @__PURE__ */ new Qe(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Lt.shadow_vert,
    fragmentShader: Lt.shadow_frag
  }
};
Gr.physical = {
  uniforms: /* @__PURE__ */ Mi([
    Gr.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new bt() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new bt() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new _e(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new bt() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new bt() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new bt() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Qe(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new bt() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new bt() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new bt() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new _e() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new bt() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Qe(0) },
      specularColor: { value: /* @__PURE__ */ new Qe(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new bt() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new bt() },
      anisotropyVector: { value: /* @__PURE__ */ new _e() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new bt() }
    }
  ]),
  vertexShader: Lt.meshphysical_vert,
  fragmentShader: Lt.meshphysical_frag
};
const Kd = { r: 0, b: 0, g: 0 }, ua = /* @__PURE__ */ new bi(), HO = /* @__PURE__ */ new yt();
function VO(n, e, t, i, r, s, o) {
  const a = new Qe(0);
  let c = s === !0 ? 0 : 1, f, h, d = null, p = 0, v = null;
  function y(S) {
    let M = S.isScene === !0 ? S.background : null;
    return M && M.isTexture && (M = (S.backgroundBlurriness > 0 ? t : e).get(M)), M;
  }
  function w(S) {
    let M = !1;
    const T = y(S);
    T === null ? g(a, c) : T && T.isColor && (g(T, 1), M = !0);
    const U = n.xr.getEnvironmentBlendMode();
    U === "additive" ? i.buffers.color.setClear(0, 0, 0, 1, o) : U === "alpha-blend" && i.buffers.color.setClear(0, 0, 0, 0, o), (n.autoClear || M) && (i.buffers.depth.setTest(!0), i.buffers.depth.setMask(!0), i.buffers.color.setMask(!0), n.clear(n.autoClearColor, n.autoClearDepth, n.autoClearStencil));
  }
  function x(S, M) {
    const T = y(M);
    T && (T.isCubeTexture || T.mapping === Uu) ? (h === void 0 && (h = new Sn(
      new Wo(1, 1, 1),
      new qi({
        name: "BackgroundCubeMaterial",
        uniforms: Ru(Gr.backgroundCube.uniforms),
        vertexShader: Gr.backgroundCube.vertexShader,
        fragmentShader: Gr.backgroundCube.fragmentShader,
        side: Ci,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), h.geometry.deleteAttribute("normal"), h.geometry.deleteAttribute("uv"), h.onBeforeRender = function(U, P, D) {
      this.matrixWorld.copyPosition(D.matrixWorld);
    }, Object.defineProperty(h.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), r.update(h)), ua.copy(M.backgroundRotation), ua.x *= -1, ua.y *= -1, ua.z *= -1, T.isCubeTexture && T.isRenderTargetTexture === !1 && (ua.y *= -1, ua.z *= -1), h.material.uniforms.envMap.value = T, h.material.uniforms.flipEnvMap.value = T.isCubeTexture && T.isRenderTargetTexture === !1 ? -1 : 1, h.material.uniforms.backgroundBlurriness.value = M.backgroundBlurriness, h.material.uniforms.backgroundIntensity.value = M.backgroundIntensity, h.material.uniforms.backgroundRotation.value.setFromMatrix4(HO.makeRotationFromEuler(ua)), h.material.toneMapped = Jt.getTransfer(T.colorSpace) !== an, (d !== T || p !== T.version || v !== n.toneMapping) && (h.material.needsUpdate = !0, d = T, p = T.version, v = n.toneMapping), h.layers.enableAll(), S.unshift(h, h.geometry, h.material, 0, 0, null)) : T && T.isTexture && (f === void 0 && (f = new Sn(
      new Xo(2, 2),
      new qi({
        name: "BackgroundMaterial",
        uniforms: Ru(Gr.background.uniforms),
        vertexShader: Gr.background.vertexShader,
        fragmentShader: Gr.background.fragmentShader,
        side: js,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), f.geometry.deleteAttribute("normal"), Object.defineProperty(f.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), r.update(f)), f.material.uniforms.t2D.value = T, f.material.uniforms.backgroundIntensity.value = M.backgroundIntensity, f.material.toneMapped = Jt.getTransfer(T.colorSpace) !== an, T.matrixAutoUpdate === !0 && T.updateMatrix(), f.material.uniforms.uvTransform.value.copy(T.matrix), (d !== T || p !== T.version || v !== n.toneMapping) && (f.material.needsUpdate = !0, d = T, p = T.version, v = n.toneMapping), f.layers.enableAll(), S.unshift(f, f.geometry, f.material, 0, 0, null));
  }
  function g(S, M) {
    S.getRGB(Kd, U2(n)), i.buffers.color.setClear(Kd.r, Kd.g, Kd.b, M, o);
  }
  return {
    getClearColor: function() {
      return a;
    },
    setClearColor: function(S, M = 1) {
      a.set(S), c = M, g(a, c);
    },
    getClearAlpha: function() {
      return c;
    },
    setClearAlpha: function(S) {
      c = S, g(a, c);
    },
    render: w,
    addToRenderList: x
  };
}
function GO(n, e) {
  const t = n.getParameter(n.MAX_VERTEX_ATTRIBS), i = {}, r = p(null);
  let s = r, o = !1;
  function a(A, N, G, W, j) {
    let Q = !1;
    const J = d(W, G, N);
    s !== J && (s = J, f(s.object)), Q = v(A, W, G, j), Q && y(A, W, G, j), j !== null && e.update(j, n.ELEMENT_ARRAY_BUFFER), (Q || o) && (o = !1, T(A, N, G, W), j !== null && n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e.get(j).buffer));
  }
  function c() {
    return n.createVertexArray();
  }
  function f(A) {
    return n.bindVertexArray(A);
  }
  function h(A) {
    return n.deleteVertexArray(A);
  }
  function d(A, N, G) {
    const W = G.wireframe === !0;
    let j = i[A.id];
    j === void 0 && (j = {}, i[A.id] = j);
    let Q = j[N.id];
    Q === void 0 && (Q = {}, j[N.id] = Q);
    let J = Q[W];
    return J === void 0 && (J = p(c()), Q[W] = J), J;
  }
  function p(A) {
    const N = [], G = [], W = [];
    for (let j = 0; j < t; j++)
      N[j] = 0, G[j] = 0, W[j] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: N,
      enabledAttributes: G,
      attributeDivisors: W,
      object: A,
      attributes: {},
      index: null
    };
  }
  function v(A, N, G, W) {
    const j = s.attributes, Q = N.attributes;
    let J = 0;
    const oe = G.getAttributes();
    for (const z in oe)
      if (oe[z].location >= 0) {
        const ne = j[z];
        let he = Q[z];
        if (he === void 0 && (z === "instanceMatrix" && A.instanceMatrix && (he = A.instanceMatrix), z === "instanceColor" && A.instanceColor && (he = A.instanceColor)), ne === void 0 || ne.attribute !== he || he && ne.data !== he.data)
          return !0;
        J++;
      }
    return s.attributesNum !== J || s.index !== W;
  }
  function y(A, N, G, W) {
    const j = {}, Q = N.attributes;
    let J = 0;
    const oe = G.getAttributes();
    for (const z in oe)
      if (oe[z].location >= 0) {
        let ne = Q[z];
        ne === void 0 && (z === "instanceMatrix" && A.instanceMatrix && (ne = A.instanceMatrix), z === "instanceColor" && A.instanceColor && (ne = A.instanceColor));
        const he = {};
        he.attribute = ne, ne && ne.data && (he.data = ne.data), j[z] = he, J++;
      }
    s.attributes = j, s.attributesNum = J, s.index = W;
  }
  function w() {
    const A = s.newAttributes;
    for (let N = 0, G = A.length; N < G; N++)
      A[N] = 0;
  }
  function x(A) {
    g(A, 0);
  }
  function g(A, N) {
    const G = s.newAttributes, W = s.enabledAttributes, j = s.attributeDivisors;
    G[A] = 1, W[A] === 0 && (n.enableVertexAttribArray(A), W[A] = 1), j[A] !== N && (n.vertexAttribDivisor(A, N), j[A] = N);
  }
  function S() {
    const A = s.newAttributes, N = s.enabledAttributes;
    for (let G = 0, W = N.length; G < W; G++)
      N[G] !== A[G] && (n.disableVertexAttribArray(G), N[G] = 0);
  }
  function M(A, N, G, W, j, Q, J) {
    J === !0 ? n.vertexAttribIPointer(A, N, G, j, Q) : n.vertexAttribPointer(A, N, G, W, j, Q);
  }
  function T(A, N, G, W) {
    w();
    const j = W.attributes, Q = G.getAttributes(), J = N.defaultAttributeValues;
    for (const oe in Q) {
      const z = Q[oe];
      if (z.location >= 0) {
        let te = j[oe];
        if (te === void 0 && (oe === "instanceMatrix" && A.instanceMatrix && (te = A.instanceMatrix), oe === "instanceColor" && A.instanceColor && (te = A.instanceColor)), te !== void 0) {
          const ne = te.normalized, he = te.itemSize, Se = e.get(te);
          if (Se === void 0)
            continue;
          const ke = Se.buffer, ce = Se.type, we = Se.bytesPerElement, Ee = ce === n.INT || ce === n.UNSIGNED_INT || te.gpuType === rh;
          if (te.isInterleavedBufferAttribute) {
            const De = te.data, st = De.stride, Mt = te.offset;
            if (De.isInstancedInterleavedBuffer) {
              for (let dt = 0; dt < z.locationSize; dt++)
                g(z.location + dt, De.meshPerAttribute);
              A.isInstancedMesh !== !0 && W._maxInstanceCount === void 0 && (W._maxInstanceCount = De.meshPerAttribute * De.count);
            } else
              for (let dt = 0; dt < z.locationSize; dt++)
                x(z.location + dt);
            n.bindBuffer(n.ARRAY_BUFFER, ke);
            for (let dt = 0; dt < z.locationSize; dt++)
              M(
                z.location + dt,
                he / z.locationSize,
                ce,
                ne,
                st * we,
                (Mt + he / z.locationSize * dt) * we,
                Ee
              );
          } else {
            if (te.isInstancedBufferAttribute) {
              for (let De = 0; De < z.locationSize; De++)
                g(z.location + De, te.meshPerAttribute);
              A.isInstancedMesh !== !0 && W._maxInstanceCount === void 0 && (W._maxInstanceCount = te.meshPerAttribute * te.count);
            } else
              for (let De = 0; De < z.locationSize; De++)
                x(z.location + De);
            n.bindBuffer(n.ARRAY_BUFFER, ke);
            for (let De = 0; De < z.locationSize; De++)
              M(
                z.location + De,
                he / z.locationSize,
                ce,
                ne,
                he * we,
                he / z.locationSize * De * we,
                Ee
              );
          }
        } else if (J !== void 0) {
          const ne = J[oe];
          if (ne !== void 0)
            switch (ne.length) {
              case 2:
                n.vertexAttrib2fv(z.location, ne);
                break;
              case 3:
                n.vertexAttrib3fv(z.location, ne);
                break;
              case 4:
                n.vertexAttrib4fv(z.location, ne);
                break;
              default:
                n.vertexAttrib1fv(z.location, ne);
            }
        }
      }
    }
    S();
  }
  function U() {
    R();
    for (const A in i) {
      const N = i[A];
      for (const G in N) {
        const W = N[G];
        for (const j in W)
          h(W[j].object), delete W[j];
        delete N[G];
      }
      delete i[A];
    }
  }
  function P(A) {
    if (i[A.id] === void 0)
      return;
    const N = i[A.id];
    for (const G in N) {
      const W = N[G];
      for (const j in W)
        h(W[j].object), delete W[j];
      delete N[G];
    }
    delete i[A.id];
  }
  function D(A) {
    for (const N in i) {
      const G = i[N];
      if (G[A.id] === void 0)
        continue;
      const W = G[A.id];
      for (const j in W)
        h(W[j].object), delete W[j];
      delete G[A.id];
    }
  }
  function R() {
    C(), o = !0, s !== r && (s = r, f(s.object));
  }
  function C() {
    r.geometry = null, r.program = null, r.wireframe = !1;
  }
  return {
    setup: a,
    reset: R,
    resetDefaultState: C,
    dispose: U,
    releaseStatesOfGeometry: P,
    releaseStatesOfProgram: D,
    initAttributes: w,
    enableAttribute: x,
    disableUnusedAttributes: S
  };
}
function WO(n, e, t) {
  let i;
  function r(f) {
    i = f;
  }
  function s(f, h) {
    n.drawArrays(i, f, h), t.update(h, i, 1);
  }
  function o(f, h, d) {
    d !== 0 && (n.drawArraysInstanced(i, f, h, d), t.update(h, i, d));
  }
  function a(f, h, d) {
    if (d === 0)
      return;
    e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i, f, 0, h, 0, d);
    let v = 0;
    for (let y = 0; y < d; y++)
      v += h[y];
    t.update(v, i, 1);
  }
  function c(f, h, d, p) {
    if (d === 0)
      return;
    const v = e.get("WEBGL_multi_draw");
    if (v === null)
      for (let y = 0; y < f.length; y++)
        o(f[y], h[y], p[y]);
    else {
      v.multiDrawArraysInstancedWEBGL(i, f, 0, h, 0, p, 0, d);
      let y = 0;
      for (let w = 0; w < d; w++)
        y += h[w];
      for (let w = 0; w < p.length; w++)
        t.update(y, i, p[w]);
    }
  }
  this.setMode = r, this.render = s, this.renderInstances = o, this.renderMultiDraw = a, this.renderMultiDrawInstances = c;
}
function XO(n, e, t, i) {
  let r;
  function s() {
    if (r !== void 0)
      return r;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const P = e.get("EXT_texture_filter_anisotropic");
      r = n.getParameter(P.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      r = 0;
    return r;
  }
  function o(P) {
    return !(P !== Ln && i.convert(P) !== n.getParameter(n.IMPLEMENTATION_COLOR_READ_FORMAT));
  }
  function a(P) {
    const D = P === $n && (e.has("EXT_color_buffer_half_float") || e.has("EXT_color_buffer_float"));
    return !(P !== Yi && i.convert(P) !== n.getParameter(n.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    P !== xn && !D);
  }
  function c(P) {
    if (P === "highp") {
      if (n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.HIGH_FLOAT).precision > 0 && n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.HIGH_FLOAT).precision > 0)
        return "highp";
      P = "mediump";
    }
    return P === "mediump" && n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.MEDIUM_FLOAT).precision > 0 && n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  let f = t.precision !== void 0 ? t.precision : "highp";
  const h = c(f);
  h !== f && (console.warn("THREE.WebGLRenderer:", f, "not supported, using", h, "instead."), f = h);
  const d = t.logarithmicDepthBuffer === !0, p = n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS), v = n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS), y = n.getParameter(n.MAX_TEXTURE_SIZE), w = n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE), x = n.getParameter(n.MAX_VERTEX_ATTRIBS), g = n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS), S = n.getParameter(n.MAX_VARYING_VECTORS), M = n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS), T = v > 0, U = n.getParameter(n.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    // keeping this for backwards compatibility
    getMaxAnisotropy: s,
    getMaxPrecision: c,
    textureFormatReadable: o,
    textureTypeReadable: a,
    precision: f,
    logarithmicDepthBuffer: d,
    maxTextures: p,
    maxVertexTextures: v,
    maxTextureSize: y,
    maxCubemapSize: w,
    maxAttributes: x,
    maxVertexUniforms: g,
    maxVaryings: S,
    maxFragmentUniforms: M,
    vertexTextures: T,
    maxSamples: U
  };
}
function YO(n) {
  const e = this;
  let t = null, i = 0, r = !1, s = !1;
  const o = new Fs(), a = new bt(), c = { value: null, needsUpdate: !1 };
  this.uniform = c, this.numPlanes = 0, this.numIntersection = 0, this.init = function(d, p) {
    const v = d.length !== 0 || p || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    i !== 0 || r;
    return r = p, i = d.length, v;
  }, this.beginShadows = function() {
    s = !0, h(null);
  }, this.endShadows = function() {
    s = !1;
  }, this.setGlobalState = function(d, p) {
    t = h(d, p, 0);
  }, this.setState = function(d, p, v) {
    const y = d.clippingPlanes, w = d.clipIntersection, x = d.clipShadows, g = n.get(d);
    if (!r || y === null || y.length === 0 || s && !x)
      s ? h(null) : f();
    else {
      const S = s ? 0 : i, M = S * 4;
      let T = g.clippingState || null;
      c.value = T, T = h(y, p, M, v);
      for (let U = 0; U !== M; ++U)
        T[U] = t[U];
      g.clippingState = T, this.numIntersection = w ? this.numPlanes : 0, this.numPlanes += S;
    }
  };
  function f() {
    c.value !== t && (c.value = t, c.needsUpdate = i > 0), e.numPlanes = i, e.numIntersection = 0;
  }
  function h(d, p, v, y) {
    const w = d !== null ? d.length : 0;
    let x = null;
    if (w !== 0) {
      if (x = c.value, y !== !0 || x === null) {
        const g = v + w * 4, S = p.matrixWorldInverse;
        a.getNormalMatrix(S), (x === null || x.length < g) && (x = new Float32Array(g));
        for (let M = 0, T = v; M !== w; ++M, T += 4)
          o.copy(d[M]).applyMatrix4(S, a), o.normal.toArray(x, T), x[T + 3] = o.constant;
      }
      c.value = x, c.needsUpdate = !0;
    }
    return e.numPlanes = w, e.numIntersection = 0, x;
  }
}
function qO(n) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(o, a) {
    return a === Tu ? o.mapping = vs : a === bf && (o.mapping = ko), o;
  }
  function i(o) {
    if (o && o.isTexture) {
      const a = o.mapping;
      if (a === Tu || a === bf)
        if (e.has(o)) {
          const c = e.get(o).texture;
          return t(c, o.mapping);
        } else {
          const c = o.image;
          if (c && c.height > 0) {
            const f = new f1(c.height);
            return f.fromEquirectangularTexture(n, o), e.set(o, f), o.addEventListener("dispose", r), t(f.texture, o.mapping);
          } else
            return null;
        }
    }
    return o;
  }
  function r(o) {
    const a = o.target;
    a.removeEventListener("dispose", r);
    const c = e.get(a);
    c !== void 0 && (e.delete(a), c.dispose());
  }
  function s() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: i,
    dispose: s
  };
}
class fs extends lh {
  constructor(e = -1, t = 1, i = 1, r = -1, s = 0.1, o = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = i, this.bottom = r, this.near = s, this.far = o, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, i, r, s, o) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = i, this.view.offsetY = r, this.view.width = s, this.view.height = o, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), i = (this.right + this.left) / 2, r = (this.top + this.bottom) / 2;
    let s = i - e, o = i + e, a = r + t, c = r - t;
    if (this.view !== null && this.view.enabled) {
      const f = (this.right - this.left) / this.view.fullWidth / this.zoom, h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      s += f * this.view.offsetX, o = s + f * this.view.width, a -= h * this.view.offsetY, c = a - h * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(s, o, a, c, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const ou = 4, eE = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], Ta = 20, qv = /* @__PURE__ */ new fs(), tE = /* @__PURE__ */ new Qe();
let jv = null, Zv = 0, Kv = 0, Jv = !1;
const Ea = (1 + Math.sqrt(5)) / 2, Nl = 1 / Ea, nE = [
  /* @__PURE__ */ new B(-Ea, Nl, 0),
  /* @__PURE__ */ new B(Ea, Nl, 0),
  /* @__PURE__ */ new B(-Nl, 0, Ea),
  /* @__PURE__ */ new B(Nl, 0, Ea),
  /* @__PURE__ */ new B(0, Ea, -Nl),
  /* @__PURE__ */ new B(0, Ea, Nl),
  /* @__PURE__ */ new B(-1, 1, -1),
  /* @__PURE__ */ new B(1, 1, -1),
  /* @__PURE__ */ new B(-1, 1, 1),
  /* @__PURE__ */ new B(1, 1, 1)
];
class N_ {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, i = 0.1, r = 100) {
    jv = this._renderer.getRenderTarget(), Zv = this._renderer.getActiveCubeFace(), Kv = this._renderer.getActiveMipmapLevel(), Jv = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(256);
    const s = this._allocateTargets();
    return s.depthBuffer = !0, this._sceneToCubeUV(e, i, r, s), t > 0 && this._blur(s, 0, 0, t), this._applyPMREM(s), this._cleanup(s), s;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported equirectangular image size is 64 x 32.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported cube size is 16 x 16.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = sE(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = rE(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(jv, Zv, Kv), this._renderer.xr.enabled = Jv, e.scissorTest = !1, Jd(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === vs || e.mapping === ko ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), jv = this._renderer.getRenderTarget(), Zv = this._renderer.getActiveCubeFace(), Kv = this._renderer.getActiveMipmapLevel(), Jv = this._renderer.xr.enabled, this._renderer.xr.enabled = !1;
    const i = t || this._allocateTargets();
    return this._textureToCubeUV(e, i), this._applyPMREM(i), this._cleanup(i), i;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, i = {
      magFilter: $t,
      minFilter: $t,
      generateMipmaps: !1,
      type: $n,
      format: Ln,
      colorSpace: br,
      depthBuffer: !1
    }, r = iE(e, t, i);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = iE(e, t, i);
      const { _lodMax: s } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = jO(s)), this._blurMaterial = ZO(s, e, t);
    }
    return r;
  }
  _compileMaterial(e) {
    const t = new Sn(this._lodPlanes[0], e);
    this._renderer.compile(t, qv);
  }
  _sceneToCubeUV(e, t, i, r) {
    const a = new Rn(90, 1, t, i), c = [1, -1, 1, 1, 1, 1], f = [1, 1, 1, -1, -1, -1], h = this._renderer, d = h.autoClear, p = h.toneMapping;
    h.getClearColor(tE), h.toneMapping = ms, h.autoClear = !1;
    const v = new Ti({
      name: "PMREM.Background",
      side: Ci,
      depthWrite: !1,
      depthTest: !1
    }), y = new Sn(new Wo(), v);
    let w = !1;
    const x = e.background;
    x ? x.isColor && (v.color.copy(x), e.background = null, w = !0) : (v.color.copy(tE), w = !0);
    for (let g = 0; g < 6; g++) {
      const S = g % 3;
      S === 0 ? (a.up.set(0, c[g], 0), a.lookAt(f[g], 0, 0)) : S === 1 ? (a.up.set(0, 0, c[g]), a.lookAt(0, f[g], 0)) : (a.up.set(0, c[g], 0), a.lookAt(0, 0, f[g]));
      const M = this._cubeSize;
      Jd(r, S * M, g > 2 ? M : 0, M, M), h.setRenderTarget(r), w && h.render(y, a), h.render(e, a);
    }
    y.geometry.dispose(), y.material.dispose(), h.toneMapping = p, h.autoClear = d, e.background = x;
  }
  _textureToCubeUV(e, t) {
    const i = this._renderer, r = e.mapping === vs || e.mapping === ko;
    r ? (this._cubemapMaterial === null && (this._cubemapMaterial = sE()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = rE());
    const s = r ? this._cubemapMaterial : this._equirectMaterial, o = new Sn(this._lodPlanes[0], s), a = s.uniforms;
    a.envMap.value = e;
    const c = this._cubeSize;
    Jd(t, 0, 0, 3 * c, 2 * c), i.setRenderTarget(t), i.render(o, qv);
  }
  _applyPMREM(e) {
    const t = this._renderer, i = t.autoClear;
    t.autoClear = !1;
    const r = this._lodPlanes.length;
    for (let s = 1; s < r; s++) {
      const o = Math.sqrt(this._sigmas[s] * this._sigmas[s] - this._sigmas[s - 1] * this._sigmas[s - 1]), a = nE[(r - s - 1) % nE.length];
      this._blur(e, s - 1, s, o, a);
    }
    t.autoClear = i;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, i, r, s) {
    const o = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      o,
      t,
      i,
      r,
      "latitudinal",
      s
    ), this._halfBlur(
      o,
      e,
      i,
      i,
      r,
      "longitudinal",
      s
    );
  }
  _halfBlur(e, t, i, r, s, o, a) {
    const c = this._renderer, f = this._blurMaterial;
    o !== "latitudinal" && o !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const h = 3, d = new Sn(this._lodPlanes[r], f), p = f.uniforms, v = this._sizeLods[i] - 1, y = isFinite(s) ? Math.PI / (2 * v) : 2 * Math.PI / (2 * Ta - 1), w = s / y, x = isFinite(s) ? 1 + Math.floor(h * w) : Ta;
    x > Ta && console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${x} samples when the maximum is set to ${Ta}`);
    const g = [];
    let S = 0;
    for (let D = 0; D < Ta; ++D) {
      const R = D / w, C = Math.exp(-R * R / 2);
      g.push(C), D === 0 ? S += C : D < x && (S += 2 * C);
    }
    for (let D = 0; D < g.length; D++)
      g[D] = g[D] / S;
    p.envMap.value = e.texture, p.samples.value = x, p.weights.value = g, p.latitudinal.value = o === "latitudinal", a && (p.poleAxis.value = a);
    const { _lodMax: M } = this;
    p.dTheta.value = y, p.mipInt.value = M - i;
    const T = this._sizeLods[r], U = 3 * T * (r > M - ou ? r - M + ou : 0), P = 4 * (this._cubeSize - T);
    Jd(t, U, P, 3 * T, 2 * T), c.setRenderTarget(t), c.render(d, qv);
  }
}
function jO(n) {
  const e = [], t = [], i = [];
  let r = n;
  const s = n - ou + 1 + eE.length;
  for (let o = 0; o < s; o++) {
    const a = Math.pow(2, r);
    t.push(a);
    let c = 1 / a;
    o > n - ou ? c = eE[o - n + ou - 1] : o === 0 && (c = 0), i.push(c);
    const f = 1 / (a - 2), h = -f, d = 1 + f, p = [h, h, d, h, d, d, h, h, d, d, h, d], v = 6, y = 6, w = 3, x = 2, g = 1, S = new Float32Array(w * y * v), M = new Float32Array(x * y * v), T = new Float32Array(g * y * v);
    for (let P = 0; P < v; P++) {
      const D = P % 3 * 2 / 3 - 1, R = P > 2 ? 0 : -1, C = [
        D,
        R,
        0,
        D + 2 / 3,
        R,
        0,
        D + 2 / 3,
        R + 1,
        0,
        D,
        R,
        0,
        D + 2 / 3,
        R + 1,
        0,
        D,
        R + 1,
        0
      ];
      S.set(C, w * y * P), M.set(p, x * y * P);
      const A = [P, P, P, P, P, P];
      T.set(A, g * y * P);
    }
    const U = new Dt();
    U.setAttribute("position", new nn(S, w)), U.setAttribute("uv", new nn(M, x)), U.setAttribute("faceIndex", new nn(T, g)), e.push(U), r > ou && r--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: i };
}
function iE(n, e, t) {
  const i = new ar(n, e, t);
  return i.texture.mapping = Uu, i.texture.name = "PMREM.cubeUv", i.scissorTest = !0, i;
}
function Jd(n, e, t, i, r) {
  n.viewport.set(e, t, i, r), n.scissor.set(e, t, i, r);
}
function ZO(n, e, t) {
  const i = new Float32Array(Ta), r = new B(0, 1, 0);
  return new qi({
    name: "SphericalGaussianBlur",
    defines: {
      n: Ta,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${n}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: i },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: r }
    },
    vertexShader: h1(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: ps,
    depthTest: !1,
    depthWrite: !1
  });
}
function rE() {
  return new qi({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: h1(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: ps,
    depthTest: !1,
    depthWrite: !1
  });
}
function sE() {
  return new qi({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: h1(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: ps,
    depthTest: !1,
    depthWrite: !1
  });
}
function h1() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function KO(n) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function i(a) {
    if (a && a.isTexture) {
      const c = a.mapping, f = c === Tu || c === bf, h = c === vs || c === ko;
      if (f || h) {
        let d = e.get(a);
        const p = d !== void 0 ? d.texture.pmremVersion : 0;
        if (a.isRenderTargetTexture && a.pmremVersion !== p)
          return t === null && (t = new N_(n)), d = f ? t.fromEquirectangular(a, d) : t.fromCubemap(a, d), d.texture.pmremVersion = a.pmremVersion, e.set(a, d), d.texture;
        if (d !== void 0)
          return d.texture;
        {
          const v = a.image;
          return f && v && v.height > 0 || h && v && r(v) ? (t === null && (t = new N_(n)), d = f ? t.fromEquirectangular(a) : t.fromCubemap(a), d.texture.pmremVersion = a.pmremVersion, e.set(a, d), a.addEventListener("dispose", s), d.texture) : null;
        }
      }
    }
    return a;
  }
  function r(a) {
    let c = 0;
    const f = 6;
    for (let h = 0; h < f; h++)
      a[h] !== void 0 && c++;
    return c === f;
  }
  function s(a) {
    const c = a.target;
    c.removeEventListener("dispose", s);
    const f = e.get(c);
    f !== void 0 && (e.delete(c), f.dispose());
  }
  function o() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: i,
    dispose: o
  };
}
function JO(n) {
  const e = {};
  function t(i) {
    if (e[i] !== void 0)
      return e[i];
    let r;
    switch (i) {
      case "WEBGL_depth_texture":
        r = n.getExtension("WEBGL_depth_texture") || n.getExtension("MOZ_WEBGL_depth_texture") || n.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        r = n.getExtension("EXT_texture_filter_anisotropic") || n.getExtension("MOZ_EXT_texture_filter_anisotropic") || n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        r = n.getExtension("WEBGL_compressed_texture_s3tc") || n.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        r = n.getExtension("WEBGL_compressed_texture_pvrtc") || n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        r = n.getExtension(i);
    }
    return e[i] = r, r;
  }
  return {
    has: function(i) {
      return t(i) !== null;
    },
    init: function() {
      t("EXT_color_buffer_float"), t("WEBGL_clip_cull_distance"), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture"), t("WEBGL_render_shared_exponent");
    },
    get: function(i) {
      const r = t(i);
      return r === null && l1("THREE.WebGLRenderer: " + i + " extension not supported."), r;
    }
  };
}
function QO(n, e, t, i) {
  const r = {}, s = /* @__PURE__ */ new WeakMap();
  function o(d) {
    const p = d.target;
    p.index !== null && e.remove(p.index);
    for (const y in p.attributes)
      e.remove(p.attributes[y]);
    for (const y in p.morphAttributes) {
      const w = p.morphAttributes[y];
      for (let x = 0, g = w.length; x < g; x++)
        e.remove(w[x]);
    }
    p.removeEventListener("dispose", o), delete r[p.id];
    const v = s.get(p);
    v && (e.remove(v), s.delete(p)), i.releaseStatesOfGeometry(p), p.isInstancedBufferGeometry === !0 && delete p._maxInstanceCount, t.memory.geometries--;
  }
  function a(d, p) {
    return r[p.id] === !0 || (p.addEventListener("dispose", o), r[p.id] = !0, t.memory.geometries++), p;
  }
  function c(d) {
    const p = d.attributes;
    for (const y in p)
      e.update(p[y], n.ARRAY_BUFFER);
    const v = d.morphAttributes;
    for (const y in v) {
      const w = v[y];
      for (let x = 0, g = w.length; x < g; x++)
        e.update(w[x], n.ARRAY_BUFFER);
    }
  }
  function f(d) {
    const p = [], v = d.index, y = d.attributes.position;
    let w = 0;
    if (v !== null) {
      const S = v.array;
      w = v.version;
      for (let M = 0, T = S.length; M < T; M += 3) {
        const U = S[M + 0], P = S[M + 1], D = S[M + 2];
        p.push(U, P, P, D, D, U);
      }
    } else if (y !== void 0) {
      const S = y.array;
      w = y.version;
      for (let M = 0, T = S.length / 3 - 1; M < T; M += 3) {
        const U = M + 0, P = M + 1, D = M + 2;
        p.push(U, P, P, D, D, U);
      }
    } else
      return;
    const x = new (P2(p) ? c1 : Pg)(p, 1);
    x.version = w;
    const g = s.get(d);
    g && e.remove(g), s.set(d, x);
  }
  function h(d) {
    const p = s.get(d);
    if (p) {
      const v = d.index;
      v !== null && p.version < v.version && f(d);
    } else
      f(d);
    return s.get(d);
  }
  return {
    get: a,
    update: c,
    getWireframeAttribute: h
  };
}
function $O(n, e, t) {
  let i;
  function r(p) {
    i = p;
  }
  let s, o;
  function a(p) {
    s = p.type, o = p.bytesPerElement;
  }
  function c(p, v) {
    n.drawElements(i, v, s, p * o), t.update(v, i, 1);
  }
  function f(p, v, y) {
    y !== 0 && (n.drawElementsInstanced(i, v, s, p * o, y), t.update(v, i, y));
  }
  function h(p, v, y) {
    if (y === 0)
      return;
    e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i, v, 0, s, p, 0, y);
    let x = 0;
    for (let g = 0; g < y; g++)
      x += v[g];
    t.update(x, i, 1);
  }
  function d(p, v, y, w) {
    if (y === 0)
      return;
    const x = e.get("WEBGL_multi_draw");
    if (x === null)
      for (let g = 0; g < p.length; g++)
        f(p[g] / o, v[g], w[g]);
    else {
      x.multiDrawElementsInstancedWEBGL(i, v, 0, s, p, 0, w, 0, y);
      let g = 0;
      for (let S = 0; S < y; S++)
        g += v[S];
      for (let S = 0; S < w.length; S++)
        t.update(g, i, w[S]);
    }
  }
  this.setMode = r, this.setIndex = a, this.render = c, this.renderInstances = f, this.renderMultiDraw = h, this.renderMultiDrawInstances = d;
}
function eF(n) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function i(s, o, a) {
    switch (t.calls++, o) {
      case n.TRIANGLES:
        t.triangles += a * (s / 3);
        break;
      case n.LINES:
        t.lines += a * (s / 2);
        break;
      case n.LINE_STRIP:
        t.lines += a * (s - 1);
        break;
      case n.LINE_LOOP:
        t.lines += a * s;
        break;
      case n.POINTS:
        t.points += a * s;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", o);
        break;
    }
  }
  function r() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: r,
    update: i
  };
}
function tF(n, e, t) {
  const i = /* @__PURE__ */ new WeakMap(), r = new Vt();
  function s(o, a, c) {
    const f = o.morphTargetInfluences, h = a.morphAttributes.position || a.morphAttributes.normal || a.morphAttributes.color, d = h !== void 0 ? h.length : 0;
    let p = i.get(a);
    if (p === void 0 || p.count !== d) {
      let A = function() {
        R.dispose(), i.delete(a), a.removeEventListener("dispose", A);
      };
      var v = A;
      p !== void 0 && p.texture.dispose();
      const y = a.morphAttributes.position !== void 0, w = a.morphAttributes.normal !== void 0, x = a.morphAttributes.color !== void 0, g = a.morphAttributes.position || [], S = a.morphAttributes.normal || [], M = a.morphAttributes.color || [];
      let T = 0;
      y === !0 && (T = 1), w === !0 && (T = 2), x === !0 && (T = 3);
      let U = a.attributes.position.count * T, P = 1;
      U > e.maxTextureSize && (P = Math.ceil(U / e.maxTextureSize), U = e.maxTextureSize);
      const D = new Float32Array(U * P * 4 * d), R = new bg(D, U, P, d);
      R.type = xn, R.needsUpdate = !0;
      const C = T * 4;
      for (let N = 0; N < d; N++) {
        const G = g[N], W = S[N], j = M[N], Q = U * P * 4 * N;
        for (let J = 0; J < G.count; J++) {
          const oe = J * C;
          y === !0 && (r.fromBufferAttribute(G, J), D[Q + oe + 0] = r.x, D[Q + oe + 1] = r.y, D[Q + oe + 2] = r.z, D[Q + oe + 3] = 0), w === !0 && (r.fromBufferAttribute(W, J), D[Q + oe + 4] = r.x, D[Q + oe + 5] = r.y, D[Q + oe + 6] = r.z, D[Q + oe + 7] = 0), x === !0 && (r.fromBufferAttribute(j, J), D[Q + oe + 8] = r.x, D[Q + oe + 9] = r.y, D[Q + oe + 10] = r.z, D[Q + oe + 11] = j.itemSize === 4 ? r.w : 1);
        }
      }
      p = {
        count: d,
        texture: R,
        size: new _e(U, P)
      }, i.set(a, p), a.addEventListener("dispose", A);
    }
    if (o.isInstancedMesh === !0 && o.morphTexture !== null)
      c.getUniforms().setValue(n, "morphTexture", o.morphTexture, t);
    else {
      let y = 0;
      for (let x = 0; x < f.length; x++)
        y += f[x];
      const w = a.morphTargetsRelative ? 1 : 1 - y;
      c.getUniforms().setValue(n, "morphTargetBaseInfluence", w), c.getUniforms().setValue(n, "morphTargetInfluences", f);
    }
    c.getUniforms().setValue(n, "morphTargetsTexture", p.texture, t), c.getUniforms().setValue(n, "morphTargetsTextureSize", p.size);
  }
  return {
    update: s
  };
}
function nF(n, e, t, i) {
  let r = /* @__PURE__ */ new WeakMap();
  function s(c) {
    const f = i.render.frame, h = c.geometry, d = e.get(c, h);
    if (r.get(d) !== f && (e.update(d), r.set(d, f)), c.isInstancedMesh && (c.hasEventListener("dispose", a) === !1 && c.addEventListener("dispose", a), r.get(c) !== f && (t.update(c.instanceMatrix, n.ARRAY_BUFFER), c.instanceColor !== null && t.update(c.instanceColor, n.ARRAY_BUFFER), r.set(c, f))), c.isSkinnedMesh) {
      const p = c.skeleton;
      r.get(p) !== f && (p.update(), r.set(p, f));
    }
    return d;
  }
  function o() {
    r = /* @__PURE__ */ new WeakMap();
  }
  function a(c) {
    const f = c.target;
    f.removeEventListener("dispose", a), t.remove(f.instanceMatrix), f.instanceColor !== null && t.remove(f.instanceColor);
  }
  return {
    update: s,
    dispose: o
  };
}
class d1 extends Kt {
  constructor(e, t, i, r, s, o, a, c, f, h = ka) {
    if (h !== ka && h !== ja)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    i === void 0 && h === ka && (i = ys), i === void 0 && h === ja && (i = qa), super(null, r, s, o, a, c, h, i, f), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = a !== void 0 ? a : Qn, this.minFilter = c !== void 0 ? c : Qn, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
const z2 = /* @__PURE__ */ new Kt(), oE = /* @__PURE__ */ new d1(1, 1), B2 = /* @__PURE__ */ new bg(), H2 = /* @__PURE__ */ new u1(), V2 = /* @__PURE__ */ new uh(), aE = [], lE = [], uE = new Float32Array(16), cE = new Float32Array(9), fE = new Float32Array(4);
function Ou(n, e, t) {
  const i = n[0];
  if (i <= 0 || i > 0)
    return n;
  const r = e * t;
  let s = aE[r];
  if (s === void 0 && (s = new Float32Array(r), aE[r] = s), e !== 0) {
    i.toArray(s, 0);
    for (let o = 1, a = 0; o !== e; ++o)
      a += t, n[o].toArray(s, a);
  }
  return s;
}
function Xn(n, e) {
  if (n.length !== e.length)
    return !1;
  for (let t = 0, i = n.length; t < i; t++)
    if (n[t] !== e[t])
      return !1;
  return !0;
}
function Yn(n, e) {
  for (let t = 0, i = e.length; t < i; t++)
    n[t] = e[t];
}
function Ig(n, e) {
  let t = lE[e];
  t === void 0 && (t = new Int32Array(e), lE[e] = t);
  for (let i = 0; i !== e; ++i)
    t[i] = n.allocateTextureUnit();
  return t;
}
function iF(n, e) {
  const t = this.cache;
  t[0] !== e && (n.uniform1f(this.addr, e), t[0] = e);
}
function rF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (n.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Xn(t, e))
      return;
    n.uniform2fv(this.addr, e), Yn(t, e);
  }
}
function sF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (n.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (n.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (Xn(t, e))
      return;
    n.uniform3fv(this.addr, e), Yn(t, e);
  }
}
function oF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (n.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Xn(t, e))
      return;
    n.uniform4fv(this.addr, e), Yn(t, e);
  }
}
function aF(n, e) {
  const t = this.cache, i = e.elements;
  if (i === void 0) {
    if (Xn(t, e))
      return;
    n.uniformMatrix2fv(this.addr, !1, e), Yn(t, e);
  } else {
    if (Xn(t, i))
      return;
    fE.set(i), n.uniformMatrix2fv(this.addr, !1, fE), Yn(t, i);
  }
}
function lF(n, e) {
  const t = this.cache, i = e.elements;
  if (i === void 0) {
    if (Xn(t, e))
      return;
    n.uniformMatrix3fv(this.addr, !1, e), Yn(t, e);
  } else {
    if (Xn(t, i))
      return;
    cE.set(i), n.uniformMatrix3fv(this.addr, !1, cE), Yn(t, i);
  }
}
function uF(n, e) {
  const t = this.cache, i = e.elements;
  if (i === void 0) {
    if (Xn(t, e))
      return;
    n.uniformMatrix4fv(this.addr, !1, e), Yn(t, e);
  } else {
    if (Xn(t, i))
      return;
    uE.set(i), n.uniformMatrix4fv(this.addr, !1, uE), Yn(t, i);
  }
}
function cF(n, e) {
  const t = this.cache;
  t[0] !== e && (n.uniform1i(this.addr, e), t[0] = e);
}
function fF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (n.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Xn(t, e))
      return;
    n.uniform2iv(this.addr, e), Yn(t, e);
  }
}
function hF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (n.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Xn(t, e))
      return;
    n.uniform3iv(this.addr, e), Yn(t, e);
  }
}
function dF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (n.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Xn(t, e))
      return;
    n.uniform4iv(this.addr, e), Yn(t, e);
  }
}
function pF(n, e) {
  const t = this.cache;
  t[0] !== e && (n.uniform1ui(this.addr, e), t[0] = e);
}
function mF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (n.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Xn(t, e))
      return;
    n.uniform2uiv(this.addr, e), Yn(t, e);
  }
}
function gF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (n.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Xn(t, e))
      return;
    n.uniform3uiv(this.addr, e), Yn(t, e);
  }
}
function vF(n, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (n.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Xn(t, e))
      return;
    n.uniform4uiv(this.addr, e), Yn(t, e);
  }
}
function yF(n, e, t) {
  const i = this.cache, r = t.allocateTextureUnit();
  i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r);
  let s;
  this.type === n.SAMPLER_2D_SHADOW ? (oE.compareFunction = s1, s = oE) : s = z2, t.setTexture2D(e || s, r);
}
function _F(n, e, t) {
  const i = this.cache, r = t.allocateTextureUnit();
  i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r), t.setTexture3D(e || H2, r);
}
function xF(n, e, t) {
  const i = this.cache, r = t.allocateTextureUnit();
  i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r), t.setTextureCube(e || V2, r);
}
function SF(n, e, t) {
  const i = this.cache, r = t.allocateTextureUnit();
  i[0] !== r && (n.uniform1i(this.addr, r), i[0] = r), t.setTexture2DArray(e || B2, r);
}
function MF(n) {
  switch (n) {
    case 5126:
      return iF;
    case 35664:
      return rF;
    case 35665:
      return sF;
    case 35666:
      return oF;
    case 35674:
      return aF;
    case 35675:
      return lF;
    case 35676:
      return uF;
    case 5124:
    case 35670:
      return cF;
    case 35667:
    case 35671:
      return fF;
    case 35668:
    case 35672:
      return hF;
    case 35669:
    case 35673:
      return dF;
    case 5125:
      return pF;
    case 36294:
      return mF;
    case 36295:
      return gF;
    case 36296:
      return vF;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return yF;
    case 35679:
    case 36299:
    case 36307:
      return _F;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return xF;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return SF;
  }
}
function wF(n, e) {
  n.uniform1fv(this.addr, e);
}
function EF(n, e) {
  const t = Ou(e, this.size, 2);
  n.uniform2fv(this.addr, t);
}
function TF(n, e) {
  const t = Ou(e, this.size, 3);
  n.uniform3fv(this.addr, t);
}
function AF(n, e) {
  const t = Ou(e, this.size, 4);
  n.uniform4fv(this.addr, t);
}
function CF(n, e) {
  const t = Ou(e, this.size, 4);
  n.uniformMatrix2fv(this.addr, !1, t);
}
function RF(n, e) {
  const t = Ou(e, this.size, 9);
  n.uniformMatrix3fv(this.addr, !1, t);
}
function bF(n, e) {
  const t = Ou(e, this.size, 16);
  n.uniformMatrix4fv(this.addr, !1, t);
}
function PF(n, e) {
  n.uniform1iv(this.addr, e);
}
function IF(n, e) {
  n.uniform2iv(this.addr, e);
}
function LF(n, e) {
  n.uniform3iv(this.addr, e);
}
function DF(n, e) {
  n.uniform4iv(this.addr, e);
}
function NF(n, e) {
  n.uniform1uiv(this.addr, e);
}
function UF(n, e) {
  n.uniform2uiv(this.addr, e);
}
function OF(n, e) {
  n.uniform3uiv(this.addr, e);
}
function FF(n, e) {
  n.uniform4uiv(this.addr, e);
}
function kF(n, e, t) {
  const i = this.cache, r = e.length, s = Ig(t, r);
  Xn(i, s) || (n.uniform1iv(this.addr, s), Yn(i, s));
  for (let o = 0; o !== r; ++o)
    t.setTexture2D(e[o] || z2, s[o]);
}
function zF(n, e, t) {
  const i = this.cache, r = e.length, s = Ig(t, r);
  Xn(i, s) || (n.uniform1iv(this.addr, s), Yn(i, s));
  for (let o = 0; o !== r; ++o)
    t.setTexture3D(e[o] || H2, s[o]);
}
function BF(n, e, t) {
  const i = this.cache, r = e.length, s = Ig(t, r);
  Xn(i, s) || (n.uniform1iv(this.addr, s), Yn(i, s));
  for (let o = 0; o !== r; ++o)
    t.setTextureCube(e[o] || V2, s[o]);
}
function HF(n, e, t) {
  const i = this.cache, r = e.length, s = Ig(t, r);
  Xn(i, s) || (n.uniform1iv(this.addr, s), Yn(i, s));
  for (let o = 0; o !== r; ++o)
    t.setTexture2DArray(e[o] || B2, s[o]);
}
function VF(n) {
  switch (n) {
    case 5126:
      return wF;
    case 35664:
      return EF;
    case 35665:
      return TF;
    case 35666:
      return AF;
    case 35674:
      return CF;
    case 35675:
      return RF;
    case 35676:
      return bF;
    case 5124:
    case 35670:
      return PF;
    case 35667:
    case 35671:
      return IF;
    case 35668:
    case 35672:
      return LF;
    case 35669:
    case 35673:
      return DF;
    case 5125:
      return NF;
    case 36294:
      return UF;
    case 36295:
      return OF;
    case 36296:
      return FF;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return kF;
    case 35679:
    case 36299:
    case 36307:
      return zF;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return BF;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return HF;
  }
}
class GF {
  constructor(e, t, i) {
    this.id = e, this.addr = i, this.cache = [], this.type = t.type, this.setValue = MF(t.type);
  }
}
class WF {
  constructor(e, t, i) {
    this.id = e, this.addr = i, this.cache = [], this.type = t.type, this.size = t.size, this.setValue = VF(t.type);
  }
}
class XF {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, i) {
    const r = this.seq;
    for (let s = 0, o = r.length; s !== o; ++s) {
      const a = r[s];
      a.setValue(e, t[a.id], i);
    }
  }
}
const Qv = /(\w+)(\])?(\[|\.)?/g;
function hE(n, e) {
  n.seq.push(e), n.map[e.id] = e;
}
function YF(n, e, t) {
  const i = n.name, r = i.length;
  for (Qv.lastIndex = 0; ; ) {
    const s = Qv.exec(i), o = Qv.lastIndex;
    let a = s[1];
    const c = s[2] === "]", f = s[3];
    if (c && (a = a | 0), f === void 0 || f === "[" && o + 2 === r) {
      hE(t, f === void 0 ? new GF(a, n, e) : new WF(a, n, e));
      break;
    } else {
      let d = t.map[a];
      d === void 0 && (d = new XF(a), hE(t, d)), t = d;
    }
  }
}
class jp {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const i = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let r = 0; r < i; ++r) {
      const s = e.getActiveUniform(t, r), o = e.getUniformLocation(t, s.name);
      YF(s, o, this);
    }
  }
  setValue(e, t, i, r) {
    const s = this.map[t];
    s !== void 0 && s.setValue(e, i, r);
  }
  setOptional(e, t, i) {
    const r = t[i];
    r !== void 0 && this.setValue(e, i, r);
  }
  static upload(e, t, i, r) {
    for (let s = 0, o = t.length; s !== o; ++s) {
      const a = t[s], c = i[a.id];
      c.needsUpdate !== !1 && a.setValue(e, c.value, r);
    }
  }
  static seqWithValue(e, t) {
    const i = [];
    for (let r = 0, s = e.length; r !== s; ++r) {
      const o = e[r];
      o.id in t && i.push(o);
    }
    return i;
  }
}
function dE(n, e, t) {
  const i = n.createShader(e);
  return n.shaderSource(i, t), n.compileShader(i), i;
}
const qF = 37297;
let jF = 0;
function ZF(n, e) {
  const t = n.split(`
`), i = [], r = Math.max(e - 6, 0), s = Math.min(e + 6, t.length);
  for (let o = r; o < s; o++) {
    const a = o + 1;
    i.push(`${a === e ? ">" : " "} ${a}: ${t[o]}`);
  }
  return i.join(`
`);
}
function KF(n) {
  const e = Jt.getPrimaries(Jt.workingColorSpace), t = Jt.getPrimaries(n);
  let i;
  switch (e === t ? i = "" : e === Of && t === Uf ? i = "LinearDisplayP3ToLinearSRGB" : e === Uf && t === Of && (i = "LinearSRGBToLinearDisplayP3"), n) {
    case br:
    case ah:
      return [i, "LinearTransferOETF"];
    case Bi:
    case Rg:
      return [i, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space:", n), [i, "LinearTransferOETF"];
  }
}
function pE(n, e, t) {
  const i = n.getShaderParameter(e, n.COMPILE_STATUS), r = n.getShaderInfoLog(e).trim();
  if (i && r === "")
    return "";
  const s = /ERROR: 0:(\d+)/.exec(r);
  if (s) {
    const o = parseInt(s[1]);
    return t.toUpperCase() + `

` + r + `

` + ZF(n.getShaderSource(e), o);
  } else
    return r;
}
function JF(n, e) {
  const t = KF(e);
  return `vec4 ${n}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function QF(n, e) {
  let t;
  switch (e) {
    case c2:
      t = "Linear";
      break;
    case f2:
      t = "Reinhard";
      break;
    case h2:
      t = "OptimizedCineon";
      break;
    case Zx:
      t = "ACESFilmic";
      break;
    case p2:
      t = "AgX";
      break;
    case m2:
      t = "Neutral";
      break;
    case d2:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + n + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function $F(n) {
  return [
    n.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    n.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ].filter(Hc).join(`
`);
}
function ek(n) {
  const e = [];
  for (const t in n) {
    const i = n[t];
    i !== !1 && e.push("#define " + t + " " + i);
  }
  return e.join(`
`);
}
function tk(n, e) {
  const t = {}, i = n.getProgramParameter(e, n.ACTIVE_ATTRIBUTES);
  for (let r = 0; r < i; r++) {
    const s = n.getActiveAttrib(e, r), o = s.name;
    let a = 1;
    s.type === n.FLOAT_MAT2 && (a = 2), s.type === n.FLOAT_MAT3 && (a = 3), s.type === n.FLOAT_MAT4 && (a = 4), t[o] = {
      type: s.type,
      location: n.getAttribLocation(e, o),
      locationSize: a
    };
  }
  return t;
}
function Hc(n) {
  return n !== "";
}
function mE(n, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return n.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function gE(n, e) {
  return n.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const nk = /^[ \t]*#include +<([\w\d./]+)>/gm;
function U_(n) {
  return n.replace(nk, rk);
}
const ik = /* @__PURE__ */ new Map();
function rk(n, e) {
  let t = Lt[e];
  if (t === void 0) {
    const i = ik.get(e);
    if (i !== void 0)
      t = Lt[i], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, i);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return U_(t);
}
const sk = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function vE(n) {
  return n.replace(sk, ok);
}
function ok(n, e, t, i) {
  let r = "";
  for (let s = parseInt(e); s < parseInt(t); s++)
    r += i.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
  return r;
}
function yE(n) {
  let e = `precision ${n.precision} float;
	precision ${n.precision} int;
	precision ${n.precision} sampler2D;
	precision ${n.precision} samplerCube;
	precision ${n.precision} sampler3D;
	precision ${n.precision} sampler2DArray;
	precision ${n.precision} sampler2DShadow;
	precision ${n.precision} samplerCubeShadow;
	precision ${n.precision} sampler2DArrayShadow;
	precision ${n.precision} isampler2D;
	precision ${n.precision} isampler3D;
	precision ${n.precision} isamplerCube;
	precision ${n.precision} isampler2DArray;
	precision ${n.precision} usampler2D;
	precision ${n.precision} usampler3D;
	precision ${n.precision} usamplerCube;
	precision ${n.precision} usampler2DArray;
	`;
  return n.precision === "highp" ? e += `
#define HIGH_PRECISION` : n.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : n.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function ak(n) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return n.shadowMapType === xg ? e = "SHADOWMAP_TYPE_PCF" : n.shadowMapType === Jc ? e = "SHADOWMAP_TYPE_PCF_SOFT" : n.shadowMapType === Br && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function lk(n) {
  let e = "ENVMAP_TYPE_CUBE";
  if (n.envMap)
    switch (n.envMapMode) {
      case vs:
      case ko:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case Uu:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function uk(n) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (n.envMap)
    switch (n.envMapMode) {
      case ko:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function ck(n) {
  let e = "ENVMAP_BLENDING_NONE";
  if (n.envMap)
    switch (n.combine) {
      case ih:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case l2:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case u2:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function fk(n) {
  const e = n.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2, i = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: i, maxMip: t };
}
function hk(n, e, t, i) {
  const r = n.getContext(), s = t.defines;
  let o = t.vertexShader, a = t.fragmentShader;
  const c = ak(t), f = lk(t), h = uk(t), d = ck(t), p = fk(t), v = $F(t), y = ek(s), w = r.createProgram();
  let x, g, S = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (x = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y
  ].filter(Hc).join(`
`), x.length > 0 && (x += `
`), g = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y
  ].filter(Hc).join(`
`), g.length > 0 && (g += `
`)) : (x = [
    yE(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y,
    t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    t.batching ? "#define USE_BATCHING" : "",
    t.batchingColor ? "#define USE_BATCHING_COLOR" : "",
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + h : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + c : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "#ifdef USE_INSTANCING_MORPH",
    "	uniform sampler2D morphTexture;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(Hc).join(`
`), g = [
    yE(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    y,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + f : "",
    t.envMap ? "#define " + h : "",
    t.envMap ? "#define " + d : "",
    p ? "#define CUBEUV_TEXEL_WIDTH " + p.texelWidth : "",
    p ? "#define CUBEUV_TEXEL_HEIGHT " + p.texelHeight : "",
    p ? "#define CUBEUV_MAX_MIP " + p.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.dispersion ? "#define USE_DISPERSION" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor || t.batchingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + c : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== ms ? "#define TONE_MAPPING" : "",
    t.toneMapping !== ms ? Lt.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== ms ? QF("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    Lt.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    JF("linearToOutputTexel", t.outputColorSpace),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(Hc).join(`
`)), o = U_(o), o = mE(o, t), o = gE(o, t), a = U_(a), a = mE(a, t), a = gE(a, t), o = vE(o), a = vE(a), t.isRawShaderMaterial !== !0 && (S = `#version 300 es
`, x = [
    v,
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + x, g = [
    "#define varying in",
    t.glslVersion === D_ ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === D_ ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + g);
  const M = S + x + o, T = S + g + a, U = dE(r, r.VERTEX_SHADER, M), P = dE(r, r.FRAGMENT_SHADER, T);
  r.attachShader(w, U), r.attachShader(w, P), t.index0AttributeName !== void 0 ? r.bindAttribLocation(w, 0, t.index0AttributeName) : t.morphTargets === !0 && r.bindAttribLocation(w, 0, "position"), r.linkProgram(w);
  function D(N) {
    if (n.debug.checkShaderErrors) {
      const G = r.getProgramInfoLog(w).trim(), W = r.getShaderInfoLog(U).trim(), j = r.getShaderInfoLog(P).trim();
      let Q = !0, J = !0;
      if (r.getProgramParameter(w, r.LINK_STATUS) === !1)
        if (Q = !1, typeof n.debug.onShaderError == "function")
          n.debug.onShaderError(r, w, U, P);
        else {
          const oe = pE(r, U, "vertex"), z = pE(r, P, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + r.getError() + " - VALIDATE_STATUS " + r.getProgramParameter(w, r.VALIDATE_STATUS) + `

Material Name: ` + N.name + `
Material Type: ` + N.type + `

Program Info Log: ` + G + `
` + oe + `
` + z
          );
        }
      else
        G !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", G) : (W === "" || j === "") && (J = !1);
      J && (N.diagnostics = {
        runnable: Q,
        programLog: G,
        vertexShader: {
          log: W,
          prefix: x
        },
        fragmentShader: {
          log: j,
          prefix: g
        }
      });
    }
    r.deleteShader(U), r.deleteShader(P), R = new jp(r, w), C = tk(r, w);
  }
  let R;
  this.getUniforms = function() {
    return R === void 0 && D(this), R;
  };
  let C;
  this.getAttributes = function() {
    return C === void 0 && D(this), C;
  };
  let A = t.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return A === !1 && (A = r.getProgramParameter(w, qF)), A;
  }, this.destroy = function() {
    i.releaseStatesOfProgram(this), r.deleteProgram(w), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = jF++, this.cacheKey = e, this.usedTimes = 1, this.program = w, this.vertexShader = U, this.fragmentShader = P, this;
}
let dk = 0;
class pk {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, i = e.fragmentShader, r = this._getShaderStage(t), s = this._getShaderStage(i), o = this._getShaderCacheForMaterial(e);
    return o.has(r) === !1 && (o.add(r), r.usedTimes++), o.has(s) === !1 && (o.add(s), s.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const i of t)
      i.usedTimes--, i.usedTimes === 0 && this.shaderCache.delete(i.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let i = t.get(e);
    return i === void 0 && (i = /* @__PURE__ */ new Set(), t.set(e, i)), i;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let i = t.get(e);
    return i === void 0 && (i = new mk(e), t.set(e, i)), i;
  }
}
class mk {
  constructor(e) {
    this.id = dk++, this.code = e, this.usedTimes = 0;
  }
}
function gk(n, e, t, i, r, s, o) {
  const a = new Ba(), c = new pk(), f = /* @__PURE__ */ new Set(), h = [], d = r.logarithmicDepthBuffer, p = r.vertexTextures;
  let v = r.precision;
  const y = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function w(C) {
    return f.add(C), C === 0 ? "uv" : `uv${C}`;
  }
  function x(C, A, N, G, W) {
    const j = G.fog, Q = W.geometry, J = C.isMeshStandardMaterial ? G.environment : null, oe = (C.isMeshStandardMaterial ? t : e).get(C.envMap || J), z = oe && oe.mapping === Uu ? oe.image.height : null, te = y[C.type];
    C.precision !== null && (v = r.getMaxPrecision(C.precision), v !== C.precision && console.warn("THREE.WebGLProgram.getParameters:", C.precision, "not supported, using", v, "instead."));
    const ne = Q.morphAttributes.position || Q.morphAttributes.normal || Q.morphAttributes.color, he = ne !== void 0 ? ne.length : 0;
    let Se = 0;
    Q.morphAttributes.position !== void 0 && (Se = 1), Q.morphAttributes.normal !== void 0 && (Se = 2), Q.morphAttributes.color !== void 0 && (Se = 3);
    let ke, ce, we, Ee;
    if (te) {
      const It = Gr[te];
      ke = It.vertexShader, ce = It.fragmentShader;
    } else
      ke = C.vertexShader, ce = C.fragmentShader, c.update(C), we = c.getVertexShaderID(C), Ee = c.getFragmentShaderID(C);
    const De = n.getRenderTarget(), st = W.isInstancedMesh === !0, Mt = W.isBatchedMesh === !0, dt = !!C.map, xt = !!C.matcap, H = !!oe, Ie = !!C.aoMap, Le = !!C.lightMap, Ge = !!C.bumpMap, Me = !!C.normalMap, at = !!C.displacementMap, We = !!C.emissiveMap, et = !!C.metalnessMap, q = !!C.roughnessMap, O = C.anisotropy > 0, ue = C.clearcoat > 0, Te = C.dispersion > 0, Ae = C.iridescence > 0, Ce = C.sheen > 0, ot = C.transmission > 0, Ve = O && !!C.anisotropyMap, Je = ue && !!C.clearcoatMap, _t = ue && !!C.clearcoatNormalMap, Ue = ue && !!C.clearcoatRoughnessMap, Ze = Ae && !!C.iridescenceMap, Nt = Ae && !!C.iridescenceThicknessMap, ht = Ce && !!C.sheenColorMap, Be = Ce && !!C.sheenRoughnessMap, ee = !!C.specularMap, ye = !!C.specularColorMap, ze = !!C.specularIntensityMap, K = ot && !!C.transmissionMap, be = ot && !!C.thicknessMap, ie = !!C.gradientMap, xe = !!C.alphaMap, He = C.alphaTest > 0, pt = !!C.alphaHash, wt = !!C.extensions;
    let Ht = ms;
    C.toneMapped && (De === null || De.isXRRenderTarget === !0) && (Ht = n.toneMapping);
    const rn = {
      shaderID: te,
      shaderType: C.type,
      shaderName: C.name,
      vertexShader: ke,
      fragmentShader: ce,
      defines: C.defines,
      customVertexShaderID: we,
      customFragmentShaderID: Ee,
      isRawShaderMaterial: C.isRawShaderMaterial === !0,
      glslVersion: C.glslVersion,
      precision: v,
      batching: Mt,
      batchingColor: Mt && W._colorsTexture !== null,
      instancing: st,
      instancingColor: st && W.instanceColor !== null,
      instancingMorph: st && W.morphTexture !== null,
      supportsVertexTextures: p,
      outputColorSpace: De === null ? n.outputColorSpace : De.isXRRenderTarget === !0 ? De.texture.colorSpace : br,
      alphaToCoverage: !!C.alphaToCoverage,
      map: dt,
      matcap: xt,
      envMap: H,
      envMapMode: H && oe.mapping,
      envMapCubeUVHeight: z,
      aoMap: Ie,
      lightMap: Le,
      bumpMap: Ge,
      normalMap: Me,
      displacementMap: p && at,
      emissiveMap: We,
      normalMapObjectSpace: Me && C.normalMapType === M2,
      normalMapTangentSpace: Me && C.normalMapType === Go,
      metalnessMap: et,
      roughnessMap: q,
      anisotropy: O,
      anisotropyMap: Ve,
      clearcoat: ue,
      clearcoatMap: Je,
      clearcoatNormalMap: _t,
      clearcoatRoughnessMap: Ue,
      dispersion: Te,
      iridescence: Ae,
      iridescenceMap: Ze,
      iridescenceThicknessMap: Nt,
      sheen: Ce,
      sheenColorMap: ht,
      sheenRoughnessMap: Be,
      specularMap: ee,
      specularColorMap: ye,
      specularIntensityMap: ze,
      transmission: ot,
      transmissionMap: K,
      thicknessMap: be,
      gradientMap: ie,
      opaque: C.transparent === !1 && C.blending === Fa && C.alphaToCoverage === !1,
      alphaMap: xe,
      alphaTest: He,
      alphaHash: pt,
      combine: C.combine,
      //
      mapUv: dt && w(C.map.channel),
      aoMapUv: Ie && w(C.aoMap.channel),
      lightMapUv: Le && w(C.lightMap.channel),
      bumpMapUv: Ge && w(C.bumpMap.channel),
      normalMapUv: Me && w(C.normalMap.channel),
      displacementMapUv: at && w(C.displacementMap.channel),
      emissiveMapUv: We && w(C.emissiveMap.channel),
      metalnessMapUv: et && w(C.metalnessMap.channel),
      roughnessMapUv: q && w(C.roughnessMap.channel),
      anisotropyMapUv: Ve && w(C.anisotropyMap.channel),
      clearcoatMapUv: Je && w(C.clearcoatMap.channel),
      clearcoatNormalMapUv: _t && w(C.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: Ue && w(C.clearcoatRoughnessMap.channel),
      iridescenceMapUv: Ze && w(C.iridescenceMap.channel),
      iridescenceThicknessMapUv: Nt && w(C.iridescenceThicknessMap.channel),
      sheenColorMapUv: ht && w(C.sheenColorMap.channel),
      sheenRoughnessMapUv: Be && w(C.sheenRoughnessMap.channel),
      specularMapUv: ee && w(C.specularMap.channel),
      specularColorMapUv: ye && w(C.specularColorMap.channel),
      specularIntensityMapUv: ze && w(C.specularIntensityMap.channel),
      transmissionMapUv: K && w(C.transmissionMap.channel),
      thicknessMapUv: be && w(C.thicknessMap.channel),
      alphaMapUv: xe && w(C.alphaMap.channel),
      //
      vertexTangents: !!Q.attributes.tangent && (Me || O),
      vertexColors: C.vertexColors,
      vertexAlphas: C.vertexColors === !0 && !!Q.attributes.color && Q.attributes.color.itemSize === 4,
      pointsUvs: W.isPoints === !0 && !!Q.attributes.uv && (dt || xe),
      fog: !!j,
      useFog: C.fog === !0,
      fogExp2: !!j && j.isFogExp2,
      flatShading: C.flatShading === !0,
      sizeAttenuation: C.sizeAttenuation === !0,
      logarithmicDepthBuffer: d,
      skinning: W.isSkinnedMesh === !0,
      morphTargets: Q.morphAttributes.position !== void 0,
      morphNormals: Q.morphAttributes.normal !== void 0,
      morphColors: Q.morphAttributes.color !== void 0,
      morphTargetsCount: he,
      morphTextureStride: Se,
      numDirLights: A.directional.length,
      numPointLights: A.point.length,
      numSpotLights: A.spot.length,
      numSpotLightMaps: A.spotLightMap.length,
      numRectAreaLights: A.rectArea.length,
      numHemiLights: A.hemi.length,
      numDirLightShadows: A.directionalShadowMap.length,
      numPointLightShadows: A.pointShadowMap.length,
      numSpotLightShadows: A.spotShadowMap.length,
      numSpotLightShadowsWithMaps: A.numSpotLightShadowsWithMaps,
      numLightProbes: A.numLightProbes,
      numClippingPlanes: o.numPlanes,
      numClipIntersection: o.numIntersection,
      dithering: C.dithering,
      shadowMapEnabled: n.shadowMap.enabled && N.length > 0,
      shadowMapType: n.shadowMap.type,
      toneMapping: Ht,
      decodeVideoTexture: dt && C.map.isVideoTexture === !0 && Jt.getTransfer(C.map.colorSpace) === an,
      premultipliedAlpha: C.premultipliedAlpha,
      doubleSided: C.side === Wr,
      flipSided: C.side === Ci,
      useDepthPacking: C.depthPacking >= 0,
      depthPacking: C.depthPacking || 0,
      index0AttributeName: C.index0AttributeName,
      extensionClipCullDistance: wt && C.extensions.clipCullDistance === !0 && i.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (wt && C.extensions.multiDraw === !0 || Mt) && i.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: i.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: C.customProgramCacheKey()
    };
    return rn.vertexUv1s = f.has(1), rn.vertexUv2s = f.has(2), rn.vertexUv3s = f.has(3), f.clear(), rn;
  }
  function g(C) {
    const A = [];
    if (C.shaderID ? A.push(C.shaderID) : (A.push(C.customVertexShaderID), A.push(C.customFragmentShaderID)), C.defines !== void 0)
      for (const N in C.defines)
        A.push(N), A.push(C.defines[N]);
    return C.isRawShaderMaterial === !1 && (S(A, C), M(A, C), A.push(n.outputColorSpace)), A.push(C.customProgramCacheKey), A.join();
  }
  function S(C, A) {
    C.push(A.precision), C.push(A.outputColorSpace), C.push(A.envMapMode), C.push(A.envMapCubeUVHeight), C.push(A.mapUv), C.push(A.alphaMapUv), C.push(A.lightMapUv), C.push(A.aoMapUv), C.push(A.bumpMapUv), C.push(A.normalMapUv), C.push(A.displacementMapUv), C.push(A.emissiveMapUv), C.push(A.metalnessMapUv), C.push(A.roughnessMapUv), C.push(A.anisotropyMapUv), C.push(A.clearcoatMapUv), C.push(A.clearcoatNormalMapUv), C.push(A.clearcoatRoughnessMapUv), C.push(A.iridescenceMapUv), C.push(A.iridescenceThicknessMapUv), C.push(A.sheenColorMapUv), C.push(A.sheenRoughnessMapUv), C.push(A.specularMapUv), C.push(A.specularColorMapUv), C.push(A.specularIntensityMapUv), C.push(A.transmissionMapUv), C.push(A.thicknessMapUv), C.push(A.combine), C.push(A.fogExp2), C.push(A.sizeAttenuation), C.push(A.morphTargetsCount), C.push(A.morphAttributeCount), C.push(A.numDirLights), C.push(A.numPointLights), C.push(A.numSpotLights), C.push(A.numSpotLightMaps), C.push(A.numHemiLights), C.push(A.numRectAreaLights), C.push(A.numDirLightShadows), C.push(A.numPointLightShadows), C.push(A.numSpotLightShadows), C.push(A.numSpotLightShadowsWithMaps), C.push(A.numLightProbes), C.push(A.shadowMapType), C.push(A.toneMapping), C.push(A.numClippingPlanes), C.push(A.numClipIntersection), C.push(A.depthPacking);
  }
  function M(C, A) {
    a.disableAll(), A.supportsVertexTextures && a.enable(0), A.instancing && a.enable(1), A.instancingColor && a.enable(2), A.instancingMorph && a.enable(3), A.matcap && a.enable(4), A.envMap && a.enable(5), A.normalMapObjectSpace && a.enable(6), A.normalMapTangentSpace && a.enable(7), A.clearcoat && a.enable(8), A.iridescence && a.enable(9), A.alphaTest && a.enable(10), A.vertexColors && a.enable(11), A.vertexAlphas && a.enable(12), A.vertexUv1s && a.enable(13), A.vertexUv2s && a.enable(14), A.vertexUv3s && a.enable(15), A.vertexTangents && a.enable(16), A.anisotropy && a.enable(17), A.alphaHash && a.enable(18), A.batching && a.enable(19), A.dispersion && a.enable(20), A.batchingColor && a.enable(21), C.push(a.mask), a.disableAll(), A.fog && a.enable(0), A.useFog && a.enable(1), A.flatShading && a.enable(2), A.logarithmicDepthBuffer && a.enable(3), A.skinning && a.enable(4), A.morphTargets && a.enable(5), A.morphNormals && a.enable(6), A.morphColors && a.enable(7), A.premultipliedAlpha && a.enable(8), A.shadowMapEnabled && a.enable(9), A.doubleSided && a.enable(10), A.flipSided && a.enable(11), A.useDepthPacking && a.enable(12), A.dithering && a.enable(13), A.transmission && a.enable(14), A.sheen && a.enable(15), A.opaque && a.enable(16), A.pointsUvs && a.enable(17), A.decodeVideoTexture && a.enable(18), A.alphaToCoverage && a.enable(19), C.push(a.mask);
  }
  function T(C) {
    const A = y[C.type];
    let N;
    if (A) {
      const G = Gr[A];
      N = O2.clone(G.uniforms);
    } else
      N = C.uniforms;
    return N;
  }
  function U(C, A) {
    let N;
    for (let G = 0, W = h.length; G < W; G++) {
      const j = h[G];
      if (j.cacheKey === A) {
        N = j, ++N.usedTimes;
        break;
      }
    }
    return N === void 0 && (N = new hk(n, A, C, s), h.push(N)), N;
  }
  function P(C) {
    if (--C.usedTimes === 0) {
      const A = h.indexOf(C);
      h[A] = h[h.length - 1], h.pop(), C.destroy();
    }
  }
  function D(C) {
    c.remove(C);
  }
  function R() {
    c.dispose();
  }
  return {
    getParameters: x,
    getProgramCacheKey: g,
    getUniforms: T,
    acquireProgram: U,
    releaseProgram: P,
    releaseShaderCache: D,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: h,
    dispose: R
  };
}
function vk() {
  let n = /* @__PURE__ */ new WeakMap();
  function e(s) {
    let o = n.get(s);
    return o === void 0 && (o = {}, n.set(s, o)), o;
  }
  function t(s) {
    n.delete(s);
  }
  function i(s, o, a) {
    n.get(s)[o] = a;
  }
  function r() {
    n = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: i,
    dispose: r
  };
}
function yk(n, e) {
  return n.groupOrder !== e.groupOrder ? n.groupOrder - e.groupOrder : n.renderOrder !== e.renderOrder ? n.renderOrder - e.renderOrder : n.material.id !== e.material.id ? n.material.id - e.material.id : n.z !== e.z ? n.z - e.z : n.id - e.id;
}
function _E(n, e) {
  return n.groupOrder !== e.groupOrder ? n.groupOrder - e.groupOrder : n.renderOrder !== e.renderOrder ? n.renderOrder - e.renderOrder : n.z !== e.z ? e.z - n.z : n.id - e.id;
}
function xE() {
  const n = [];
  let e = 0;
  const t = [], i = [], r = [];
  function s() {
    e = 0, t.length = 0, i.length = 0, r.length = 0;
  }
  function o(d, p, v, y, w, x) {
    let g = n[e];
    return g === void 0 ? (g = {
      id: d.id,
      object: d,
      geometry: p,
      material: v,
      groupOrder: y,
      renderOrder: d.renderOrder,
      z: w,
      group: x
    }, n[e] = g) : (g.id = d.id, g.object = d, g.geometry = p, g.material = v, g.groupOrder = y, g.renderOrder = d.renderOrder, g.z = w, g.group = x), e++, g;
  }
  function a(d, p, v, y, w, x) {
    const g = o(d, p, v, y, w, x);
    v.transmission > 0 ? i.push(g) : v.transparent === !0 ? r.push(g) : t.push(g);
  }
  function c(d, p, v, y, w, x) {
    const g = o(d, p, v, y, w, x);
    v.transmission > 0 ? i.unshift(g) : v.transparent === !0 ? r.unshift(g) : t.unshift(g);
  }
  function f(d, p) {
    t.length > 1 && t.sort(d || yk), i.length > 1 && i.sort(p || _E), r.length > 1 && r.sort(p || _E);
  }
  function h() {
    for (let d = e, p = n.length; d < p; d++) {
      const v = n[d];
      if (v.id === null)
        break;
      v.id = null, v.object = null, v.geometry = null, v.material = null, v.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: i,
    transparent: r,
    init: s,
    push: a,
    unshift: c,
    finish: h,
    sort: f
  };
}
function _k() {
  let n = /* @__PURE__ */ new WeakMap();
  function e(i, r) {
    const s = n.get(i);
    let o;
    return s === void 0 ? (o = new xE(), n.set(i, [o])) : r >= s.length ? (o = new xE(), s.push(o)) : o = s[r], o;
  }
  function t() {
    n = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function xk() {
  const n = {};
  return {
    get: function(e) {
      if (n[e.id] !== void 0)
        return n[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new B(),
            color: new Qe()
          };
          break;
        case "SpotLight":
          t = {
            position: new B(),
            direction: new B(),
            color: new Qe(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new B(),
            color: new Qe(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new B(),
            skyColor: new Qe(),
            groundColor: new Qe()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new Qe(),
            position: new B(),
            halfWidth: new B(),
            halfHeight: new B()
          };
          break;
      }
      return n[e.id] = t, t;
    }
  };
}
function Sk() {
  const n = {};
  return {
    get: function(e) {
      if (n[e.id] !== void 0)
        return n[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new _e()
          };
          break;
        case "SpotLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new _e()
          };
          break;
        case "PointLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new _e(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return n[e.id] = t, t;
    }
  };
}
let Mk = 0;
function wk(n, e) {
  return (e.castShadow ? 2 : 0) - (n.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (n.map ? 1 : 0);
}
function Ek(n) {
  const e = new xk(), t = Sk(), i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let f = 0; f < 9; f++)
    i.probe.push(new B());
  const r = new B(), s = new yt(), o = new yt();
  function a(f) {
    let h = 0, d = 0, p = 0;
    for (let C = 0; C < 9; C++)
      i.probe[C].set(0, 0, 0);
    let v = 0, y = 0, w = 0, x = 0, g = 0, S = 0, M = 0, T = 0, U = 0, P = 0, D = 0;
    f.sort(wk);
    for (let C = 0, A = f.length; C < A; C++) {
      const N = f[C], G = N.color, W = N.intensity, j = N.distance, Q = N.shadow && N.shadow.map ? N.shadow.map.texture : null;
      if (N.isAmbientLight)
        h += G.r * W, d += G.g * W, p += G.b * W;
      else if (N.isLightProbe) {
        for (let J = 0; J < 9; J++)
          i.probe[J].addScaledVector(N.sh.coefficients[J], W);
        D++;
      } else if (N.isDirectionalLight) {
        const J = e.get(N);
        if (J.color.copy(N.color).multiplyScalar(N.intensity), N.castShadow) {
          const oe = N.shadow, z = t.get(N);
          z.shadowIntensity = oe.intensity, z.shadowBias = oe.bias, z.shadowNormalBias = oe.normalBias, z.shadowRadius = oe.radius, z.shadowMapSize = oe.mapSize, i.directionalShadow[v] = z, i.directionalShadowMap[v] = Q, i.directionalShadowMatrix[v] = N.shadow.matrix, S++;
        }
        i.directional[v] = J, v++;
      } else if (N.isSpotLight) {
        const J = e.get(N);
        J.position.setFromMatrixPosition(N.matrixWorld), J.color.copy(G).multiplyScalar(W), J.distance = j, J.coneCos = Math.cos(N.angle), J.penumbraCos = Math.cos(N.angle * (1 - N.penumbra)), J.decay = N.decay, i.spot[w] = J;
        const oe = N.shadow;
        if (N.map && (i.spotLightMap[U] = N.map, U++, oe.updateMatrices(N), N.castShadow && P++), i.spotLightMatrix[w] = oe.matrix, N.castShadow) {
          const z = t.get(N);
          z.shadowIntensity = oe.intensity, z.shadowBias = oe.bias, z.shadowNormalBias = oe.normalBias, z.shadowRadius = oe.radius, z.shadowMapSize = oe.mapSize, i.spotShadow[w] = z, i.spotShadowMap[w] = Q, T++;
        }
        w++;
      } else if (N.isRectAreaLight) {
        const J = e.get(N);
        J.color.copy(G).multiplyScalar(W), J.halfWidth.set(N.width * 0.5, 0, 0), J.halfHeight.set(0, N.height * 0.5, 0), i.rectArea[x] = J, x++;
      } else if (N.isPointLight) {
        const J = e.get(N);
        if (J.color.copy(N.color).multiplyScalar(N.intensity), J.distance = N.distance, J.decay = N.decay, N.castShadow) {
          const oe = N.shadow, z = t.get(N);
          z.shadowIntensity = oe.intensity, z.shadowBias = oe.bias, z.shadowNormalBias = oe.normalBias, z.shadowRadius = oe.radius, z.shadowMapSize = oe.mapSize, z.shadowCameraNear = oe.camera.near, z.shadowCameraFar = oe.camera.far, i.pointShadow[y] = z, i.pointShadowMap[y] = Q, i.pointShadowMatrix[y] = N.shadow.matrix, M++;
        }
        i.point[y] = J, y++;
      } else if (N.isHemisphereLight) {
        const J = e.get(N);
        J.skyColor.copy(N.color).multiplyScalar(W), J.groundColor.copy(N.groundColor).multiplyScalar(W), i.hemi[g] = J, g++;
      }
    }
    x > 0 && (n.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = qe.LTC_FLOAT_1, i.rectAreaLTC2 = qe.LTC_FLOAT_2) : (i.rectAreaLTC1 = qe.LTC_HALF_1, i.rectAreaLTC2 = qe.LTC_HALF_2)), i.ambient[0] = h, i.ambient[1] = d, i.ambient[2] = p;
    const R = i.hash;
    (R.directionalLength !== v || R.pointLength !== y || R.spotLength !== w || R.rectAreaLength !== x || R.hemiLength !== g || R.numDirectionalShadows !== S || R.numPointShadows !== M || R.numSpotShadows !== T || R.numSpotMaps !== U || R.numLightProbes !== D) && (i.directional.length = v, i.spot.length = w, i.rectArea.length = x, i.point.length = y, i.hemi.length = g, i.directionalShadow.length = S, i.directionalShadowMap.length = S, i.pointShadow.length = M, i.pointShadowMap.length = M, i.spotShadow.length = T, i.spotShadowMap.length = T, i.directionalShadowMatrix.length = S, i.pointShadowMatrix.length = M, i.spotLightMatrix.length = T + U - P, i.spotLightMap.length = U, i.numSpotLightShadowsWithMaps = P, i.numLightProbes = D, R.directionalLength = v, R.pointLength = y, R.spotLength = w, R.rectAreaLength = x, R.hemiLength = g, R.numDirectionalShadows = S, R.numPointShadows = M, R.numSpotShadows = T, R.numSpotMaps = U, R.numLightProbes = D, i.version = Mk++);
  }
  function c(f, h) {
    let d = 0, p = 0, v = 0, y = 0, w = 0;
    const x = h.matrixWorldInverse;
    for (let g = 0, S = f.length; g < S; g++) {
      const M = f[g];
      if (M.isDirectionalLight) {
        const T = i.directional[d];
        T.direction.setFromMatrixPosition(M.matrixWorld), r.setFromMatrixPosition(M.target.matrixWorld), T.direction.sub(r), T.direction.transformDirection(x), d++;
      } else if (M.isSpotLight) {
        const T = i.spot[v];
        T.position.setFromMatrixPosition(M.matrixWorld), T.position.applyMatrix4(x), T.direction.setFromMatrixPosition(M.matrixWorld), r.setFromMatrixPosition(M.target.matrixWorld), T.direction.sub(r), T.direction.transformDirection(x), v++;
      } else if (M.isRectAreaLight) {
        const T = i.rectArea[y];
        T.position.setFromMatrixPosition(M.matrixWorld), T.position.applyMatrix4(x), o.identity(), s.copy(M.matrixWorld), s.premultiply(x), o.extractRotation(s), T.halfWidth.set(M.width * 0.5, 0, 0), T.halfHeight.set(0, M.height * 0.5, 0), T.halfWidth.applyMatrix4(o), T.halfHeight.applyMatrix4(o), y++;
      } else if (M.isPointLight) {
        const T = i.point[p];
        T.position.setFromMatrixPosition(M.matrixWorld), T.position.applyMatrix4(x), p++;
      } else if (M.isHemisphereLight) {
        const T = i.hemi[w];
        T.direction.setFromMatrixPosition(M.matrixWorld), T.direction.transformDirection(x), w++;
      }
    }
  }
  return {
    setup: a,
    setupView: c,
    state: i
  };
}
function SE(n) {
  const e = new Ek(n), t = [], i = [];
  function r(h) {
    f.camera = h, t.length = 0, i.length = 0;
  }
  function s(h) {
    t.push(h);
  }
  function o(h) {
    i.push(h);
  }
  function a() {
    e.setup(t);
  }
  function c(h) {
    e.setupView(t, h);
  }
  const f = {
    lightsArray: t,
    shadowsArray: i,
    camera: null,
    lights: e,
    transmissionRenderTarget: {}
  };
  return {
    init: r,
    state: f,
    setupLights: a,
    setupLightsView: c,
    pushLight: s,
    pushShadow: o
  };
}
function Tk(n) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(r, s = 0) {
    const o = e.get(r);
    let a;
    return o === void 0 ? (a = new SE(n), e.set(r, [a])) : s >= o.length ? (a = new SE(n), o.push(a)) : a = o[s], a;
  }
  function i() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: t,
    dispose: i
  };
}
class p1 extends si {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = x2, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class m1 extends si {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const Ak = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, Ck = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function Rk(n, e, t) {
  let i = new ch();
  const r = new _e(), s = new _e(), o = new Vt(), a = new p1({ depthPacking: S2 }), c = new m1(), f = {}, h = t.maxTextureSize, d = { [js]: Ci, [Ci]: js, [Wr]: Wr }, p = new qi({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new _e() },
      radius: { value: 4 }
    },
    vertexShader: Ak,
    fragmentShader: Ck
  }), v = p.clone();
  v.defines.HORIZONTAL_PASS = 1;
  const y = new Dt();
  y.setAttribute(
    "position",
    new nn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const w = new Sn(y, p), x = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = xg;
  let g = this.type;
  this.render = function(P, D, R) {
    if (x.enabled === !1 || x.autoUpdate === !1 && x.needsUpdate === !1 || P.length === 0)
      return;
    const C = n.getRenderTarget(), A = n.getActiveCubeFace(), N = n.getActiveMipmapLevel(), G = n.state;
    G.setBlending(ps), G.buffers.color.setClear(1, 1, 1, 1), G.buffers.depth.setTest(!0), G.setScissorTest(!1);
    const W = g !== Br && this.type === Br, j = g === Br && this.type !== Br;
    for (let Q = 0, J = P.length; Q < J; Q++) {
      const oe = P[Q], z = oe.shadow;
      if (z === void 0) {
        console.warn("THREE.WebGLShadowMap:", oe, "has no shadow.");
        continue;
      }
      if (z.autoUpdate === !1 && z.needsUpdate === !1)
        continue;
      r.copy(z.mapSize);
      const te = z.getFrameExtents();
      if (r.multiply(te), s.copy(z.mapSize), (r.x > h || r.y > h) && (r.x > h && (s.x = Math.floor(h / te.x), r.x = s.x * te.x, z.mapSize.x = s.x), r.y > h && (s.y = Math.floor(h / te.y), r.y = s.y * te.y, z.mapSize.y = s.y)), z.map === null || W === !0 || j === !0) {
        const he = this.type !== Br ? { minFilter: Qn, magFilter: Qn } : {};
        z.map !== null && z.map.dispose(), z.map = new ar(r.x, r.y, he), z.map.texture.name = oe.name + ".shadowMap", z.camera.updateProjectionMatrix();
      }
      n.setRenderTarget(z.map), n.clear();
      const ne = z.getViewportCount();
      for (let he = 0; he < ne; he++) {
        const Se = z.getViewport(he);
        o.set(
          s.x * Se.x,
          s.y * Se.y,
          s.x * Se.z,
          s.y * Se.w
        ), G.viewport(o), z.updateMatrices(oe, he), i = z.getFrustum(), T(D, R, z.camera, oe, this.type);
      }
      z.isPointLightShadow !== !0 && this.type === Br && S(z, R), z.needsUpdate = !1;
    }
    g = this.type, x.needsUpdate = !1, n.setRenderTarget(C, A, N);
  };
  function S(P, D) {
    const R = e.update(w);
    p.defines.VSM_SAMPLES !== P.blurSamples && (p.defines.VSM_SAMPLES = P.blurSamples, v.defines.VSM_SAMPLES = P.blurSamples, p.needsUpdate = !0, v.needsUpdate = !0), P.mapPass === null && (P.mapPass = new ar(r.x, r.y)), p.uniforms.shadow_pass.value = P.map.texture, p.uniforms.resolution.value = P.mapSize, p.uniforms.radius.value = P.radius, n.setRenderTarget(P.mapPass), n.clear(), n.renderBufferDirect(D, null, R, p, w, null), v.uniforms.shadow_pass.value = P.mapPass.texture, v.uniforms.resolution.value = P.mapSize, v.uniforms.radius.value = P.radius, n.setRenderTarget(P.map), n.clear(), n.renderBufferDirect(D, null, R, v, w, null);
  }
  function M(P, D, R, C) {
    let A = null;
    const N = R.isPointLight === !0 ? P.customDistanceMaterial : P.customDepthMaterial;
    if (N !== void 0)
      A = N;
    else if (A = R.isPointLight === !0 ? c : a, n.localClippingEnabled && D.clipShadows === !0 && Array.isArray(D.clippingPlanes) && D.clippingPlanes.length !== 0 || D.displacementMap && D.displacementScale !== 0 || D.alphaMap && D.alphaTest > 0 || D.map && D.alphaTest > 0) {
      const G = A.uuid, W = D.uuid;
      let j = f[G];
      j === void 0 && (j = {}, f[G] = j);
      let Q = j[W];
      Q === void 0 && (Q = A.clone(), j[W] = Q, D.addEventListener("dispose", U)), A = Q;
    }
    if (A.visible = D.visible, A.wireframe = D.wireframe, C === Br ? A.side = D.shadowSide !== null ? D.shadowSide : D.side : A.side = D.shadowSide !== null ? D.shadowSide : d[D.side], A.alphaMap = D.alphaMap, A.alphaTest = D.alphaTest, A.map = D.map, A.clipShadows = D.clipShadows, A.clippingPlanes = D.clippingPlanes, A.clipIntersection = D.clipIntersection, A.displacementMap = D.displacementMap, A.displacementScale = D.displacementScale, A.displacementBias = D.displacementBias, A.wireframeLinewidth = D.wireframeLinewidth, A.linewidth = D.linewidth, R.isPointLight === !0 && A.isMeshDistanceMaterial === !0) {
      const G = n.properties.get(A);
      G.light = R;
    }
    return A;
  }
  function T(P, D, R, C, A) {
    if (P.visible === !1)
      return;
    if (P.layers.test(D.layers) && (P.isMesh || P.isLine || P.isPoints) && (P.castShadow || P.receiveShadow && A === Br) && (!P.frustumCulled || i.intersectsObject(P))) {
      P.modelViewMatrix.multiplyMatrices(R.matrixWorldInverse, P.matrixWorld);
      const W = e.update(P), j = P.material;
      if (Array.isArray(j)) {
        const Q = W.groups;
        for (let J = 0, oe = Q.length; J < oe; J++) {
          const z = Q[J], te = j[z.materialIndex];
          if (te && te.visible) {
            const ne = M(P, te, C, A);
            P.onBeforeShadow(n, P, D, R, W, ne, z), n.renderBufferDirect(R, null, W, ne, P, z), P.onAfterShadow(n, P, D, R, W, ne, z);
          }
        }
      } else if (j.visible) {
        const Q = M(P, j, C, A);
        P.onBeforeShadow(n, P, D, R, W, Q, null), n.renderBufferDirect(R, null, W, Q, P, null), P.onAfterShadow(n, P, D, R, W, Q, null);
      }
    }
    const G = P.children;
    for (let W = 0, j = G.length; W < j; W++)
      T(G[W], D, R, C, A);
  }
  function U(P) {
    P.target.removeEventListener("dispose", U);
    for (const R in f) {
      const C = f[R], A = P.target.uuid;
      A in C && (C[A].dispose(), delete C[A]);
    }
  }
}
function bk(n) {
  function e() {
    let K = !1;
    const be = new Vt();
    let ie = null;
    const xe = new Vt(0, 0, 0, 0);
    return {
      setMask: function(He) {
        ie !== He && !K && (n.colorMask(He, He, He, He), ie = He);
      },
      setLocked: function(He) {
        K = He;
      },
      setClear: function(He, pt, wt, Ht, rn) {
        rn === !0 && (He *= Ht, pt *= Ht, wt *= Ht), be.set(He, pt, wt, Ht), xe.equals(be) === !1 && (n.clearColor(He, pt, wt, Ht), xe.copy(be));
      },
      reset: function() {
        K = !1, ie = null, xe.set(-1, 0, 0, 0);
      }
    };
  }
  function t() {
    let K = !1, be = null, ie = null, xe = null;
    return {
      setTest: function(He) {
        He ? Ee(n.DEPTH_TEST) : De(n.DEPTH_TEST);
      },
      setMask: function(He) {
        be !== He && !K && (n.depthMask(He), be = He);
      },
      setFunc: function(He) {
        if (ie !== He) {
          switch (He) {
            case t2:
              n.depthFunc(n.NEVER);
              break;
            case n2:
              n.depthFunc(n.ALWAYS);
              break;
            case i2:
              n.depthFunc(n.LESS);
              break;
            case Rf:
              n.depthFunc(n.LEQUAL);
              break;
            case r2:
              n.depthFunc(n.EQUAL);
              break;
            case s2:
              n.depthFunc(n.GEQUAL);
              break;
            case o2:
              n.depthFunc(n.GREATER);
              break;
            case a2:
              n.depthFunc(n.NOTEQUAL);
              break;
            default:
              n.depthFunc(n.LEQUAL);
          }
          ie = He;
        }
      },
      setLocked: function(He) {
        K = He;
      },
      setClear: function(He) {
        xe !== He && (n.clearDepth(He), xe = He);
      },
      reset: function() {
        K = !1, be = null, ie = null, xe = null;
      }
    };
  }
  function i() {
    let K = !1, be = null, ie = null, xe = null, He = null, pt = null, wt = null, Ht = null, rn = null;
    return {
      setTest: function(It) {
        K || (It ? Ee(n.STENCIL_TEST) : De(n.STENCIL_TEST));
      },
      setMask: function(It) {
        be !== It && !K && (n.stencilMask(It), be = It);
      },
      setFunc: function(It, Nn, Un) {
        (ie !== It || xe !== Nn || He !== Un) && (n.stencilFunc(It, Nn, Un), ie = It, xe = Nn, He = Un);
      },
      setOp: function(It, Nn, Un) {
        (pt !== It || wt !== Nn || Ht !== Un) && (n.stencilOp(It, Nn, Un), pt = It, wt = Nn, Ht = Un);
      },
      setLocked: function(It) {
        K = It;
      },
      setClear: function(It) {
        rn !== It && (n.clearStencil(It), rn = It);
      },
      reset: function() {
        K = !1, be = null, ie = null, xe = null, He = null, pt = null, wt = null, Ht = null, rn = null;
      }
    };
  }
  const r = new e(), s = new t(), o = new i(), a = /* @__PURE__ */ new WeakMap(), c = /* @__PURE__ */ new WeakMap();
  let f = {}, h = {}, d = /* @__PURE__ */ new WeakMap(), p = [], v = null, y = !1, w = null, x = null, g = null, S = null, M = null, T = null, U = null, P = new Qe(0, 0, 0), D = 0, R = !1, C = null, A = null, N = null, G = null, W = null;
  const j = n.getParameter(n.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let Q = !1, J = 0;
  const oe = n.getParameter(n.VERSION);
  oe.indexOf("WebGL") !== -1 ? (J = parseFloat(/^WebGL (\d)/.exec(oe)[1]), Q = J >= 1) : oe.indexOf("OpenGL ES") !== -1 && (J = parseFloat(/^OpenGL ES (\d)/.exec(oe)[1]), Q = J >= 2);
  let z = null, te = {};
  const ne = n.getParameter(n.SCISSOR_BOX), he = n.getParameter(n.VIEWPORT), Se = new Vt().fromArray(ne), ke = new Vt().fromArray(he);
  function ce(K, be, ie, xe) {
    const He = new Uint8Array(4), pt = n.createTexture();
    n.bindTexture(K, pt), n.texParameteri(K, n.TEXTURE_MIN_FILTER, n.NEAREST), n.texParameteri(K, n.TEXTURE_MAG_FILTER, n.NEAREST);
    for (let wt = 0; wt < ie; wt++)
      K === n.TEXTURE_3D || K === n.TEXTURE_2D_ARRAY ? n.texImage3D(be, 0, n.RGBA, 1, 1, xe, 0, n.RGBA, n.UNSIGNED_BYTE, He) : n.texImage2D(be + wt, 0, n.RGBA, 1, 1, 0, n.RGBA, n.UNSIGNED_BYTE, He);
    return pt;
  }
  const we = {};
  we[n.TEXTURE_2D] = ce(n.TEXTURE_2D, n.TEXTURE_2D, 1), we[n.TEXTURE_CUBE_MAP] = ce(n.TEXTURE_CUBE_MAP, n.TEXTURE_CUBE_MAP_POSITIVE_X, 6), we[n.TEXTURE_2D_ARRAY] = ce(n.TEXTURE_2D_ARRAY, n.TEXTURE_2D_ARRAY, 1, 1), we[n.TEXTURE_3D] = ce(n.TEXTURE_3D, n.TEXTURE_3D, 1, 1), r.setClear(0, 0, 0, 1), s.setClear(1), o.setClear(0), Ee(n.DEPTH_TEST), s.setFunc(Rf), Ge(!1), Me(A_), Ee(n.CULL_FACE), Ie(ps);
  function Ee(K) {
    f[K] !== !0 && (n.enable(K), f[K] = !0);
  }
  function De(K) {
    f[K] !== !1 && (n.disable(K), f[K] = !1);
  }
  function st(K, be) {
    return h[K] !== be ? (n.bindFramebuffer(K, be), h[K] = be, K === n.DRAW_FRAMEBUFFER && (h[n.FRAMEBUFFER] = be), K === n.FRAMEBUFFER && (h[n.DRAW_FRAMEBUFFER] = be), !0) : !1;
  }
  function Mt(K, be) {
    let ie = p, xe = !1;
    if (K) {
      ie = d.get(be), ie === void 0 && (ie = [], d.set(be, ie));
      const He = K.textures;
      if (ie.length !== He.length || ie[0] !== n.COLOR_ATTACHMENT0) {
        for (let pt = 0, wt = He.length; pt < wt; pt++)
          ie[pt] = n.COLOR_ATTACHMENT0 + pt;
        ie.length = He.length, xe = !0;
      }
    } else
      ie[0] !== n.BACK && (ie[0] = n.BACK, xe = !0);
    xe && n.drawBuffers(ie);
  }
  function dt(K) {
    return v !== K ? (n.useProgram(K), v = K, !0) : !1;
  }
  const xt = {
    [So]: n.FUNC_ADD,
    [kR]: n.FUNC_SUBTRACT,
    [zR]: n.FUNC_REVERSE_SUBTRACT
  };
  xt[BR] = n.MIN, xt[HR] = n.MAX;
  const H = {
    [VR]: n.ZERO,
    [GR]: n.ONE,
    [WR]: n.SRC_COLOR,
    [wm]: n.SRC_ALPHA,
    [KR]: n.SRC_ALPHA_SATURATE,
    [jR]: n.DST_COLOR,
    [YR]: n.DST_ALPHA,
    [XR]: n.ONE_MINUS_SRC_COLOR,
    [Em]: n.ONE_MINUS_SRC_ALPHA,
    [ZR]: n.ONE_MINUS_DST_COLOR,
    [qR]: n.ONE_MINUS_DST_ALPHA,
    [JR]: n.CONSTANT_COLOR,
    [QR]: n.ONE_MINUS_CONSTANT_COLOR,
    [$R]: n.CONSTANT_ALPHA,
    [e2]: n.ONE_MINUS_CONSTANT_ALPHA
  };
  function Ie(K, be, ie, xe, He, pt, wt, Ht, rn, It) {
    if (K === ps) {
      y === !0 && (De(n.BLEND), y = !1);
      return;
    }
    if (y === !1 && (Ee(n.BLEND), y = !0), K !== FR) {
      if (K !== w || It !== R) {
        if ((x !== So || M !== So) && (n.blendEquation(n.FUNC_ADD), x = So, M = So), It)
          switch (K) {
            case Fa:
              n.blendFuncSeparate(n.ONE, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
              break;
            case C_:
              n.blendFunc(n.ONE, n.ONE);
              break;
            case R_:
              n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
              break;
            case b_:
              n.blendFuncSeparate(n.ZERO, n.SRC_COLOR, n.ZERO, n.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", K);
              break;
          }
        else
          switch (K) {
            case Fa:
              n.blendFuncSeparate(n.SRC_ALPHA, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
              break;
            case C_:
              n.blendFunc(n.SRC_ALPHA, n.ONE);
              break;
            case R_:
              n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
              break;
            case b_:
              n.blendFunc(n.ZERO, n.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", K);
              break;
          }
        g = null, S = null, T = null, U = null, P.set(0, 0, 0), D = 0, w = K, R = It;
      }
      return;
    }
    He = He || be, pt = pt || ie, wt = wt || xe, (be !== x || He !== M) && (n.blendEquationSeparate(xt[be], xt[He]), x = be, M = He), (ie !== g || xe !== S || pt !== T || wt !== U) && (n.blendFuncSeparate(H[ie], H[xe], H[pt], H[wt]), g = ie, S = xe, T = pt, U = wt), (Ht.equals(P) === !1 || rn !== D) && (n.blendColor(Ht.r, Ht.g, Ht.b, rn), P.copy(Ht), D = rn), w = K, R = !1;
  }
  function Le(K, be) {
    K.side === Wr ? De(n.CULL_FACE) : Ee(n.CULL_FACE);
    let ie = K.side === Ci;
    be && (ie = !ie), Ge(ie), K.blending === Fa && K.transparent === !1 ? Ie(ps) : Ie(K.blending, K.blendEquation, K.blendSrc, K.blendDst, K.blendEquationAlpha, K.blendSrcAlpha, K.blendDstAlpha, K.blendColor, K.blendAlpha, K.premultipliedAlpha), s.setFunc(K.depthFunc), s.setTest(K.depthTest), s.setMask(K.depthWrite), r.setMask(K.colorWrite);
    const xe = K.stencilWrite;
    o.setTest(xe), xe && (o.setMask(K.stencilWriteMask), o.setFunc(K.stencilFunc, K.stencilRef, K.stencilFuncMask), o.setOp(K.stencilFail, K.stencilZFail, K.stencilZPass)), We(K.polygonOffset, K.polygonOffsetFactor, K.polygonOffsetUnits), K.alphaToCoverage === !0 ? Ee(n.SAMPLE_ALPHA_TO_COVERAGE) : De(n.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function Ge(K) {
    C !== K && (K ? n.frontFace(n.CW) : n.frontFace(n.CCW), C = K);
  }
  function Me(K) {
    K !== NR ? (Ee(n.CULL_FACE), K !== A && (K === A_ ? n.cullFace(n.BACK) : K === UR ? n.cullFace(n.FRONT) : n.cullFace(n.FRONT_AND_BACK))) : De(n.CULL_FACE), A = K;
  }
  function at(K) {
    K !== N && (Q && n.lineWidth(K), N = K);
  }
  function We(K, be, ie) {
    K ? (Ee(n.POLYGON_OFFSET_FILL), (G !== be || W !== ie) && (n.polygonOffset(be, ie), G = be, W = ie)) : De(n.POLYGON_OFFSET_FILL);
  }
  function et(K) {
    K ? Ee(n.SCISSOR_TEST) : De(n.SCISSOR_TEST);
  }
  function q(K) {
    K === void 0 && (K = n.TEXTURE0 + j - 1), z !== K && (n.activeTexture(K), z = K);
  }
  function O(K, be, ie) {
    ie === void 0 && (z === null ? ie = n.TEXTURE0 + j - 1 : ie = z);
    let xe = te[ie];
    xe === void 0 && (xe = { type: void 0, texture: void 0 }, te[ie] = xe), (xe.type !== K || xe.texture !== be) && (z !== ie && (n.activeTexture(ie), z = ie), n.bindTexture(K, be || we[K]), xe.type = K, xe.texture = be);
  }
  function ue() {
    const K = te[z];
    K !== void 0 && K.type !== void 0 && (n.bindTexture(K.type, null), K.type = void 0, K.texture = void 0);
  }
  function Te() {
    try {
      n.compressedTexImage2D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Ae() {
    try {
      n.compressedTexImage3D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Ce() {
    try {
      n.texSubImage2D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function ot() {
    try {
      n.texSubImage3D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Ve() {
    try {
      n.compressedTexSubImage2D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Je() {
    try {
      n.compressedTexSubImage3D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function _t() {
    try {
      n.texStorage2D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Ue() {
    try {
      n.texStorage3D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Ze() {
    try {
      n.texImage2D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function Nt() {
    try {
      n.texImage3D.apply(n, arguments);
    } catch (K) {
      console.error("THREE.WebGLState:", K);
    }
  }
  function ht(K) {
    Se.equals(K) === !1 && (n.scissor(K.x, K.y, K.z, K.w), Se.copy(K));
  }
  function Be(K) {
    ke.equals(K) === !1 && (n.viewport(K.x, K.y, K.z, K.w), ke.copy(K));
  }
  function ee(K, be) {
    let ie = c.get(be);
    ie === void 0 && (ie = /* @__PURE__ */ new WeakMap(), c.set(be, ie));
    let xe = ie.get(K);
    xe === void 0 && (xe = n.getUniformBlockIndex(be, K.name), ie.set(K, xe));
  }
  function ye(K, be) {
    const xe = c.get(be).get(K);
    a.get(be) !== xe && (n.uniformBlockBinding(be, xe, K.__bindingPointIndex), a.set(be, xe));
  }
  function ze() {
    n.disable(n.BLEND), n.disable(n.CULL_FACE), n.disable(n.DEPTH_TEST), n.disable(n.POLYGON_OFFSET_FILL), n.disable(n.SCISSOR_TEST), n.disable(n.STENCIL_TEST), n.disable(n.SAMPLE_ALPHA_TO_COVERAGE), n.blendEquation(n.FUNC_ADD), n.blendFunc(n.ONE, n.ZERO), n.blendFuncSeparate(n.ONE, n.ZERO, n.ONE, n.ZERO), n.blendColor(0, 0, 0, 0), n.colorMask(!0, !0, !0, !0), n.clearColor(0, 0, 0, 0), n.depthMask(!0), n.depthFunc(n.LESS), n.clearDepth(1), n.stencilMask(4294967295), n.stencilFunc(n.ALWAYS, 0, 4294967295), n.stencilOp(n.KEEP, n.KEEP, n.KEEP), n.clearStencil(0), n.cullFace(n.BACK), n.frontFace(n.CCW), n.polygonOffset(0, 0), n.activeTexture(n.TEXTURE0), n.bindFramebuffer(n.FRAMEBUFFER, null), n.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), n.bindFramebuffer(n.READ_FRAMEBUFFER, null), n.useProgram(null), n.lineWidth(1), n.scissor(0, 0, n.canvas.width, n.canvas.height), n.viewport(0, 0, n.canvas.width, n.canvas.height), f = {}, z = null, te = {}, h = {}, d = /* @__PURE__ */ new WeakMap(), p = [], v = null, y = !1, w = null, x = null, g = null, S = null, M = null, T = null, U = null, P = new Qe(0, 0, 0), D = 0, R = !1, C = null, A = null, N = null, G = null, W = null, Se.set(0, 0, n.canvas.width, n.canvas.height), ke.set(0, 0, n.canvas.width, n.canvas.height), r.reset(), s.reset(), o.reset();
  }
  return {
    buffers: {
      color: r,
      depth: s,
      stencil: o
    },
    enable: Ee,
    disable: De,
    bindFramebuffer: st,
    drawBuffers: Mt,
    useProgram: dt,
    setBlending: Ie,
    setMaterial: Le,
    setFlipSided: Ge,
    setCullFace: Me,
    setLineWidth: at,
    setPolygonOffset: We,
    setScissorTest: et,
    activeTexture: q,
    bindTexture: O,
    unbindTexture: ue,
    compressedTexImage2D: Te,
    compressedTexImage3D: Ae,
    texImage2D: Ze,
    texImage3D: Nt,
    updateUBOMapping: ee,
    uniformBlockBinding: ye,
    texStorage2D: _t,
    texStorage3D: Ue,
    texSubImage2D: Ce,
    texSubImage3D: ot,
    compressedTexSubImage2D: Ve,
    compressedTexSubImage3D: Je,
    scissor: ht,
    viewport: Be,
    reset: ze
  };
}
function Pk(n, e) {
  const t = n.image && n.image.width ? n.image.width / n.image.height : 1;
  return t > e ? (n.repeat.x = 1, n.repeat.y = t / e, n.offset.x = 0, n.offset.y = (1 - n.repeat.y) / 2) : (n.repeat.x = e / t, n.repeat.y = 1, n.offset.x = (1 - n.repeat.x) / 2, n.offset.y = 0), n;
}
function Ik(n, e) {
  const t = n.image && n.image.width ? n.image.width / n.image.height : 1;
  return t > e ? (n.repeat.x = e / t, n.repeat.y = 1, n.offset.x = (1 - n.repeat.x) / 2, n.offset.y = 0) : (n.repeat.x = 1, n.repeat.y = t / e, n.offset.x = 0, n.offset.y = (1 - n.repeat.y) / 2), n;
}
function Lk(n) {
  return n.repeat.x = 1, n.repeat.y = 1, n.offset.x = 0, n.offset.y = 0, n;
}
function O_(n, e, t, i) {
  const r = Dk(i);
  switch (t) {
    case Qx:
      return n * e;
    case e1:
      return n * e;
    case t1:
      return n * e * 2;
    case sh:
      return n * e / r.components * r.byteLength;
    case oh:
      return n * e / r.components * r.byteLength;
    case n1:
      return n * e * 2 / r.components * r.byteLength;
    case Tg:
      return n * e * 2 / r.components * r.byteLength;
    case $x:
      return n * e * 3 / r.components * r.byteLength;
    case Ln:
      return n * e * 4 / r.components * r.byteLength;
    case Ag:
      return n * e * 4 / r.components * r.byteLength;
    case $c:
    case ef:
      return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case tf:
    case nf:
      return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case Am:
    case Rm:
      return Math.max(n, 16) * Math.max(e, 8) / 4;
    case Tm:
    case Cm:
      return Math.max(n, 8) * Math.max(e, 8) / 2;
    case bm:
    case Pm:
      return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case Im:
      return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case Lm:
      return Math.floor((n + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case Dm:
      return Math.floor((n + 4) / 5) * Math.floor((e + 3) / 4) * 16;
    case Nm:
      return Math.floor((n + 4) / 5) * Math.floor((e + 4) / 5) * 16;
    case Um:
      return Math.floor((n + 5) / 6) * Math.floor((e + 4) / 5) * 16;
    case Om:
      return Math.floor((n + 5) / 6) * Math.floor((e + 5) / 6) * 16;
    case Fm:
      return Math.floor((n + 7) / 8) * Math.floor((e + 4) / 5) * 16;
    case km:
      return Math.floor((n + 7) / 8) * Math.floor((e + 5) / 6) * 16;
    case zm:
      return Math.floor((n + 7) / 8) * Math.floor((e + 7) / 8) * 16;
    case Bm:
      return Math.floor((n + 9) / 10) * Math.floor((e + 4) / 5) * 16;
    case Hm:
      return Math.floor((n + 9) / 10) * Math.floor((e + 5) / 6) * 16;
    case Vm:
      return Math.floor((n + 9) / 10) * Math.floor((e + 7) / 8) * 16;
    case Gm:
      return Math.floor((n + 9) / 10) * Math.floor((e + 9) / 10) * 16;
    case Wm:
      return Math.floor((n + 11) / 12) * Math.floor((e + 9) / 10) * 16;
    case Xm:
      return Math.floor((n + 11) / 12) * Math.floor((e + 11) / 12) * 16;
    case rf:
    case Ym:
    case qm:
      return Math.ceil(n / 4) * Math.ceil(e / 4) * 16;
    case i1:
    case jm:
      return Math.ceil(n / 4) * Math.ceil(e / 4) * 8;
    case Zm:
    case Km:
      return Math.ceil(n / 4) * Math.ceil(e / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${t} format.`
  );
}
function Dk(n) {
  switch (n) {
    case Yi:
    case Sg:
      return { byteLength: 1, components: 1 };
    case Au:
    case Mg:
    case $n:
      return { byteLength: 2, components: 1 };
    case wg:
    case Eg:
      return { byteLength: 2, components: 4 };
    case ys:
    case rh:
    case xn:
      return { byteLength: 4, components: 1 };
    case Jx:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${n}.`);
}
const Nk = {
  contain: Pk,
  cover: Ik,
  fill: Lk,
  getByteLength: O_
};
function Uk(n, e, t, i, r, s, o) {
  const a = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, c = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), f = new _e(), h = /* @__PURE__ */ new WeakMap();
  let d;
  const p = /* @__PURE__ */ new WeakMap();
  let v = !1;
  try {
    v = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function y(q, O) {
    return v ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(q, O)
    ) : zf("canvas");
  }
  function w(q, O, ue) {
    let Te = 1;
    const Ae = et(q);
    if ((Ae.width > ue || Ae.height > ue) && (Te = ue / Math.max(Ae.width, Ae.height)), Te < 1)
      if (typeof HTMLImageElement < "u" && q instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && q instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && q instanceof ImageBitmap || typeof VideoFrame < "u" && q instanceof VideoFrame) {
        const Ce = Math.floor(Te * Ae.width), ot = Math.floor(Te * Ae.height);
        d === void 0 && (d = y(Ce, ot));
        const Ve = O ? y(Ce, ot) : d;
        return Ve.width = Ce, Ve.height = ot, Ve.getContext("2d").drawImage(q, 0, 0, Ce, ot), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + Ae.width + "x" + Ae.height + ") to (" + Ce + "x" + ot + ")."), Ve;
      } else
        return "data" in q && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + Ae.width + "x" + Ae.height + ")."), q;
    return q;
  }
  function x(q) {
    return q.generateMipmaps && q.minFilter !== Qn && q.minFilter !== $t;
  }
  function g(q) {
    n.generateMipmap(q);
  }
  function S(q, O, ue, Te, Ae = !1) {
    if (q !== null) {
      if (n[q] !== void 0)
        return n[q];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + q + "'");
    }
    let Ce = O;
    if (O === n.RED && (ue === n.FLOAT && (Ce = n.R32F), ue === n.HALF_FLOAT && (Ce = n.R16F), ue === n.UNSIGNED_BYTE && (Ce = n.R8)), O === n.RED_INTEGER && (ue === n.UNSIGNED_BYTE && (Ce = n.R8UI), ue === n.UNSIGNED_SHORT && (Ce = n.R16UI), ue === n.UNSIGNED_INT && (Ce = n.R32UI), ue === n.BYTE && (Ce = n.R8I), ue === n.SHORT && (Ce = n.R16I), ue === n.INT && (Ce = n.R32I)), O === n.RG && (ue === n.FLOAT && (Ce = n.RG32F), ue === n.HALF_FLOAT && (Ce = n.RG16F), ue === n.UNSIGNED_BYTE && (Ce = n.RG8)), O === n.RG_INTEGER && (ue === n.UNSIGNED_BYTE && (Ce = n.RG8UI), ue === n.UNSIGNED_SHORT && (Ce = n.RG16UI), ue === n.UNSIGNED_INT && (Ce = n.RG32UI), ue === n.BYTE && (Ce = n.RG8I), ue === n.SHORT && (Ce = n.RG16I), ue === n.INT && (Ce = n.RG32I)), O === n.RGB && ue === n.UNSIGNED_INT_5_9_9_9_REV && (Ce = n.RGB9_E5), O === n.RGBA) {
      const ot = Ae ? Nf : Jt.getTransfer(Te);
      ue === n.FLOAT && (Ce = n.RGBA32F), ue === n.HALF_FLOAT && (Ce = n.RGBA16F), ue === n.UNSIGNED_BYTE && (Ce = ot === an ? n.SRGB8_ALPHA8 : n.RGBA8), ue === n.UNSIGNED_SHORT_4_4_4_4 && (Ce = n.RGBA4), ue === n.UNSIGNED_SHORT_5_5_5_1 && (Ce = n.RGB5_A1);
    }
    return (Ce === n.R16F || Ce === n.R32F || Ce === n.RG16F || Ce === n.RG32F || Ce === n.RGBA16F || Ce === n.RGBA32F) && e.get("EXT_color_buffer_float"), Ce;
  }
  function M(q, O) {
    let ue;
    return q ? O === null || O === ys || O === qa ? ue = n.DEPTH24_STENCIL8 : O === xn ? ue = n.DEPTH32F_STENCIL8 : O === Au && (ue = n.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : O === null || O === ys || O === qa ? ue = n.DEPTH_COMPONENT24 : O === xn ? ue = n.DEPTH_COMPONENT32F : O === Au && (ue = n.DEPTH_COMPONENT16), ue;
  }
  function T(q, O) {
    return x(q) === !0 || q.isFramebufferTexture && q.minFilter !== Qn && q.minFilter !== $t ? Math.log2(Math.max(O.width, O.height)) + 1 : q.mipmaps !== void 0 && q.mipmaps.length > 0 ? q.mipmaps.length : q.isCompressedTexture && Array.isArray(q.image) ? O.mipmaps.length : 1;
  }
  function U(q) {
    const O = q.target;
    O.removeEventListener("dispose", U), D(O), O.isVideoTexture && h.delete(O);
  }
  function P(q) {
    const O = q.target;
    O.removeEventListener("dispose", P), C(O);
  }
  function D(q) {
    const O = i.get(q);
    if (O.__webglInit === void 0)
      return;
    const ue = q.source, Te = p.get(ue);
    if (Te) {
      const Ae = Te[O.__cacheKey];
      Ae.usedTimes--, Ae.usedTimes === 0 && R(q), Object.keys(Te).length === 0 && p.delete(ue);
    }
    i.remove(q);
  }
  function R(q) {
    const O = i.get(q);
    n.deleteTexture(O.__webglTexture);
    const ue = q.source, Te = p.get(ue);
    delete Te[O.__cacheKey], o.memory.textures--;
  }
  function C(q) {
    const O = i.get(q);
    if (q.depthTexture && q.depthTexture.dispose(), q.isWebGLCubeRenderTarget)
      for (let Te = 0; Te < 6; Te++) {
        if (Array.isArray(O.__webglFramebuffer[Te]))
          for (let Ae = 0; Ae < O.__webglFramebuffer[Te].length; Ae++)
            n.deleteFramebuffer(O.__webglFramebuffer[Te][Ae]);
        else
          n.deleteFramebuffer(O.__webglFramebuffer[Te]);
        O.__webglDepthbuffer && n.deleteRenderbuffer(O.__webglDepthbuffer[Te]);
      }
    else {
      if (Array.isArray(O.__webglFramebuffer))
        for (let Te = 0; Te < O.__webglFramebuffer.length; Te++)
          n.deleteFramebuffer(O.__webglFramebuffer[Te]);
      else
        n.deleteFramebuffer(O.__webglFramebuffer);
      if (O.__webglDepthbuffer && n.deleteRenderbuffer(O.__webglDepthbuffer), O.__webglMultisampledFramebuffer && n.deleteFramebuffer(O.__webglMultisampledFramebuffer), O.__webglColorRenderbuffer)
        for (let Te = 0; Te < O.__webglColorRenderbuffer.length; Te++)
          O.__webglColorRenderbuffer[Te] && n.deleteRenderbuffer(O.__webglColorRenderbuffer[Te]);
      O.__webglDepthRenderbuffer && n.deleteRenderbuffer(O.__webglDepthRenderbuffer);
    }
    const ue = q.textures;
    for (let Te = 0, Ae = ue.length; Te < Ae; Te++) {
      const Ce = i.get(ue[Te]);
      Ce.__webglTexture && (n.deleteTexture(Ce.__webglTexture), o.memory.textures--), i.remove(ue[Te]);
    }
    i.remove(q);
  }
  let A = 0;
  function N() {
    A = 0;
  }
  function G() {
    const q = A;
    return q >= r.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + q + " texture units while this GPU supports only " + r.maxTextures), A += 1, q;
  }
  function W(q) {
    const O = [];
    return O.push(q.wrapS), O.push(q.wrapT), O.push(q.wrapR || 0), O.push(q.magFilter), O.push(q.minFilter), O.push(q.anisotropy), O.push(q.internalFormat), O.push(q.format), O.push(q.type), O.push(q.generateMipmaps), O.push(q.premultiplyAlpha), O.push(q.flipY), O.push(q.unpackAlignment), O.push(q.colorSpace), O.join();
  }
  function j(q, O) {
    const ue = i.get(q);
    if (q.isVideoTexture && at(q), q.isRenderTargetTexture === !1 && q.version > 0 && ue.__version !== q.version) {
      const Te = q.image;
      if (Te === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (Te.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        ke(ue, q, O);
        return;
      }
    }
    t.bindTexture(n.TEXTURE_2D, ue.__webglTexture, n.TEXTURE0 + O);
  }
  function Q(q, O) {
    const ue = i.get(q);
    if (q.version > 0 && ue.__version !== q.version) {
      ke(ue, q, O);
      return;
    }
    t.bindTexture(n.TEXTURE_2D_ARRAY, ue.__webglTexture, n.TEXTURE0 + O);
  }
  function J(q, O) {
    const ue = i.get(q);
    if (q.version > 0 && ue.__version !== q.version) {
      ke(ue, q, O);
      return;
    }
    t.bindTexture(n.TEXTURE_3D, ue.__webglTexture, n.TEXTURE0 + O);
  }
  function oe(q, O) {
    const ue = i.get(q);
    if (q.version > 0 && ue.__version !== q.version) {
      ce(ue, q, O);
      return;
    }
    t.bindTexture(n.TEXTURE_CUBE_MAP, ue.__webglTexture, n.TEXTURE0 + O);
  }
  const z = {
    [Pf]: n.REPEAT,
    [Bn]: n.CLAMP_TO_EDGE,
    [If]: n.MIRRORED_REPEAT
  }, te = {
    [Qn]: n.NEAREST,
    [Kx]: n.NEAREST_MIPMAP_NEAREST,
    [ru]: n.NEAREST_MIPMAP_LINEAR,
    [$t]: n.LINEAR,
    [Qc]: n.LINEAR_MIPMAP_NEAREST,
    [us]: n.LINEAR_MIPMAP_LINEAR
  }, ne = {
    [w2]: n.NEVER,
    [b2]: n.ALWAYS,
    [E2]: n.LESS,
    [s1]: n.LEQUAL,
    [T2]: n.EQUAL,
    [R2]: n.GEQUAL,
    [A2]: n.GREATER,
    [C2]: n.NOTEQUAL
  };
  function he(q, O) {
    if (O.type === xn && e.has("OES_texture_float_linear") === !1 && (O.magFilter === $t || O.magFilter === Qc || O.magFilter === ru || O.magFilter === us || O.minFilter === $t || O.minFilter === Qc || O.minFilter === ru || O.minFilter === us) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), n.texParameteri(q, n.TEXTURE_WRAP_S, z[O.wrapS]), n.texParameteri(q, n.TEXTURE_WRAP_T, z[O.wrapT]), (q === n.TEXTURE_3D || q === n.TEXTURE_2D_ARRAY) && n.texParameteri(q, n.TEXTURE_WRAP_R, z[O.wrapR]), n.texParameteri(q, n.TEXTURE_MAG_FILTER, te[O.magFilter]), n.texParameteri(q, n.TEXTURE_MIN_FILTER, te[O.minFilter]), O.compareFunction && (n.texParameteri(q, n.TEXTURE_COMPARE_MODE, n.COMPARE_REF_TO_TEXTURE), n.texParameteri(q, n.TEXTURE_COMPARE_FUNC, ne[O.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      if (O.magFilter === Qn || O.minFilter !== ru && O.minFilter !== us || O.type === xn && e.has("OES_texture_float_linear") === !1)
        return;
      if (O.anisotropy > 1 || i.get(O).__currentAnisotropy) {
        const ue = e.get("EXT_texture_filter_anisotropic");
        n.texParameterf(q, ue.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(O.anisotropy, r.getMaxAnisotropy())), i.get(O).__currentAnisotropy = O.anisotropy;
      }
    }
  }
  function Se(q, O) {
    let ue = !1;
    q.__webglInit === void 0 && (q.__webglInit = !0, O.addEventListener("dispose", U));
    const Te = O.source;
    let Ae = p.get(Te);
    Ae === void 0 && (Ae = {}, p.set(Te, Ae));
    const Ce = W(O);
    if (Ce !== q.__cacheKey) {
      Ae[Ce] === void 0 && (Ae[Ce] = {
        texture: n.createTexture(),
        usedTimes: 0
      }, o.memory.textures++, ue = !0), Ae[Ce].usedTimes++;
      const ot = Ae[q.__cacheKey];
      ot !== void 0 && (Ae[q.__cacheKey].usedTimes--, ot.usedTimes === 0 && R(O)), q.__cacheKey = Ce, q.__webglTexture = Ae[Ce].texture;
    }
    return ue;
  }
  function ke(q, O, ue) {
    let Te = n.TEXTURE_2D;
    (O.isDataArrayTexture || O.isCompressedArrayTexture) && (Te = n.TEXTURE_2D_ARRAY), O.isData3DTexture && (Te = n.TEXTURE_3D);
    const Ae = Se(q, O), Ce = O.source;
    t.bindTexture(Te, q.__webglTexture, n.TEXTURE0 + ue);
    const ot = i.get(Ce);
    if (Ce.version !== ot.__version || Ae === !0) {
      t.activeTexture(n.TEXTURE0 + ue);
      const Ve = Jt.getPrimaries(Jt.workingColorSpace), Je = O.colorSpace === ks ? null : Jt.getPrimaries(O.colorSpace), _t = O.colorSpace === ks || Ve === Je ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
      n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, O.flipY), n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha), n.pixelStorei(n.UNPACK_ALIGNMENT, O.unpackAlignment), n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, _t);
      let Ue = w(O.image, !1, r.maxTextureSize);
      Ue = We(O, Ue);
      const Ze = s.convert(O.format, O.colorSpace), Nt = s.convert(O.type);
      let ht = S(O.internalFormat, Ze, Nt, O.colorSpace, O.isVideoTexture);
      he(Te, O);
      let Be;
      const ee = O.mipmaps, ye = O.isVideoTexture !== !0, ze = ot.__version === void 0 || Ae === !0, K = Ce.dataReady, be = T(O, Ue);
      if (O.isDepthTexture)
        ht = M(O.format === ja, O.type), ze && (ye ? t.texStorage2D(n.TEXTURE_2D, 1, ht, Ue.width, Ue.height) : t.texImage2D(n.TEXTURE_2D, 0, ht, Ue.width, Ue.height, 0, Ze, Nt, null));
      else if (O.isDataTexture)
        if (ee.length > 0) {
          ye && ze && t.texStorage2D(n.TEXTURE_2D, be, ht, ee[0].width, ee[0].height);
          for (let ie = 0, xe = ee.length; ie < xe; ie++)
            Be = ee[ie], ye ? K && t.texSubImage2D(n.TEXTURE_2D, ie, 0, 0, Be.width, Be.height, Ze, Nt, Be.data) : t.texImage2D(n.TEXTURE_2D, ie, ht, Be.width, Be.height, 0, Ze, Nt, Be.data);
          O.generateMipmaps = !1;
        } else
          ye ? (ze && t.texStorage2D(n.TEXTURE_2D, be, ht, Ue.width, Ue.height), K && t.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, Ue.width, Ue.height, Ze, Nt, Ue.data)) : t.texImage2D(n.TEXTURE_2D, 0, ht, Ue.width, Ue.height, 0, Ze, Nt, Ue.data);
      else if (O.isCompressedTexture)
        if (O.isCompressedArrayTexture) {
          ye && ze && t.texStorage3D(n.TEXTURE_2D_ARRAY, be, ht, ee[0].width, ee[0].height, Ue.depth);
          for (let ie = 0, xe = ee.length; ie < xe; ie++)
            if (Be = ee[ie], O.format !== Ln)
              if (Ze !== null)
                if (ye) {
                  if (K)
                    if (O.layerUpdates.size > 0) {
                      const He = O_(Be.width, Be.height, O.format, O.type);
                      for (const pt of O.layerUpdates) {
                        const wt = Be.data.subarray(
                          pt * He / Be.data.BYTES_PER_ELEMENT,
                          (pt + 1) * He / Be.data.BYTES_PER_ELEMENT
                        );
                        t.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY, ie, 0, 0, pt, Be.width, Be.height, 1, Ze, wt, 0, 0);
                      }
                      O.clearLayerUpdates();
                    } else
                      t.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY, ie, 0, 0, 0, Be.width, Be.height, Ue.depth, Ze, Be.data, 0, 0);
                } else
                  t.compressedTexImage3D(n.TEXTURE_2D_ARRAY, ie, ht, Be.width, Be.height, Ue.depth, 0, Be.data, 0, 0);
              else
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            else
              ye ? K && t.texSubImage3D(n.TEXTURE_2D_ARRAY, ie, 0, 0, 0, Be.width, Be.height, Ue.depth, Ze, Nt, Be.data) : t.texImage3D(n.TEXTURE_2D_ARRAY, ie, ht, Be.width, Be.height, Ue.depth, 0, Ze, Nt, Be.data);
        } else {
          ye && ze && t.texStorage2D(n.TEXTURE_2D, be, ht, ee[0].width, ee[0].height);
          for (let ie = 0, xe = ee.length; ie < xe; ie++)
            Be = ee[ie], O.format !== Ln ? Ze !== null ? ye ? K && t.compressedTexSubImage2D(n.TEXTURE_2D, ie, 0, 0, Be.width, Be.height, Ze, Be.data) : t.compressedTexImage2D(n.TEXTURE_2D, ie, ht, Be.width, Be.height, 0, Be.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ye ? K && t.texSubImage2D(n.TEXTURE_2D, ie, 0, 0, Be.width, Be.height, Ze, Nt, Be.data) : t.texImage2D(n.TEXTURE_2D, ie, ht, Be.width, Be.height, 0, Ze, Nt, Be.data);
        }
      else if (O.isDataArrayTexture)
        if (ye) {
          if (ze && t.texStorage3D(n.TEXTURE_2D_ARRAY, be, ht, Ue.width, Ue.height, Ue.depth), K)
            if (O.layerUpdates.size > 0) {
              const ie = O_(Ue.width, Ue.height, O.format, O.type);
              for (const xe of O.layerUpdates) {
                const He = Ue.data.subarray(
                  xe * ie / Ue.data.BYTES_PER_ELEMENT,
                  (xe + 1) * ie / Ue.data.BYTES_PER_ELEMENT
                );
                t.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, xe, Ue.width, Ue.height, 1, Ze, Nt, He);
              }
              O.clearLayerUpdates();
            } else
              t.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Ue.width, Ue.height, Ue.depth, Ze, Nt, Ue.data);
        } else
          t.texImage3D(n.TEXTURE_2D_ARRAY, 0, ht, Ue.width, Ue.height, Ue.depth, 0, Ze, Nt, Ue.data);
      else if (O.isData3DTexture)
        ye ? (ze && t.texStorage3D(n.TEXTURE_3D, be, ht, Ue.width, Ue.height, Ue.depth), K && t.texSubImage3D(n.TEXTURE_3D, 0, 0, 0, 0, Ue.width, Ue.height, Ue.depth, Ze, Nt, Ue.data)) : t.texImage3D(n.TEXTURE_3D, 0, ht, Ue.width, Ue.height, Ue.depth, 0, Ze, Nt, Ue.data);
      else if (O.isFramebufferTexture) {
        if (ze)
          if (ye)
            t.texStorage2D(n.TEXTURE_2D, be, ht, Ue.width, Ue.height);
          else {
            let ie = Ue.width, xe = Ue.height;
            for (let He = 0; He < be; He++)
              t.texImage2D(n.TEXTURE_2D, He, ht, ie, xe, 0, Ze, Nt, null), ie >>= 1, xe >>= 1;
          }
      } else if (ee.length > 0) {
        if (ye && ze) {
          const ie = et(ee[0]);
          t.texStorage2D(n.TEXTURE_2D, be, ht, ie.width, ie.height);
        }
        for (let ie = 0, xe = ee.length; ie < xe; ie++)
          Be = ee[ie], ye ? K && t.texSubImage2D(n.TEXTURE_2D, ie, 0, 0, Ze, Nt, Be) : t.texImage2D(n.TEXTURE_2D, ie, ht, Ze, Nt, Be);
        O.generateMipmaps = !1;
      } else if (ye) {
        if (ze) {
          const ie = et(Ue);
          t.texStorage2D(n.TEXTURE_2D, be, ht, ie.width, ie.height);
        }
        K && t.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, Ze, Nt, Ue);
      } else
        t.texImage2D(n.TEXTURE_2D, 0, ht, Ze, Nt, Ue);
      x(O) && g(Te), ot.__version = Ce.version, O.onUpdate && O.onUpdate(O);
    }
    q.__version = O.version;
  }
  function ce(q, O, ue) {
    if (O.image.length !== 6)
      return;
    const Te = Se(q, O), Ae = O.source;
    t.bindTexture(n.TEXTURE_CUBE_MAP, q.__webglTexture, n.TEXTURE0 + ue);
    const Ce = i.get(Ae);
    if (Ae.version !== Ce.__version || Te === !0) {
      t.activeTexture(n.TEXTURE0 + ue);
      const ot = Jt.getPrimaries(Jt.workingColorSpace), Ve = O.colorSpace === ks ? null : Jt.getPrimaries(O.colorSpace), Je = O.colorSpace === ks || ot === Ve ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
      n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, O.flipY), n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha), n.pixelStorei(n.UNPACK_ALIGNMENT, O.unpackAlignment), n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, Je);
      const _t = O.isCompressedTexture || O.image[0].isCompressedTexture, Ue = O.image[0] && O.image[0].isDataTexture, Ze = [];
      for (let xe = 0; xe < 6; xe++)
        !_t && !Ue ? Ze[xe] = w(O.image[xe], !0, r.maxCubemapSize) : Ze[xe] = Ue ? O.image[xe].image : O.image[xe], Ze[xe] = We(O, Ze[xe]);
      const Nt = Ze[0], ht = s.convert(O.format, O.colorSpace), Be = s.convert(O.type), ee = S(O.internalFormat, ht, Be, O.colorSpace), ye = O.isVideoTexture !== !0, ze = Ce.__version === void 0 || Te === !0, K = Ae.dataReady;
      let be = T(O, Nt);
      he(n.TEXTURE_CUBE_MAP, O);
      let ie;
      if (_t) {
        ye && ze && t.texStorage2D(n.TEXTURE_CUBE_MAP, be, ee, Nt.width, Nt.height);
        for (let xe = 0; xe < 6; xe++) {
          ie = Ze[xe].mipmaps;
          for (let He = 0; He < ie.length; He++) {
            const pt = ie[He];
            O.format !== Ln ? ht !== null ? ye ? K && t.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He, 0, 0, pt.width, pt.height, ht, pt.data) : t.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He, ee, pt.width, pt.height, 0, pt.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : ye ? K && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He, 0, 0, pt.width, pt.height, ht, Be, pt.data) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He, ee, pt.width, pt.height, 0, ht, Be, pt.data);
          }
        }
      } else {
        if (ie = O.mipmaps, ye && ze) {
          ie.length > 0 && be++;
          const xe = et(Ze[0]);
          t.texStorage2D(n.TEXTURE_CUBE_MAP, be, ee, xe.width, xe.height);
        }
        for (let xe = 0; xe < 6; xe++)
          if (Ue) {
            ye ? K && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, 0, 0, Ze[xe].width, Ze[xe].height, ht, Be, Ze[xe].data) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, ee, Ze[xe].width, Ze[xe].height, 0, ht, Be, Ze[xe].data);
            for (let He = 0; He < ie.length; He++) {
              const wt = ie[He].image[xe].image;
              ye ? K && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He + 1, 0, 0, wt.width, wt.height, ht, Be, wt.data) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He + 1, ee, wt.width, wt.height, 0, ht, Be, wt.data);
            }
          } else {
            ye ? K && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, 0, 0, ht, Be, Ze[xe]) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, ee, ht, Be, Ze[xe]);
            for (let He = 0; He < ie.length; He++) {
              const pt = ie[He];
              ye ? K && t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He + 1, 0, 0, ht, Be, pt.image[xe]) : t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + xe, He + 1, ee, ht, Be, pt.image[xe]);
            }
          }
      }
      x(O) && g(n.TEXTURE_CUBE_MAP), Ce.__version = Ae.version, O.onUpdate && O.onUpdate(O);
    }
    q.__version = O.version;
  }
  function we(q, O, ue, Te, Ae, Ce) {
    const ot = s.convert(ue.format, ue.colorSpace), Ve = s.convert(ue.type), Je = S(ue.internalFormat, ot, Ve, ue.colorSpace);
    if (!i.get(O).__hasExternalTextures) {
      const Ue = Math.max(1, O.width >> Ce), Ze = Math.max(1, O.height >> Ce);
      Ae === n.TEXTURE_3D || Ae === n.TEXTURE_2D_ARRAY ? t.texImage3D(Ae, Ce, Je, Ue, Ze, O.depth, 0, ot, Ve, null) : t.texImage2D(Ae, Ce, Je, Ue, Ze, 0, ot, Ve, null);
    }
    t.bindFramebuffer(n.FRAMEBUFFER, q), Me(O) ? a.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, Te, Ae, i.get(ue).__webglTexture, 0, Ge(O)) : (Ae === n.TEXTURE_2D || Ae >= n.TEXTURE_CUBE_MAP_POSITIVE_X && Ae <= n.TEXTURE_CUBE_MAP_NEGATIVE_Z) && n.framebufferTexture2D(n.FRAMEBUFFER, Te, Ae, i.get(ue).__webglTexture, Ce), t.bindFramebuffer(n.FRAMEBUFFER, null);
  }
  function Ee(q, O, ue) {
    if (n.bindRenderbuffer(n.RENDERBUFFER, q), O.depthBuffer) {
      const Te = O.depthTexture, Ae = Te && Te.isDepthTexture ? Te.type : null, Ce = M(O.stencilBuffer, Ae), ot = O.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, Ve = Ge(O);
      Me(O) ? a.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, Ve, Ce, O.width, O.height) : ue ? n.renderbufferStorageMultisample(n.RENDERBUFFER, Ve, Ce, O.width, O.height) : n.renderbufferStorage(n.RENDERBUFFER, Ce, O.width, O.height), n.framebufferRenderbuffer(n.FRAMEBUFFER, ot, n.RENDERBUFFER, q);
    } else {
      const Te = O.textures;
      for (let Ae = 0; Ae < Te.length; Ae++) {
        const Ce = Te[Ae], ot = s.convert(Ce.format, Ce.colorSpace), Ve = s.convert(Ce.type), Je = S(Ce.internalFormat, ot, Ve, Ce.colorSpace), _t = Ge(O);
        ue && Me(O) === !1 ? n.renderbufferStorageMultisample(n.RENDERBUFFER, _t, Je, O.width, O.height) : Me(O) ? a.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, _t, Je, O.width, O.height) : n.renderbufferStorage(n.RENDERBUFFER, Je, O.width, O.height);
      }
    }
    n.bindRenderbuffer(n.RENDERBUFFER, null);
  }
  function De(q, O) {
    if (O && O.isWebGLCubeRenderTarget)
      throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(n.FRAMEBUFFER, q), !(O.depthTexture && O.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!i.get(O.depthTexture).__webglTexture || O.depthTexture.image.width !== O.width || O.depthTexture.image.height !== O.height) && (O.depthTexture.image.width = O.width, O.depthTexture.image.height = O.height, O.depthTexture.needsUpdate = !0), j(O.depthTexture, 0);
    const Te = i.get(O.depthTexture).__webglTexture, Ae = Ge(O);
    if (O.depthTexture.format === ka)
      Me(O) ? a.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, Te, 0, Ae) : n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, Te, 0);
    else if (O.depthTexture.format === ja)
      Me(O) ? a.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, Te, 0, Ae) : n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, Te, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function st(q) {
    const O = i.get(q), ue = q.isWebGLCubeRenderTarget === !0;
    if (q.depthTexture && !O.__autoAllocateDepthBuffer) {
      if (ue)
        throw new Error("target.depthTexture not supported in Cube render targets");
      De(O.__webglFramebuffer, q);
    } else if (ue) {
      O.__webglDepthbuffer = [];
      for (let Te = 0; Te < 6; Te++)
        t.bindFramebuffer(n.FRAMEBUFFER, O.__webglFramebuffer[Te]), O.__webglDepthbuffer[Te] = n.createRenderbuffer(), Ee(O.__webglDepthbuffer[Te], q, !1);
    } else
      t.bindFramebuffer(n.FRAMEBUFFER, O.__webglFramebuffer), O.__webglDepthbuffer = n.createRenderbuffer(), Ee(O.__webglDepthbuffer, q, !1);
    t.bindFramebuffer(n.FRAMEBUFFER, null);
  }
  function Mt(q, O, ue) {
    const Te = i.get(q);
    O !== void 0 && we(Te.__webglFramebuffer, q, q.texture, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, 0), ue !== void 0 && st(q);
  }
  function dt(q) {
    const O = q.texture, ue = i.get(q), Te = i.get(O);
    q.addEventListener("dispose", P);
    const Ae = q.textures, Ce = q.isWebGLCubeRenderTarget === !0, ot = Ae.length > 1;
    if (ot || (Te.__webglTexture === void 0 && (Te.__webglTexture = n.createTexture()), Te.__version = O.version, o.memory.textures++), Ce) {
      ue.__webglFramebuffer = [];
      for (let Ve = 0; Ve < 6; Ve++)
        if (O.mipmaps && O.mipmaps.length > 0) {
          ue.__webglFramebuffer[Ve] = [];
          for (let Je = 0; Je < O.mipmaps.length; Je++)
            ue.__webglFramebuffer[Ve][Je] = n.createFramebuffer();
        } else
          ue.__webglFramebuffer[Ve] = n.createFramebuffer();
    } else {
      if (O.mipmaps && O.mipmaps.length > 0) {
        ue.__webglFramebuffer = [];
        for (let Ve = 0; Ve < O.mipmaps.length; Ve++)
          ue.__webglFramebuffer[Ve] = n.createFramebuffer();
      } else
        ue.__webglFramebuffer = n.createFramebuffer();
      if (ot)
        for (let Ve = 0, Je = Ae.length; Ve < Je; Ve++) {
          const _t = i.get(Ae[Ve]);
          _t.__webglTexture === void 0 && (_t.__webglTexture = n.createTexture(), o.memory.textures++);
        }
      if (q.samples > 0 && Me(q) === !1) {
        ue.__webglMultisampledFramebuffer = n.createFramebuffer(), ue.__webglColorRenderbuffer = [], t.bindFramebuffer(n.FRAMEBUFFER, ue.__webglMultisampledFramebuffer);
        for (let Ve = 0; Ve < Ae.length; Ve++) {
          const Je = Ae[Ve];
          ue.__webglColorRenderbuffer[Ve] = n.createRenderbuffer(), n.bindRenderbuffer(n.RENDERBUFFER, ue.__webglColorRenderbuffer[Ve]);
          const _t = s.convert(Je.format, Je.colorSpace), Ue = s.convert(Je.type), Ze = S(Je.internalFormat, _t, Ue, Je.colorSpace, q.isXRRenderTarget === !0), Nt = Ge(q);
          n.renderbufferStorageMultisample(n.RENDERBUFFER, Nt, Ze, q.width, q.height), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + Ve, n.RENDERBUFFER, ue.__webglColorRenderbuffer[Ve]);
        }
        n.bindRenderbuffer(n.RENDERBUFFER, null), q.depthBuffer && (ue.__webglDepthRenderbuffer = n.createRenderbuffer(), Ee(ue.__webglDepthRenderbuffer, q, !0)), t.bindFramebuffer(n.FRAMEBUFFER, null);
      }
    }
    if (Ce) {
      t.bindTexture(n.TEXTURE_CUBE_MAP, Te.__webglTexture), he(n.TEXTURE_CUBE_MAP, O);
      for (let Ve = 0; Ve < 6; Ve++)
        if (O.mipmaps && O.mipmaps.length > 0)
          for (let Je = 0; Je < O.mipmaps.length; Je++)
            we(ue.__webglFramebuffer[Ve][Je], q, O, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + Ve, Je);
        else
          we(ue.__webglFramebuffer[Ve], q, O, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + Ve, 0);
      x(O) && g(n.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (ot) {
      for (let Ve = 0, Je = Ae.length; Ve < Je; Ve++) {
        const _t = Ae[Ve], Ue = i.get(_t);
        t.bindTexture(n.TEXTURE_2D, Ue.__webglTexture), he(n.TEXTURE_2D, _t), we(ue.__webglFramebuffer, q, _t, n.COLOR_ATTACHMENT0 + Ve, n.TEXTURE_2D, 0), x(_t) && g(n.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let Ve = n.TEXTURE_2D;
      if ((q.isWebGL3DRenderTarget || q.isWebGLArrayRenderTarget) && (Ve = q.isWebGL3DRenderTarget ? n.TEXTURE_3D : n.TEXTURE_2D_ARRAY), t.bindTexture(Ve, Te.__webglTexture), he(Ve, O), O.mipmaps && O.mipmaps.length > 0)
        for (let Je = 0; Je < O.mipmaps.length; Je++)
          we(ue.__webglFramebuffer[Je], q, O, n.COLOR_ATTACHMENT0, Ve, Je);
      else
        we(ue.__webglFramebuffer, q, O, n.COLOR_ATTACHMENT0, Ve, 0);
      x(O) && g(Ve), t.unbindTexture();
    }
    q.depthBuffer && st(q);
  }
  function xt(q) {
    const O = q.textures;
    for (let ue = 0, Te = O.length; ue < Te; ue++) {
      const Ae = O[ue];
      if (x(Ae)) {
        const Ce = q.isWebGLCubeRenderTarget ? n.TEXTURE_CUBE_MAP : n.TEXTURE_2D, ot = i.get(Ae).__webglTexture;
        t.bindTexture(Ce, ot), g(Ce), t.unbindTexture();
      }
    }
  }
  const H = [], Ie = [];
  function Le(q) {
    if (q.samples > 0) {
      if (Me(q) === !1) {
        const O = q.textures, ue = q.width, Te = q.height;
        let Ae = n.COLOR_BUFFER_BIT;
        const Ce = q.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT, ot = i.get(q), Ve = O.length > 1;
        if (Ve)
          for (let Je = 0; Je < O.length; Je++)
            t.bindFramebuffer(n.FRAMEBUFFER, ot.__webglMultisampledFramebuffer), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + Je, n.RENDERBUFFER, null), t.bindFramebuffer(n.FRAMEBUFFER, ot.__webglFramebuffer), n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + Je, n.TEXTURE_2D, null, 0);
        t.bindFramebuffer(n.READ_FRAMEBUFFER, ot.__webglMultisampledFramebuffer), t.bindFramebuffer(n.DRAW_FRAMEBUFFER, ot.__webglFramebuffer);
        for (let Je = 0; Je < O.length; Je++) {
          if (q.resolveDepthBuffer && (q.depthBuffer && (Ae |= n.DEPTH_BUFFER_BIT), q.stencilBuffer && q.resolveStencilBuffer && (Ae |= n.STENCIL_BUFFER_BIT)), Ve) {
            n.framebufferRenderbuffer(n.READ_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.RENDERBUFFER, ot.__webglColorRenderbuffer[Je]);
            const _t = i.get(O[Je]).__webglTexture;
            n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, _t, 0);
          }
          n.blitFramebuffer(0, 0, ue, Te, 0, 0, ue, Te, Ae, n.NEAREST), c === !0 && (H.length = 0, Ie.length = 0, H.push(n.COLOR_ATTACHMENT0 + Je), q.depthBuffer && q.resolveDepthBuffer === !1 && (H.push(Ce), Ie.push(Ce), n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, Ie)), n.invalidateFramebuffer(n.READ_FRAMEBUFFER, H));
        }
        if (t.bindFramebuffer(n.READ_FRAMEBUFFER, null), t.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), Ve)
          for (let Je = 0; Je < O.length; Je++) {
            t.bindFramebuffer(n.FRAMEBUFFER, ot.__webglMultisampledFramebuffer), n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + Je, n.RENDERBUFFER, ot.__webglColorRenderbuffer[Je]);
            const _t = i.get(O[Je]).__webglTexture;
            t.bindFramebuffer(n.FRAMEBUFFER, ot.__webglFramebuffer), n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + Je, n.TEXTURE_2D, _t, 0);
          }
        t.bindFramebuffer(n.DRAW_FRAMEBUFFER, ot.__webglMultisampledFramebuffer);
      } else if (q.depthBuffer && q.resolveDepthBuffer === !1 && c) {
        const O = q.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT;
        n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, [O]);
      }
    }
  }
  function Ge(q) {
    return Math.min(r.maxSamples, q.samples);
  }
  function Me(q) {
    const O = i.get(q);
    return q.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && O.__useRenderToTexture !== !1;
  }
  function at(q) {
    const O = o.render.frame;
    h.get(q) !== O && (h.set(q, O), q.update());
  }
  function We(q, O) {
    const ue = q.colorSpace, Te = q.format, Ae = q.type;
    return q.isCompressedTexture === !0 || q.isVideoTexture === !0 || ue !== br && ue !== ks && (Jt.getTransfer(ue) === an ? (Te !== Ln || Ae !== Yi) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", ue)), O;
  }
  function et(q) {
    return typeof HTMLImageElement < "u" && q instanceof HTMLImageElement ? (f.width = q.naturalWidth || q.width, f.height = q.naturalHeight || q.height) : typeof VideoFrame < "u" && q instanceof VideoFrame ? (f.width = q.displayWidth, f.height = q.displayHeight) : (f.width = q.width, f.height = q.height), f;
  }
  this.allocateTextureUnit = G, this.resetTextureUnits = N, this.setTexture2D = j, this.setTexture2DArray = Q, this.setTexture3D = J, this.setTextureCube = oe, this.rebindTextures = Mt, this.setupRenderTarget = dt, this.updateRenderTargetMipmap = xt, this.updateMultisampleRenderTarget = Le, this.setupDepthRenderbuffer = st, this.setupFrameBufferTexture = we, this.useMultisampledRTT = Me;
}
function G2(n, e) {
  function t(i, r = ks) {
    let s;
    const o = Jt.getTransfer(r);
    if (i === Yi)
      return n.UNSIGNED_BYTE;
    if (i === wg)
      return n.UNSIGNED_SHORT_4_4_4_4;
    if (i === Eg)
      return n.UNSIGNED_SHORT_5_5_5_1;
    if (i === Jx)
      return n.UNSIGNED_INT_5_9_9_9_REV;
    if (i === Sg)
      return n.BYTE;
    if (i === Mg)
      return n.SHORT;
    if (i === Au)
      return n.UNSIGNED_SHORT;
    if (i === rh)
      return n.INT;
    if (i === ys)
      return n.UNSIGNED_INT;
    if (i === xn)
      return n.FLOAT;
    if (i === $n)
      return n.HALF_FLOAT;
    if (i === Qx)
      return n.ALPHA;
    if (i === $x)
      return n.RGB;
    if (i === Ln)
      return n.RGBA;
    if (i === e1)
      return n.LUMINANCE;
    if (i === t1)
      return n.LUMINANCE_ALPHA;
    if (i === ka)
      return n.DEPTH_COMPONENT;
    if (i === ja)
      return n.DEPTH_STENCIL;
    if (i === sh)
      return n.RED;
    if (i === oh)
      return n.RED_INTEGER;
    if (i === n1)
      return n.RG;
    if (i === Tg)
      return n.RG_INTEGER;
    if (i === Ag)
      return n.RGBA_INTEGER;
    if (i === $c || i === ef || i === tf || i === nf)
      if (o === an)
        if (s = e.get("WEBGL_compressed_texture_s3tc_srgb"), s !== null) {
          if (i === $c)
            return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (i === ef)
            return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (i === tf)
            return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (i === nf)
            return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (s = e.get("WEBGL_compressed_texture_s3tc"), s !== null) {
        if (i === $c)
          return s.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (i === ef)
          return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (i === tf)
          return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (i === nf)
          return s.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (i === Tm || i === Am || i === Cm || i === Rm)
      if (s = e.get("WEBGL_compressed_texture_pvrtc"), s !== null) {
        if (i === Tm)
          return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (i === Am)
          return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (i === Cm)
          return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (i === Rm)
          return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (i === bm || i === Pm || i === Im)
      if (s = e.get("WEBGL_compressed_texture_etc"), s !== null) {
        if (i === bm || i === Pm)
          return o === an ? s.COMPRESSED_SRGB8_ETC2 : s.COMPRESSED_RGB8_ETC2;
        if (i === Im)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : s.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (i === Lm || i === Dm || i === Nm || i === Um || i === Om || i === Fm || i === km || i === zm || i === Bm || i === Hm || i === Vm || i === Gm || i === Wm || i === Xm)
      if (s = e.get("WEBGL_compressed_texture_astc"), s !== null) {
        if (i === Lm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : s.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (i === Dm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : s.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (i === Nm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : s.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (i === Um)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : s.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (i === Om)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : s.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (i === Fm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : s.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (i === km)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : s.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (i === zm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : s.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (i === Bm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : s.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (i === Hm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : s.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (i === Vm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : s.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (i === Gm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : s.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (i === Wm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : s.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (i === Xm)
          return o === an ? s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : s.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (i === rf || i === Ym || i === qm)
      if (s = e.get("EXT_texture_compression_bptc"), s !== null) {
        if (i === rf)
          return o === an ? s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : s.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (i === Ym)
          return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (i === qm)
          return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (i === i1 || i === jm || i === Zm || i === Km)
      if (s = e.get("EXT_texture_compression_rgtc"), s !== null) {
        if (i === rf)
          return s.COMPRESSED_RED_RGTC1_EXT;
        if (i === jm)
          return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (i === Zm)
          return s.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (i === Km)
          return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return i === qa ? n.UNSIGNED_INT_24_8 : n[i] !== void 0 ? n[i] : null;
  }
  return { convert: t };
}
class W2 extends Rn {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class au extends Yt {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const Ok = { type: "move" };
class $v {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new au(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new au(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new B(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new B()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new au(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new B(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new B()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const i of e.hand.values())
          this._getHandJoint(t, i);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, i) {
    let r = null, s = null, o = null;
    const a = this._targetRay, c = this._grip, f = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (f && e.hand) {
        o = !0;
        for (const w of e.hand.values()) {
          const x = t.getJointPose(w, i), g = this._getHandJoint(f, w);
          x !== null && (g.matrix.fromArray(x.transform.matrix), g.matrix.decompose(g.position, g.rotation, g.scale), g.matrixWorldNeedsUpdate = !0, g.jointRadius = x.radius), g.visible = x !== null;
        }
        const h = f.joints["index-finger-tip"], d = f.joints["thumb-tip"], p = h.position.distanceTo(d.position), v = 0.02, y = 5e-3;
        f.inputState.pinching && p > v + y ? (f.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !f.inputState.pinching && p <= v - y && (f.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        c !== null && e.gripSpace && (s = t.getPose(e.gripSpace, i), s !== null && (c.matrix.fromArray(s.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = !0, s.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(s.linearVelocity)) : c.hasLinearVelocity = !1, s.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(s.angularVelocity)) : c.hasAngularVelocity = !1));
      a !== null && (r = t.getPose(e.targetRaySpace, i), r === null && s !== null && (r = s), r !== null && (a.matrix.fromArray(r.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale), a.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (a.hasLinearVelocity = !0, a.linearVelocity.copy(r.linearVelocity)) : a.hasLinearVelocity = !1, r.angularVelocity ? (a.hasAngularVelocity = !0, a.angularVelocity.copy(r.angularVelocity)) : a.hasAngularVelocity = !1, this.dispatchEvent(Ok)));
    }
    return a !== null && (a.visible = r !== null), c !== null && (c.visible = s !== null), f !== null && (f.visible = o !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const i = new au();
      i.matrixAutoUpdate = !1, i.visible = !1, e.joints[t.jointName] = i, e.add(i);
    }
    return e.joints[t.jointName];
  }
}
const Fk = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, kk = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class zk {
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  init(e, t, i) {
    if (this.texture === null) {
      const r = new Kt(), s = e.properties.get(r);
      s.__webglTexture = t.texture, (t.depthNear != i.depthNear || t.depthFar != i.depthFar) && (this.depthNear = t.depthNear, this.depthFar = t.depthFar), this.texture = r;
    }
  }
  getMesh(e) {
    if (this.texture !== null && this.mesh === null) {
      const t = e.cameras[0].viewport, i = new qi({
        vertexShader: Fk,
        fragmentShader: kk,
        uniforms: {
          depthColor: { value: this.texture },
          depthWidth: { value: t.z },
          depthHeight: { value: t.w }
        }
      });
      this.mesh = new Sn(new Xo(20, 20), i);
    }
    return this.mesh;
  }
  reset() {
    this.texture = null, this.mesh = null;
  }
  getDepthTexture() {
    return this.texture;
  }
}
class Bk extends _s {
  constructor(e, t) {
    super();
    const i = this;
    let r = null, s = 1, o = null, a = "local-floor", c = 1, f = null, h = null, d = null, p = null, v = null, y = null;
    const w = new zk(), x = t.getContextAttributes();
    let g = null, S = null;
    const M = [], T = [], U = new _e();
    let P = null;
    const D = new Rn();
    D.layers.enable(1), D.viewport = new Vt();
    const R = new Rn();
    R.layers.enable(2), R.viewport = new Vt();
    const C = [D, R], A = new W2();
    A.layers.enable(1), A.layers.enable(2);
    let N = null, G = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(ce) {
      let we = M[ce];
      return we === void 0 && (we = new $v(), M[ce] = we), we.getTargetRaySpace();
    }, this.getControllerGrip = function(ce) {
      let we = M[ce];
      return we === void 0 && (we = new $v(), M[ce] = we), we.getGripSpace();
    }, this.getHand = function(ce) {
      let we = M[ce];
      return we === void 0 && (we = new $v(), M[ce] = we), we.getHandSpace();
    };
    function W(ce) {
      const we = T.indexOf(ce.inputSource);
      if (we === -1)
        return;
      const Ee = M[we];
      Ee !== void 0 && (Ee.update(ce.inputSource, ce.frame, f || o), Ee.dispatchEvent({ type: ce.type, data: ce.inputSource }));
    }
    function j() {
      r.removeEventListener("select", W), r.removeEventListener("selectstart", W), r.removeEventListener("selectend", W), r.removeEventListener("squeeze", W), r.removeEventListener("squeezestart", W), r.removeEventListener("squeezeend", W), r.removeEventListener("end", j), r.removeEventListener("inputsourceschange", Q);
      for (let ce = 0; ce < M.length; ce++) {
        const we = T[ce];
        we !== null && (T[ce] = null, M[ce].disconnect(we));
      }
      N = null, G = null, w.reset(), e.setRenderTarget(g), v = null, p = null, d = null, r = null, S = null, ke.stop(), i.isPresenting = !1, e.setPixelRatio(P), e.setSize(U.width, U.height, !1), i.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(ce) {
      s = ce, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(ce) {
      a = ce, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return f || o;
    }, this.setReferenceSpace = function(ce) {
      f = ce;
    }, this.getBaseLayer = function() {
      return p !== null ? p : v;
    }, this.getBinding = function() {
      return d;
    }, this.getFrame = function() {
      return y;
    }, this.getSession = function() {
      return r;
    }, this.setSession = async function(ce) {
      if (r = ce, r !== null) {
        if (g = e.getRenderTarget(), r.addEventListener("select", W), r.addEventListener("selectstart", W), r.addEventListener("selectend", W), r.addEventListener("squeeze", W), r.addEventListener("squeezestart", W), r.addEventListener("squeezeend", W), r.addEventListener("end", j), r.addEventListener("inputsourceschange", Q), x.xrCompatible !== !0 && await t.makeXRCompatible(), P = e.getPixelRatio(), e.getSize(U), r.renderState.layers === void 0) {
          const we = {
            antialias: x.antialias,
            alpha: !0,
            depth: x.depth,
            stencil: x.stencil,
            framebufferScaleFactor: s
          };
          v = new XRWebGLLayer(r, t, we), r.updateRenderState({ baseLayer: v }), e.setPixelRatio(1), e.setSize(v.framebufferWidth, v.framebufferHeight, !1), S = new ar(
            v.framebufferWidth,
            v.framebufferHeight,
            {
              format: Ln,
              type: Yi,
              colorSpace: e.outputColorSpace,
              stencilBuffer: x.stencil
            }
          );
        } else {
          let we = null, Ee = null, De = null;
          x.depth && (De = x.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, we = x.stencil ? ja : ka, Ee = x.stencil ? qa : ys);
          const st = {
            colorFormat: t.RGBA8,
            depthFormat: De,
            scaleFactor: s
          };
          d = new XRWebGLBinding(r, t), p = d.createProjectionLayer(st), r.updateRenderState({ layers: [p] }), e.setPixelRatio(1), e.setSize(p.textureWidth, p.textureHeight, !1), S = new ar(
            p.textureWidth,
            p.textureHeight,
            {
              format: Ln,
              type: Yi,
              depthTexture: new d1(p.textureWidth, p.textureHeight, Ee, void 0, void 0, void 0, void 0, void 0, void 0, we),
              stencilBuffer: x.stencil,
              colorSpace: e.outputColorSpace,
              samples: x.antialias ? 4 : 0,
              resolveDepthBuffer: p.ignoreDepthValues === !1
            }
          );
        }
        S.isXRRenderTarget = !0, this.setFoveation(c), f = null, o = await r.requestReferenceSpace(a), ke.setContext(r), ke.start(), i.isPresenting = !0, i.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (r !== null)
        return r.environmentBlendMode;
    }, this.getDepthTexture = function() {
      return w.getDepthTexture();
    };
    function Q(ce) {
      for (let we = 0; we < ce.removed.length; we++) {
        const Ee = ce.removed[we], De = T.indexOf(Ee);
        De >= 0 && (T[De] = null, M[De].disconnect(Ee));
      }
      for (let we = 0; we < ce.added.length; we++) {
        const Ee = ce.added[we];
        let De = T.indexOf(Ee);
        if (De === -1) {
          for (let Mt = 0; Mt < M.length; Mt++)
            if (Mt >= T.length) {
              T.push(Ee), De = Mt;
              break;
            } else if (T[Mt] === null) {
              T[Mt] = Ee, De = Mt;
              break;
            }
          if (De === -1)
            break;
        }
        const st = M[De];
        st && st.connect(Ee);
      }
    }
    const J = new B(), oe = new B();
    function z(ce, we, Ee) {
      J.setFromMatrixPosition(we.matrixWorld), oe.setFromMatrixPosition(Ee.matrixWorld);
      const De = J.distanceTo(oe), st = we.projectionMatrix.elements, Mt = Ee.projectionMatrix.elements, dt = st[14] / (st[10] - 1), xt = st[14] / (st[10] + 1), H = (st[9] + 1) / st[5], Ie = (st[9] - 1) / st[5], Le = (st[8] - 1) / st[0], Ge = (Mt[8] + 1) / Mt[0], Me = dt * Le, at = dt * Ge, We = De / (-Le + Ge), et = We * -Le;
      we.matrixWorld.decompose(ce.position, ce.quaternion, ce.scale), ce.translateX(et), ce.translateZ(We), ce.matrixWorld.compose(ce.position, ce.quaternion, ce.scale), ce.matrixWorldInverse.copy(ce.matrixWorld).invert();
      const q = dt + We, O = xt + We, ue = Me - et, Te = at + (De - et), Ae = H * xt / O * q, Ce = Ie * xt / O * q;
      ce.projectionMatrix.makePerspective(ue, Te, Ae, Ce, q, O), ce.projectionMatrixInverse.copy(ce.projectionMatrix).invert();
    }
    function te(ce, we) {
      we === null ? ce.matrixWorld.copy(ce.matrix) : ce.matrixWorld.multiplyMatrices(we.matrixWorld, ce.matrix), ce.matrixWorldInverse.copy(ce.matrixWorld).invert();
    }
    this.updateCamera = function(ce) {
      if (r === null)
        return;
      w.texture !== null && (ce.near = w.depthNear, ce.far = w.depthFar), A.near = R.near = D.near = ce.near, A.far = R.far = D.far = ce.far, (N !== A.near || G !== A.far) && (r.updateRenderState({
        depthNear: A.near,
        depthFar: A.far
      }), N = A.near, G = A.far, D.near = N, D.far = G, R.near = N, R.far = G, D.updateProjectionMatrix(), R.updateProjectionMatrix(), ce.updateProjectionMatrix());
      const we = ce.parent, Ee = A.cameras;
      te(A, we);
      for (let De = 0; De < Ee.length; De++)
        te(Ee[De], we);
      Ee.length === 2 ? z(A, D, R) : A.projectionMatrix.copy(D.projectionMatrix), ne(ce, A, we);
    };
    function ne(ce, we, Ee) {
      Ee === null ? ce.matrix.copy(we.matrixWorld) : (ce.matrix.copy(Ee.matrixWorld), ce.matrix.invert(), ce.matrix.multiply(we.matrixWorld)), ce.matrix.decompose(ce.position, ce.quaternion, ce.scale), ce.updateMatrixWorld(!0), ce.projectionMatrix.copy(we.projectionMatrix), ce.projectionMatrixInverse.copy(we.projectionMatrixInverse), ce.isPerspectiveCamera && (ce.fov = Cu * 2 * Math.atan(1 / ce.projectionMatrix.elements[5]), ce.zoom = 1);
    }
    this.getCamera = function() {
      return A;
    }, this.getFoveation = function() {
      if (!(p === null && v === null))
        return c;
    }, this.setFoveation = function(ce) {
      c = ce, p !== null && (p.fixedFoveation = ce), v !== null && v.fixedFoveation !== void 0 && (v.fixedFoveation = ce);
    }, this.hasDepthSensing = function() {
      return w.texture !== null;
    }, this.getDepthSensingMesh = function() {
      return w.getMesh(A);
    };
    let he = null;
    function Se(ce, we) {
      if (h = we.getViewerPose(f || o), y = we, h !== null) {
        const Ee = h.views;
        v !== null && (e.setRenderTargetFramebuffer(S, v.framebuffer), e.setRenderTarget(S));
        let De = !1;
        Ee.length !== A.cameras.length && (A.cameras.length = 0, De = !0);
        for (let Mt = 0; Mt < Ee.length; Mt++) {
          const dt = Ee[Mt];
          let xt = null;
          if (v !== null)
            xt = v.getViewport(dt);
          else {
            const Ie = d.getViewSubImage(p, dt);
            xt = Ie.viewport, Mt === 0 && (e.setRenderTargetTextures(
              S,
              Ie.colorTexture,
              p.ignoreDepthValues ? void 0 : Ie.depthStencilTexture
            ), e.setRenderTarget(S));
          }
          let H = C[Mt];
          H === void 0 && (H = new Rn(), H.layers.enable(Mt), H.viewport = new Vt(), C[Mt] = H), H.matrix.fromArray(dt.transform.matrix), H.matrix.decompose(H.position, H.quaternion, H.scale), H.projectionMatrix.fromArray(dt.projectionMatrix), H.projectionMatrixInverse.copy(H.projectionMatrix).invert(), H.viewport.set(xt.x, xt.y, xt.width, xt.height), Mt === 0 && (A.matrix.copy(H.matrix), A.matrix.decompose(A.position, A.quaternion, A.scale)), De === !0 && A.cameras.push(H);
        }
        const st = r.enabledFeatures;
        if (st && st.includes("depth-sensing")) {
          const Mt = d.getDepthInformation(Ee[0]);
          Mt && Mt.isValid && Mt.texture && w.init(e, Mt, r.renderState);
        }
      }
      for (let Ee = 0; Ee < M.length; Ee++) {
        const De = T[Ee], st = M[Ee];
        De !== null && st !== void 0 && st.update(De, we, f || o);
      }
      he && he(ce, we), we.detectedPlanes && i.dispatchEvent({ type: "planesdetected", data: we }), y = null;
    }
    const ke = new k2();
    ke.setAnimationLoop(Se), this.setAnimationLoop = function(ce) {
      he = ce;
    }, this.dispose = function() {
    };
  }
}
const ca = /* @__PURE__ */ new bi(), Hk = /* @__PURE__ */ new yt();
function Vk(n, e) {
  function t(x, g) {
    x.matrixAutoUpdate === !0 && x.updateMatrix(), g.value.copy(x.matrix);
  }
  function i(x, g) {
    g.color.getRGB(x.fogColor.value, U2(n)), g.isFog ? (x.fogNear.value = g.near, x.fogFar.value = g.far) : g.isFogExp2 && (x.fogDensity.value = g.density);
  }
  function r(x, g, S, M, T) {
    g.isMeshBasicMaterial || g.isMeshLambertMaterial ? s(x, g) : g.isMeshToonMaterial ? (s(x, g), d(x, g)) : g.isMeshPhongMaterial ? (s(x, g), h(x, g)) : g.isMeshStandardMaterial ? (s(x, g), p(x, g), g.isMeshPhysicalMaterial && v(x, g, T)) : g.isMeshMatcapMaterial ? (s(x, g), y(x, g)) : g.isMeshDepthMaterial ? s(x, g) : g.isMeshDistanceMaterial ? (s(x, g), w(x, g)) : g.isMeshNormalMaterial ? s(x, g) : g.isLineBasicMaterial ? (o(x, g), g.isLineDashedMaterial && a(x, g)) : g.isPointsMaterial ? c(x, g, S, M) : g.isSpriteMaterial ? f(x, g) : g.isShadowMaterial ? (x.color.value.copy(g.color), x.opacity.value = g.opacity) : g.isShaderMaterial && (g.uniformsNeedUpdate = !1);
  }
  function s(x, g) {
    x.opacity.value = g.opacity, g.color && x.diffuse.value.copy(g.color), g.emissive && x.emissive.value.copy(g.emissive).multiplyScalar(g.emissiveIntensity), g.map && (x.map.value = g.map, t(g.map, x.mapTransform)), g.alphaMap && (x.alphaMap.value = g.alphaMap, t(g.alphaMap, x.alphaMapTransform)), g.bumpMap && (x.bumpMap.value = g.bumpMap, t(g.bumpMap, x.bumpMapTransform), x.bumpScale.value = g.bumpScale, g.side === Ci && (x.bumpScale.value *= -1)), g.normalMap && (x.normalMap.value = g.normalMap, t(g.normalMap, x.normalMapTransform), x.normalScale.value.copy(g.normalScale), g.side === Ci && x.normalScale.value.negate()), g.displacementMap && (x.displacementMap.value = g.displacementMap, t(g.displacementMap, x.displacementMapTransform), x.displacementScale.value = g.displacementScale, x.displacementBias.value = g.displacementBias), g.emissiveMap && (x.emissiveMap.value = g.emissiveMap, t(g.emissiveMap, x.emissiveMapTransform)), g.specularMap && (x.specularMap.value = g.specularMap, t(g.specularMap, x.specularMapTransform)), g.alphaTest > 0 && (x.alphaTest.value = g.alphaTest);
    const S = e.get(g), M = S.envMap, T = S.envMapRotation;
    M && (x.envMap.value = M, ca.copy(T), ca.x *= -1, ca.y *= -1, ca.z *= -1, M.isCubeTexture && M.isRenderTargetTexture === !1 && (ca.y *= -1, ca.z *= -1), x.envMapRotation.value.setFromMatrix4(Hk.makeRotationFromEuler(ca)), x.flipEnvMap.value = M.isCubeTexture && M.isRenderTargetTexture === !1 ? -1 : 1, x.reflectivity.value = g.reflectivity, x.ior.value = g.ior, x.refractionRatio.value = g.refractionRatio), g.lightMap && (x.lightMap.value = g.lightMap, x.lightMapIntensity.value = g.lightMapIntensity, t(g.lightMap, x.lightMapTransform)), g.aoMap && (x.aoMap.value = g.aoMap, x.aoMapIntensity.value = g.aoMapIntensity, t(g.aoMap, x.aoMapTransform));
  }
  function o(x, g) {
    x.diffuse.value.copy(g.color), x.opacity.value = g.opacity, g.map && (x.map.value = g.map, t(g.map, x.mapTransform));
  }
  function a(x, g) {
    x.dashSize.value = g.dashSize, x.totalSize.value = g.dashSize + g.gapSize, x.scale.value = g.scale;
  }
  function c(x, g, S, M) {
    x.diffuse.value.copy(g.color), x.opacity.value = g.opacity, x.size.value = g.size * S, x.scale.value = M * 0.5, g.map && (x.map.value = g.map, t(g.map, x.uvTransform)), g.alphaMap && (x.alphaMap.value = g.alphaMap, t(g.alphaMap, x.alphaMapTransform)), g.alphaTest > 0 && (x.alphaTest.value = g.alphaTest);
  }
  function f(x, g) {
    x.diffuse.value.copy(g.color), x.opacity.value = g.opacity, x.rotation.value = g.rotation, g.map && (x.map.value = g.map, t(g.map, x.mapTransform)), g.alphaMap && (x.alphaMap.value = g.alphaMap, t(g.alphaMap, x.alphaMapTransform)), g.alphaTest > 0 && (x.alphaTest.value = g.alphaTest);
  }
  function h(x, g) {
    x.specular.value.copy(g.specular), x.shininess.value = Math.max(g.shininess, 1e-4);
  }
  function d(x, g) {
    g.gradientMap && (x.gradientMap.value = g.gradientMap);
  }
  function p(x, g) {
    x.metalness.value = g.metalness, g.metalnessMap && (x.metalnessMap.value = g.metalnessMap, t(g.metalnessMap, x.metalnessMapTransform)), x.roughness.value = g.roughness, g.roughnessMap && (x.roughnessMap.value = g.roughnessMap, t(g.roughnessMap, x.roughnessMapTransform)), g.envMap && (x.envMapIntensity.value = g.envMapIntensity);
  }
  function v(x, g, S) {
    x.ior.value = g.ior, g.sheen > 0 && (x.sheenColor.value.copy(g.sheenColor).multiplyScalar(g.sheen), x.sheenRoughness.value = g.sheenRoughness, g.sheenColorMap && (x.sheenColorMap.value = g.sheenColorMap, t(g.sheenColorMap, x.sheenColorMapTransform)), g.sheenRoughnessMap && (x.sheenRoughnessMap.value = g.sheenRoughnessMap, t(g.sheenRoughnessMap, x.sheenRoughnessMapTransform))), g.clearcoat > 0 && (x.clearcoat.value = g.clearcoat, x.clearcoatRoughness.value = g.clearcoatRoughness, g.clearcoatMap && (x.clearcoatMap.value = g.clearcoatMap, t(g.clearcoatMap, x.clearcoatMapTransform)), g.clearcoatRoughnessMap && (x.clearcoatRoughnessMap.value = g.clearcoatRoughnessMap, t(g.clearcoatRoughnessMap, x.clearcoatRoughnessMapTransform)), g.clearcoatNormalMap && (x.clearcoatNormalMap.value = g.clearcoatNormalMap, t(g.clearcoatNormalMap, x.clearcoatNormalMapTransform), x.clearcoatNormalScale.value.copy(g.clearcoatNormalScale), g.side === Ci && x.clearcoatNormalScale.value.negate())), g.dispersion > 0 && (x.dispersion.value = g.dispersion), g.iridescence > 0 && (x.iridescence.value = g.iridescence, x.iridescenceIOR.value = g.iridescenceIOR, x.iridescenceThicknessMinimum.value = g.iridescenceThicknessRange[0], x.iridescenceThicknessMaximum.value = g.iridescenceThicknessRange[1], g.iridescenceMap && (x.iridescenceMap.value = g.iridescenceMap, t(g.iridescenceMap, x.iridescenceMapTransform)), g.iridescenceThicknessMap && (x.iridescenceThicknessMap.value = g.iridescenceThicknessMap, t(g.iridescenceThicknessMap, x.iridescenceThicknessMapTransform))), g.transmission > 0 && (x.transmission.value = g.transmission, x.transmissionSamplerMap.value = S.texture, x.transmissionSamplerSize.value.set(S.width, S.height), g.transmissionMap && (x.transmissionMap.value = g.transmissionMap, t(g.transmissionMap, x.transmissionMapTransform)), x.thickness.value = g.thickness, g.thicknessMap && (x.thicknessMap.value = g.thicknessMap, t(g.thicknessMap, x.thicknessMapTransform)), x.attenuationDistance.value = g.attenuationDistance, x.attenuationColor.value.copy(g.attenuationColor)), g.anisotropy > 0 && (x.anisotropyVector.value.set(g.anisotropy * Math.cos(g.anisotropyRotation), g.anisotropy * Math.sin(g.anisotropyRotation)), g.anisotropyMap && (x.anisotropyMap.value = g.anisotropyMap, t(g.anisotropyMap, x.anisotropyMapTransform))), x.specularIntensity.value = g.specularIntensity, x.specularColor.value.copy(g.specularColor), g.specularColorMap && (x.specularColorMap.value = g.specularColorMap, t(g.specularColorMap, x.specularColorMapTransform)), g.specularIntensityMap && (x.specularIntensityMap.value = g.specularIntensityMap, t(g.specularIntensityMap, x.specularIntensityMapTransform));
  }
  function y(x, g) {
    g.matcap && (x.matcap.value = g.matcap);
  }
  function w(x, g) {
    const S = e.get(g).light;
    x.referencePosition.value.setFromMatrixPosition(S.matrixWorld), x.nearDistance.value = S.shadow.camera.near, x.farDistance.value = S.shadow.camera.far;
  }
  return {
    refreshFogUniforms: i,
    refreshMaterialUniforms: r
  };
}
function Gk(n, e, t, i) {
  let r = {}, s = {}, o = [];
  const a = n.getParameter(n.MAX_UNIFORM_BUFFER_BINDINGS);
  function c(S, M) {
    const T = M.program;
    i.uniformBlockBinding(S, T);
  }
  function f(S, M) {
    let T = r[S.id];
    T === void 0 && (y(S), T = h(S), r[S.id] = T, S.addEventListener("dispose", x));
    const U = M.program;
    i.updateUBOMapping(S, U);
    const P = e.render.frame;
    s[S.id] !== P && (p(S), s[S.id] = P);
  }
  function h(S) {
    const M = d();
    S.__bindingPointIndex = M;
    const T = n.createBuffer(), U = S.__size, P = S.usage;
    return n.bindBuffer(n.UNIFORM_BUFFER, T), n.bufferData(n.UNIFORM_BUFFER, U, P), n.bindBuffer(n.UNIFORM_BUFFER, null), n.bindBufferBase(n.UNIFORM_BUFFER, M, T), T;
  }
  function d() {
    for (let S = 0; S < a; S++)
      if (o.indexOf(S) === -1)
        return o.push(S), S;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function p(S) {
    const M = r[S.id], T = S.uniforms, U = S.__cache;
    n.bindBuffer(n.UNIFORM_BUFFER, M);
    for (let P = 0, D = T.length; P < D; P++) {
      const R = Array.isArray(T[P]) ? T[P] : [T[P]];
      for (let C = 0, A = R.length; C < A; C++) {
        const N = R[C];
        if (v(N, P, C, U) === !0) {
          const G = N.__offset, W = Array.isArray(N.value) ? N.value : [N.value];
          let j = 0;
          for (let Q = 0; Q < W.length; Q++) {
            const J = W[Q], oe = w(J);
            typeof J == "number" || typeof J == "boolean" ? (N.__data[0] = J, n.bufferSubData(n.UNIFORM_BUFFER, G + j, N.__data)) : J.isMatrix3 ? (N.__data[0] = J.elements[0], N.__data[1] = J.elements[1], N.__data[2] = J.elements[2], N.__data[3] = 0, N.__data[4] = J.elements[3], N.__data[5] = J.elements[4], N.__data[6] = J.elements[5], N.__data[7] = 0, N.__data[8] = J.elements[6], N.__data[9] = J.elements[7], N.__data[10] = J.elements[8], N.__data[11] = 0) : (J.toArray(N.__data, j), j += oe.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          n.bufferSubData(n.UNIFORM_BUFFER, G, N.__data);
        }
      }
    }
    n.bindBuffer(n.UNIFORM_BUFFER, null);
  }
  function v(S, M, T, U) {
    const P = S.value, D = M + "_" + T;
    if (U[D] === void 0)
      return typeof P == "number" || typeof P == "boolean" ? U[D] = P : U[D] = P.clone(), !0;
    {
      const R = U[D];
      if (typeof P == "number" || typeof P == "boolean") {
        if (R !== P)
          return U[D] = P, !0;
      } else if (R.equals(P) === !1)
        return R.copy(P), !0;
    }
    return !1;
  }
  function y(S) {
    const M = S.uniforms;
    let T = 0;
    const U = 16;
    for (let D = 0, R = M.length; D < R; D++) {
      const C = Array.isArray(M[D]) ? M[D] : [M[D]];
      for (let A = 0, N = C.length; A < N; A++) {
        const G = C[A], W = Array.isArray(G.value) ? G.value : [G.value];
        for (let j = 0, Q = W.length; j < Q; j++) {
          const J = W[j], oe = w(J), z = T % U;
          z !== 0 && U - z < oe.boundary && (T += U - z), G.__data = new Float32Array(oe.storage / Float32Array.BYTES_PER_ELEMENT), G.__offset = T, T += oe.storage;
        }
      }
    }
    const P = T % U;
    return P > 0 && (T += U - P), S.__size = T, S.__cache = {}, this;
  }
  function w(S) {
    const M = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof S == "number" || typeof S == "boolean" ? (M.boundary = 4, M.storage = 4) : S.isVector2 ? (M.boundary = 8, M.storage = 8) : S.isVector3 || S.isColor ? (M.boundary = 16, M.storage = 12) : S.isVector4 ? (M.boundary = 16, M.storage = 16) : S.isMatrix3 ? (M.boundary = 48, M.storage = 48) : S.isMatrix4 ? (M.boundary = 64, M.storage = 64) : S.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", S), M;
  }
  function x(S) {
    const M = S.target;
    M.removeEventListener("dispose", x);
    const T = o.indexOf(M.__bindingPointIndex);
    o.splice(T, 1), n.deleteBuffer(r[M.id]), delete r[M.id], delete s[M.id];
  }
  function g() {
    for (const S in r)
      n.deleteBuffer(r[S]);
    o = [], r = {}, s = {};
  }
  return {
    bind: c,
    update: f,
    dispose: g
  };
}
class g1 {
  constructor(e = {}) {
    const {
      canvas: t = I2(),
      context: i = null,
      depth: r = !0,
      stencil: s = !1,
      alpha: o = !1,
      antialias: a = !1,
      premultipliedAlpha: c = !0,
      preserveDrawingBuffer: f = !1,
      powerPreference: h = "default",
      failIfMajorPerformanceCaveat: d = !1
    } = e;
    this.isWebGLRenderer = !0;
    let p;
    if (i !== null) {
      if (typeof WebGLRenderingContext < "u" && i instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      p = i.getContextAttributes().alpha;
    } else
      p = o;
    const v = new Uint32Array(4), y = new Int32Array(4);
    let w = null, x = null;
    const g = [], S = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = Bi, this.toneMapping = ms, this.toneMappingExposure = 1;
    const M = this;
    let T = !1, U = 0, P = 0, D = null, R = -1, C = null;
    const A = new Vt(), N = new Vt();
    let G = null;
    const W = new Qe(0);
    let j = 0, Q = t.width, J = t.height, oe = 1, z = null, te = null;
    const ne = new Vt(0, 0, Q, J), he = new Vt(0, 0, Q, J);
    let Se = !1;
    const ke = new ch();
    let ce = !1, we = !1;
    const Ee = new yt(), De = new B(), st = new Vt(), Mt = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    let dt = !1;
    function xt() {
      return D === null ? oe : 1;
    }
    let H = i;
    function Ie(I, k) {
      return t.getContext(I, k);
    }
    try {
      const I = {
        alpha: !0,
        depth: r,
        stencil: s,
        antialias: a,
        premultipliedAlpha: c,
        preserveDrawingBuffer: f,
        powerPreference: h,
        failIfMajorPerformanceCaveat: d
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${nh}`), t.addEventListener("webglcontextlost", ie, !1), t.addEventListener("webglcontextrestored", xe, !1), t.addEventListener("webglcontextcreationerror", He, !1), H === null) {
        const k = "webgl2";
        if (H = Ie(k, I), H === null)
          throw Ie(k) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
    } catch (I) {
      throw console.error("THREE.WebGLRenderer: " + I.message), I;
    }
    let Le, Ge, Me, at, We, et, q, O, ue, Te, Ae, Ce, ot, Ve, Je, _t, Ue, Ze, Nt, ht, Be, ee, ye, ze;
    function K() {
      Le = new JO(H), Le.init(), ee = new G2(H, Le), Ge = new XO(H, Le, e, ee), Me = new bk(H), at = new eF(H), We = new vk(), et = new Uk(H, Le, Me, We, Ge, ee, at), q = new qO(M), O = new KO(M), ue = new aN(H), ye = new GO(H, ue), Te = new QO(H, ue, at, ye), Ae = new nF(H, Te, ue, at), Nt = new tF(H, Ge, et), _t = new YO(We), Ce = new gk(M, q, O, Le, Ge, ye, _t), ot = new Vk(M, We), Ve = new _k(), Je = new Tk(Le), Ze = new VO(M, q, O, Me, Ae, p, c), Ue = new Rk(M, Ae, Ge), ze = new Gk(H, at, Ge, Me), ht = new WO(H, Le, at), Be = new $O(H, Le, at), at.programs = Ce.programs, M.capabilities = Ge, M.extensions = Le, M.properties = We, M.renderLists = Ve, M.shadowMap = Ue, M.state = Me, M.info = at;
    }
    K();
    const be = new Bk(M, H);
    this.xr = be, this.getContext = function() {
      return H;
    }, this.getContextAttributes = function() {
      return H.getContextAttributes();
    }, this.forceContextLoss = function() {
      const I = Le.get("WEBGL_lose_context");
      I && I.loseContext();
    }, this.forceContextRestore = function() {
      const I = Le.get("WEBGL_lose_context");
      I && I.restoreContext();
    }, this.getPixelRatio = function() {
      return oe;
    }, this.setPixelRatio = function(I) {
      I !== void 0 && (oe = I, this.setSize(Q, J, !1));
    }, this.getSize = function(I) {
      return I.set(Q, J);
    }, this.setSize = function(I, k, V = !0) {
      if (be.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      Q = I, J = k, t.width = Math.floor(I * oe), t.height = Math.floor(k * oe), V === !0 && (t.style.width = I + "px", t.style.height = k + "px"), this.setViewport(0, 0, I, k);
    }, this.getDrawingBufferSize = function(I) {
      return I.set(Q * oe, J * oe).floor();
    }, this.setDrawingBufferSize = function(I, k, V) {
      Q = I, J = k, oe = V, t.width = Math.floor(I * V), t.height = Math.floor(k * V), this.setViewport(0, 0, I, k);
    }, this.getCurrentViewport = function(I) {
      return I.copy(A);
    }, this.getViewport = function(I) {
      return I.copy(ne);
    }, this.setViewport = function(I, k, V, Z) {
      I.isVector4 ? ne.set(I.x, I.y, I.z, I.w) : ne.set(I, k, V, Z), Me.viewport(A.copy(ne).multiplyScalar(oe).round());
    }, this.getScissor = function(I) {
      return I.copy(he);
    }, this.setScissor = function(I, k, V, Z) {
      I.isVector4 ? he.set(I.x, I.y, I.z, I.w) : he.set(I, k, V, Z), Me.scissor(N.copy(he).multiplyScalar(oe).round());
    }, this.getScissorTest = function() {
      return Se;
    }, this.setScissorTest = function(I) {
      Me.setScissorTest(Se = I);
    }, this.setOpaqueSort = function(I) {
      z = I;
    }, this.setTransparentSort = function(I) {
      te = I;
    }, this.getClearColor = function(I) {
      return I.copy(Ze.getClearColor());
    }, this.setClearColor = function() {
      Ze.setClearColor.apply(Ze, arguments);
    }, this.getClearAlpha = function() {
      return Ze.getClearAlpha();
    }, this.setClearAlpha = function() {
      Ze.setClearAlpha.apply(Ze, arguments);
    }, this.clear = function(I = !0, k = !0, V = !0) {
      let Z = 0;
      if (I) {
        let X = !1;
        if (D !== null) {
          const ae = D.texture.format;
          X = ae === Ag || ae === Tg || ae === oh;
        }
        if (X) {
          const ae = D.texture.type, le = ae === Yi || ae === ys || ae === Au || ae === qa || ae === wg || ae === Eg, pe = Ze.getClearColor(), de = Ze.getClearAlpha(), Xe = pe.r, Pe = pe.g, Re = pe.b;
          le ? (v[0] = Xe, v[1] = Pe, v[2] = Re, v[3] = de, H.clearBufferuiv(H.COLOR, 0, v)) : (y[0] = Xe, y[1] = Pe, y[2] = Re, y[3] = de, H.clearBufferiv(H.COLOR, 0, y));
        } else
          Z |= H.COLOR_BUFFER_BIT;
      }
      k && (Z |= H.DEPTH_BUFFER_BIT), V && (Z |= H.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), H.clear(Z);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", ie, !1), t.removeEventListener("webglcontextrestored", xe, !1), t.removeEventListener("webglcontextcreationerror", He, !1), Ve.dispose(), Je.dispose(), We.dispose(), q.dispose(), O.dispose(), Ae.dispose(), ye.dispose(), ze.dispose(), Ce.dispose(), be.dispose(), be.removeEventListener("sessionstart", Un), be.removeEventListener("sessionend", rl), Pr.stop();
    };
    function ie(I) {
      I.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), T = !0;
    }
    function xe() {
      console.log("THREE.WebGLRenderer: Context Restored."), T = !1;
      const I = at.autoReset, k = Ue.enabled, V = Ue.autoUpdate, Z = Ue.needsUpdate, X = Ue.type;
      K(), at.autoReset = I, Ue.enabled = k, Ue.autoUpdate = V, Ue.needsUpdate = Z, Ue.type = X;
    }
    function He(I) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", I.statusMessage);
    }
    function pt(I) {
      const k = I.target;
      k.removeEventListener("dispose", pt), wt(k);
    }
    function wt(I) {
      Ht(I), We.remove(I);
    }
    function Ht(I) {
      const k = We.get(I).programs;
      k !== void 0 && (k.forEach(function(V) {
        Ce.releaseProgram(V);
      }), I.isShaderMaterial && Ce.releaseShaderCache(I));
    }
    this.renderBufferDirect = function(I, k, V, Z, X, ae) {
      k === null && (k = Mt);
      const le = X.isMesh && X.matrixWorld.determinant() < 0, pe = L(I, k, V, Z, X);
      Me.setMaterial(Z, le);
      let de = V.index, Xe = 1;
      if (Z.wireframe === !0) {
        if (de = Te.getWireframeAttribute(V), de === void 0)
          return;
        Xe = 2;
      }
      const Pe = V.drawRange, Re = V.attributes.position;
      let je = Pe.start * Xe, nt = (Pe.start + Pe.count) * Xe;
      ae !== null && (je = Math.max(je, ae.start * Xe), nt = Math.min(nt, (ae.start + ae.count) * Xe)), de !== null ? (je = Math.max(je, 0), nt = Math.min(nt, de.count)) : Re != null && (je = Math.max(je, 0), nt = Math.min(nt, Re.count));
      const ct = nt - je;
      if (ct < 0 || ct === 1 / 0)
        return;
      ye.setup(X, Z, pe, V, de);
      let St, Ye = ht;
      if (de !== null && (St = ue.get(de), Ye = Be, Ye.setIndex(St)), X.isMesh)
        Z.wireframe === !0 ? (Me.setLineWidth(Z.wireframeLinewidth * xt()), Ye.setMode(H.LINES)) : Ye.setMode(H.TRIANGLES);
      else if (X.isLine) {
        let Ne = Z.linewidth;
        Ne === void 0 && (Ne = 1), Me.setLineWidth(Ne * xt()), X.isLineSegments ? Ye.setMode(H.LINES) : X.isLineLoop ? Ye.setMode(H.LINE_LOOP) : Ye.setMode(H.LINE_STRIP);
      } else
        X.isPoints ? Ye.setMode(H.POINTS) : X.isSprite && Ye.setMode(H.TRIANGLES);
      if (X.isBatchedMesh)
        if (X._multiDrawInstances !== null)
          Ye.renderMultiDrawInstances(X._multiDrawStarts, X._multiDrawCounts, X._multiDrawCount, X._multiDrawInstances);
        else if (Le.get("WEBGL_multi_draw"))
          Ye.renderMultiDraw(X._multiDrawStarts, X._multiDrawCounts, X._multiDrawCount);
        else {
          const Ne = X._multiDrawStarts, mt = X._multiDrawCounts, lt = X._multiDrawCount, gt = de ? ue.get(de).bytesPerElement : 1, Gt = We.get(Z).currentProgram.getUniforms();
          for (let Qt = 0; Qt < lt; Qt++)
            Gt.setValue(H, "_gl_DrawID", Qt), Ye.render(Ne[Qt] / gt, mt[Qt]);
        }
      else if (X.isInstancedMesh)
        Ye.renderInstances(je, ct, X.count);
      else if (V.isInstancedBufferGeometry) {
        const Ne = V._maxInstanceCount !== void 0 ? V._maxInstanceCount : 1 / 0, mt = Math.min(V.instanceCount, Ne);
        Ye.renderInstances(je, ct, mt);
      } else
        Ye.render(je, ct);
    };
    function rn(I, k, V) {
      I.transparent === !0 && I.side === Wr && I.forceSinglePass === !1 ? (I.side = Ci, I.needsUpdate = !0, Ct(I, k, V), I.side = js, I.needsUpdate = !0, Ct(I, k, V), I.side = Wr) : Ct(I, k, V);
    }
    this.compile = function(I, k, V = null) {
      V === null && (V = I), x = Je.get(V), x.init(k), S.push(x), V.traverseVisible(function(X) {
        X.isLight && X.layers.test(k.layers) && (x.pushLight(X), X.castShadow && x.pushShadow(X));
      }), I !== V && I.traverseVisible(function(X) {
        X.isLight && X.layers.test(k.layers) && (x.pushLight(X), X.castShadow && x.pushShadow(X));
      }), x.setupLights();
      const Z = /* @__PURE__ */ new Set();
      return I.traverse(function(X) {
        const ae = X.material;
        if (ae)
          if (Array.isArray(ae))
            for (let le = 0; le < ae.length; le++) {
              const pe = ae[le];
              rn(pe, V, X), Z.add(pe);
            }
          else
            rn(ae, V, X), Z.add(ae);
      }), S.pop(), x = null, Z;
    }, this.compileAsync = function(I, k, V = null) {
      const Z = this.compile(I, k, V);
      return new Promise((X) => {
        function ae() {
          if (Z.forEach(function(le) {
            We.get(le).currentProgram.isReady() && Z.delete(le);
          }), Z.size === 0) {
            X(I);
            return;
          }
          setTimeout(ae, 10);
        }
        Le.get("KHR_parallel_shader_compile") !== null ? ae() : setTimeout(ae, 10);
      });
    };
    let It = null;
    function Nn(I) {
      It && It(I);
    }
    function Un() {
      Pr.stop();
    }
    function rl() {
      Pr.start();
    }
    const Pr = new k2();
    Pr.setAnimationLoop(Nn), typeof self < "u" && Pr.setContext(self), this.setAnimationLoop = function(I) {
      It = I, be.setAnimationLoop(I), I === null ? Pr.stop() : Pr.start();
    }, be.addEventListener("sessionstart", Un), be.addEventListener("sessionend", rl), this.render = function(I, k) {
      if (k !== void 0 && k.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (T === !0)
        return;
      if (I.matrixWorldAutoUpdate === !0 && I.updateMatrixWorld(), k.parent === null && k.matrixWorldAutoUpdate === !0 && k.updateMatrixWorld(), be.enabled === !0 && be.isPresenting === !0 && (be.cameraAutoUpdate === !0 && be.updateCamera(k), k = be.getCamera()), I.isScene === !0 && I.onBeforeRender(M, I, k, D), x = Je.get(I, S.length), x.init(k), S.push(x), Ee.multiplyMatrices(k.projectionMatrix, k.matrixWorldInverse), ke.setFromProjectionMatrix(Ee), we = this.localClippingEnabled, ce = _t.init(this.clippingPlanes, we), w = Ve.get(I, g.length), w.init(), g.push(w), be.enabled === !0 && be.isPresenting === !0) {
        const ae = M.xr.getDepthSensingMesh();
        ae !== null && jo(ae, k, -1 / 0, M.sortObjects);
      }
      jo(I, k, 0, M.sortObjects), w.finish(), M.sortObjects === !0 && w.sort(z, te), dt = be.enabled === !1 || be.isPresenting === !1 || be.hasDepthSensing() === !1, dt && Ze.addToRenderList(w, I), this.info.render.frame++, ce === !0 && _t.beginShadows();
      const V = x.state.shadowsArray;
      Ue.render(V, I, k), ce === !0 && _t.endShadows(), this.info.autoReset === !0 && this.info.reset();
      const Z = w.opaque, X = w.transmissive;
      if (x.setupLights(), k.isArrayCamera) {
        const ae = k.cameras;
        if (X.length > 0)
          for (let le = 0, pe = ae.length; le < pe; le++) {
            const de = ae[le];
            Ks(Z, X, I, de);
          }
        dt && Ze.render(I);
        for (let le = 0, pe = ae.length; le < pe; le++) {
          const de = ae[le];
          Jr(w, I, de, de.viewport);
        }
      } else
        X.length > 0 && Ks(Z, X, I, k), dt && Ze.render(I), Jr(w, I, k);
      D !== null && (et.updateMultisampleRenderTarget(D), et.updateRenderTargetMipmap(D)), I.isScene === !0 && I.onAfterRender(M, I, k), ye.resetDefaultState(), R = -1, C = null, S.pop(), S.length > 0 ? (x = S[S.length - 1], ce === !0 && _t.setGlobalState(M.clippingPlanes, x.state.camera)) : x = null, g.pop(), g.length > 0 ? w = g[g.length - 1] : w = null;
    };
    function jo(I, k, V, Z) {
      if (I.visible === !1)
        return;
      if (I.layers.test(k.layers)) {
        if (I.isGroup)
          V = I.renderOrder;
        else if (I.isLOD)
          I.autoUpdate === !0 && I.update(k);
        else if (I.isLight)
          x.pushLight(I), I.castShadow && x.pushShadow(I);
        else if (I.isSprite) {
          if (!I.frustumCulled || ke.intersectsSprite(I)) {
            Z && st.setFromMatrixPosition(I.matrixWorld).applyMatrix4(Ee);
            const le = Ae.update(I), pe = I.material;
            pe.visible && w.push(I, le, pe, V, st.z, null);
          }
        } else if ((I.isMesh || I.isLine || I.isPoints) && (!I.frustumCulled || ke.intersectsObject(I))) {
          const le = Ae.update(I), pe = I.material;
          if (Z && (I.boundingSphere !== void 0 ? (I.boundingSphere === null && I.computeBoundingSphere(), st.copy(I.boundingSphere.center)) : (le.boundingSphere === null && le.computeBoundingSphere(), st.copy(le.boundingSphere.center)), st.applyMatrix4(I.matrixWorld).applyMatrix4(Ee)), Array.isArray(pe)) {
            const de = le.groups;
            for (let Xe = 0, Pe = de.length; Xe < Pe; Xe++) {
              const Re = de[Xe], je = pe[Re.materialIndex];
              je && je.visible && w.push(I, le, je, V, st.z, Re);
            }
          } else
            pe.visible && w.push(I, le, pe, V, st.z, null);
        }
      }
      const ae = I.children;
      for (let le = 0, pe = ae.length; le < pe; le++)
        jo(ae[le], k, V, Z);
    }
    function Jr(I, k, V, Z) {
      const X = I.opaque, ae = I.transmissive, le = I.transparent;
      x.setupLightsView(V), ce === !0 && _t.setGlobalState(M.clippingPlanes, V), Z && Me.viewport(A.copy(Z)), X.length > 0 && cr(X, k, V), ae.length > 0 && cr(ae, k, V), le.length > 0 && cr(le, k, V), Me.buffers.depth.setTest(!0), Me.buffers.depth.setMask(!0), Me.buffers.color.setMask(!0), Me.setPolygonOffset(!1);
    }
    function Ks(I, k, V, Z) {
      if ((V.isScene === !0 ? V.overrideMaterial : null) !== null)
        return;
      x.state.transmissionRenderTarget[Z.id] === void 0 && (x.state.transmissionRenderTarget[Z.id] = new ar(1, 1, {
        generateMipmaps: !0,
        type: Le.has("EXT_color_buffer_half_float") || Le.has("EXT_color_buffer_float") ? $n : Yi,
        minFilter: us,
        samples: 4,
        stencilBuffer: s,
        resolveDepthBuffer: !1,
        resolveStencilBuffer: !1,
        colorSpace: Jt.workingColorSpace
      }));
      const ae = x.state.transmissionRenderTarget[Z.id], le = Z.viewport || A;
      ae.setSize(le.z, le.w);
      const pe = M.getRenderTarget();
      M.setRenderTarget(ae), M.getClearColor(W), j = M.getClearAlpha(), j < 1 && M.setClearColor(16777215, 0.5), dt ? Ze.render(V) : M.clear();
      const de = M.toneMapping;
      M.toneMapping = ms;
      const Xe = Z.viewport;
      if (Z.viewport !== void 0 && (Z.viewport = void 0), x.setupLightsView(Z), ce === !0 && _t.setGlobalState(M.clippingPlanes, Z), cr(I, V, Z), et.updateMultisampleRenderTarget(ae), et.updateRenderTargetMipmap(ae), Le.has("WEBGL_multisampled_render_to_texture") === !1) {
        let Pe = !1;
        for (let Re = 0, je = k.length; Re < je; Re++) {
          const nt = k[Re], ct = nt.object, St = nt.geometry, Ye = nt.material, Ne = nt.group;
          if (Ye.side === Wr && ct.layers.test(Z.layers)) {
            const mt = Ye.side;
            Ye.side = Ci, Ye.needsUpdate = !0, Ni(ct, V, Z, St, Ye, Ne), Ye.side = mt, Ye.needsUpdate = !0, Pe = !0;
          }
        }
        Pe === !0 && (et.updateMultisampleRenderTarget(ae), et.updateRenderTargetMipmap(ae));
      }
      M.setRenderTarget(pe), M.setClearColor(W, j), Xe !== void 0 && (Z.viewport = Xe), M.toneMapping = de;
    }
    function cr(I, k, V) {
      const Z = k.isScene === !0 ? k.overrideMaterial : null;
      for (let X = 0, ae = I.length; X < ae; X++) {
        const le = I[X], pe = le.object, de = le.geometry, Xe = Z === null ? le.material : Z, Pe = le.group;
        pe.layers.test(V.layers) && Ni(pe, k, V, de, Xe, Pe);
      }
    }
    function Ni(I, k, V, Z, X, ae) {
      I.onBeforeRender(M, k, V, Z, X, ae), I.modelViewMatrix.multiplyMatrices(V.matrixWorldInverse, I.matrixWorld), I.normalMatrix.getNormalMatrix(I.modelViewMatrix), X.transparent === !0 && X.side === Wr && X.forceSinglePass === !1 ? (X.side = Ci, X.needsUpdate = !0, M.renderBufferDirect(V, k, Z, X, I, ae), X.side = js, X.needsUpdate = !0, M.renderBufferDirect(V, k, Z, X, I, ae), X.side = Wr) : M.renderBufferDirect(V, k, Z, X, I, ae), I.onAfterRender(M, k, V, Z, X, ae);
    }
    function Ct(I, k, V) {
      k.isScene !== !0 && (k = Mt);
      const Z = We.get(I), X = x.state.lights, ae = x.state.shadowsArray, le = X.state.version, pe = Ce.getParameters(I, X.state, ae, k, V), de = Ce.getProgramCacheKey(pe);
      let Xe = Z.programs;
      Z.environment = I.isMeshStandardMaterial ? k.environment : null, Z.fog = k.fog, Z.envMap = (I.isMeshStandardMaterial ? O : q).get(I.envMap || Z.environment), Z.envMapRotation = Z.environment !== null && I.envMap === null ? k.environmentRotation : I.envMapRotation, Xe === void 0 && (I.addEventListener("dispose", pt), Xe = /* @__PURE__ */ new Map(), Z.programs = Xe);
      let Pe = Xe.get(de);
      if (Pe !== void 0) {
        if (Z.currentProgram === Pe && Z.lightsStateVersion === le)
          return sl(I, pe), Pe;
      } else
        pe.uniforms = Ce.getUniforms(I), I.onBeforeCompile(pe, M), Pe = Ce.acquireProgram(pe, de), Xe.set(de, Pe), Z.uniforms = pe.uniforms;
      const Re = Z.uniforms;
      return (!I.isShaderMaterial && !I.isRawShaderMaterial || I.clipping === !0) && (Re.clippingPlanes = _t.uniform), sl(I, pe), Z.needsLights = $(I), Z.lightsStateVersion = le, Z.needsLights && (Re.ambientLightColor.value = X.state.ambient, Re.lightProbe.value = X.state.probe, Re.directionalLights.value = X.state.directional, Re.directionalLightShadows.value = X.state.directionalShadow, Re.spotLights.value = X.state.spot, Re.spotLightShadows.value = X.state.spotShadow, Re.rectAreaLights.value = X.state.rectArea, Re.ltc_1.value = X.state.rectAreaLTC1, Re.ltc_2.value = X.state.rectAreaLTC2, Re.pointLights.value = X.state.point, Re.pointLightShadows.value = X.state.pointShadow, Re.hemisphereLights.value = X.state.hemi, Re.directionalShadowMap.value = X.state.directionalShadowMap, Re.directionalShadowMatrix.value = X.state.directionalShadowMatrix, Re.spotShadowMap.value = X.state.spotShadowMap, Re.spotLightMatrix.value = X.state.spotLightMatrix, Re.spotLightMap.value = X.state.spotLightMap, Re.pointShadowMap.value = X.state.pointShadowMap, Re.pointShadowMatrix.value = X.state.pointShadowMatrix), Z.currentProgram = Pe, Z.uniformsList = null, Pe;
    }
    function Zo(I) {
      if (I.uniformsList === null) {
        const k = I.currentProgram.getUniforms();
        I.uniformsList = jp.seqWithValue(k.seq, I.uniforms);
      }
      return I.uniformsList;
    }
    function sl(I, k) {
      const V = We.get(I);
      V.outputColorSpace = k.outputColorSpace, V.batching = k.batching, V.batchingColor = k.batchingColor, V.instancing = k.instancing, V.instancingColor = k.instancingColor, V.instancingMorph = k.instancingMorph, V.skinning = k.skinning, V.morphTargets = k.morphTargets, V.morphNormals = k.morphNormals, V.morphColors = k.morphColors, V.morphTargetsCount = k.morphTargetsCount, V.numClippingPlanes = k.numClippingPlanes, V.numIntersection = k.numClipIntersection, V.vertexAlphas = k.vertexAlphas, V.vertexTangents = k.vertexTangents, V.toneMapping = k.toneMapping;
    }
    function L(I, k, V, Z, X) {
      k.isScene !== !0 && (k = Mt), et.resetTextureUnits();
      const ae = k.fog, le = Z.isMeshStandardMaterial ? k.environment : null, pe = D === null ? M.outputColorSpace : D.isXRRenderTarget === !0 ? D.texture.colorSpace : br, de = (Z.isMeshStandardMaterial ? O : q).get(Z.envMap || le), Xe = Z.vertexColors === !0 && !!V.attributes.color && V.attributes.color.itemSize === 4, Pe = !!V.attributes.tangent && (!!Z.normalMap || Z.anisotropy > 0), Re = !!V.morphAttributes.position, je = !!V.morphAttributes.normal, nt = !!V.morphAttributes.color;
      let ct = ms;
      Z.toneMapped && (D === null || D.isXRRenderTarget === !0) && (ct = M.toneMapping);
      const St = V.morphAttributes.position || V.morphAttributes.normal || V.morphAttributes.color, Ye = St !== void 0 ? St.length : 0, Ne = We.get(Z), mt = x.state.lights;
      if (ce === !0 && (we === !0 || I !== C)) {
        const Rt = I === C && Z.id === R;
        _t.setState(Z, I, Rt);
      }
      let lt = !1;
      Z.version === Ne.__version ? (Ne.needsLights && Ne.lightsStateVersion !== mt.state.version || Ne.outputColorSpace !== pe || X.isBatchedMesh && Ne.batching === !1 || !X.isBatchedMesh && Ne.batching === !0 || X.isBatchedMesh && Ne.batchingColor === !0 && X.colorTexture === null || X.isBatchedMesh && Ne.batchingColor === !1 && X.colorTexture !== null || X.isInstancedMesh && Ne.instancing === !1 || !X.isInstancedMesh && Ne.instancing === !0 || X.isSkinnedMesh && Ne.skinning === !1 || !X.isSkinnedMesh && Ne.skinning === !0 || X.isInstancedMesh && Ne.instancingColor === !0 && X.instanceColor === null || X.isInstancedMesh && Ne.instancingColor === !1 && X.instanceColor !== null || X.isInstancedMesh && Ne.instancingMorph === !0 && X.morphTexture === null || X.isInstancedMesh && Ne.instancingMorph === !1 && X.morphTexture !== null || Ne.envMap !== de || Z.fog === !0 && Ne.fog !== ae || Ne.numClippingPlanes !== void 0 && (Ne.numClippingPlanes !== _t.numPlanes || Ne.numIntersection !== _t.numIntersection) || Ne.vertexAlphas !== Xe || Ne.vertexTangents !== Pe || Ne.morphTargets !== Re || Ne.morphNormals !== je || Ne.morphColors !== nt || Ne.toneMapping !== ct || Ne.morphTargetsCount !== Ye) && (lt = !0) : (lt = !0, Ne.__version = Z.version);
      let gt = Ne.currentProgram;
      lt === !0 && (gt = Ct(Z, k, X));
      let Gt = !1, Qt = !1, dn = !1;
      const kt = gt.getUniforms(), Ot = Ne.uniforms;
      if (Me.useProgram(gt.program) && (Gt = !0, Qt = !0, dn = !0), Z.id !== R && (R = Z.id, Qt = !0), Gt || C !== I) {
        kt.setValue(H, "projectionMatrix", I.projectionMatrix), kt.setValue(H, "viewMatrix", I.matrixWorldInverse);
        const Rt = kt.map.cameraPosition;
        Rt !== void 0 && Rt.setValue(H, De.setFromMatrixPosition(I.matrixWorld)), Ge.logarithmicDepthBuffer && kt.setValue(
          H,
          "logDepthBufFC",
          2 / (Math.log(I.far + 1) / Math.LN2)
        ), (Z.isMeshPhongMaterial || Z.isMeshToonMaterial || Z.isMeshLambertMaterial || Z.isMeshBasicMaterial || Z.isMeshStandardMaterial || Z.isShaderMaterial) && kt.setValue(H, "isOrthographic", I.isOrthographicCamera === !0), C !== I && (C = I, Qt = !0, dn = !0);
      }
      if (X.isSkinnedMesh) {
        kt.setOptional(H, X, "bindMatrix"), kt.setOptional(H, X, "bindMatrixInverse");
        const Rt = X.skeleton;
        Rt && (Rt.boneTexture === null && Rt.computeBoneTexture(), kt.setValue(H, "boneTexture", Rt.boneTexture, et));
      }
      X.isBatchedMesh && (kt.setOptional(H, X, "batchingTexture"), kt.setValue(H, "batchingTexture", X._matricesTexture, et), kt.setOptional(H, X, "batchingIdTexture"), kt.setValue(H, "batchingIdTexture", X._indirectTexture, et), kt.setOptional(H, X, "batchingColorTexture"), X._colorsTexture !== null && kt.setValue(H, "batchingColorTexture", X._colorsTexture, et));
      const gn = V.morphAttributes;
      if ((gn.position !== void 0 || gn.normal !== void 0 || gn.color !== void 0) && Nt.update(X, V, gt), (Qt || Ne.receiveShadow !== X.receiveShadow) && (Ne.receiveShadow = X.receiveShadow, kt.setValue(H, "receiveShadow", X.receiveShadow)), Z.isMeshGouraudMaterial && Z.envMap !== null && (Ot.envMap.value = de, Ot.flipEnvMap.value = de.isCubeTexture && de.isRenderTargetTexture === !1 ? -1 : 1), Z.isMeshStandardMaterial && Z.envMap === null && k.environment !== null && (Ot.envMapIntensity.value = k.environmentIntensity), Qt && (kt.setValue(H, "toneMappingExposure", M.toneMappingExposure), Ne.needsLights && F(Ot, dn), ae && Z.fog === !0 && ot.refreshFogUniforms(Ot, ae), ot.refreshMaterialUniforms(Ot, Z, oe, J, x.state.transmissionRenderTarget[I.id]), jp.upload(H, Zo(Ne), Ot, et)), Z.isShaderMaterial && Z.uniformsNeedUpdate === !0 && (jp.upload(H, Zo(Ne), Ot, et), Z.uniformsNeedUpdate = !1), Z.isSpriteMaterial && kt.setValue(H, "center", X.center), kt.setValue(H, "modelViewMatrix", X.modelViewMatrix), kt.setValue(H, "normalMatrix", X.normalMatrix), kt.setValue(H, "modelMatrix", X.matrixWorld), Z.isShaderMaterial || Z.isRawShaderMaterial) {
        const Rt = Z.uniformsGroups;
        for (let zt = 0, on = Rt.length; zt < on; zt++) {
          const fr = Rt[zt];
          ze.update(fr, gt), ze.bind(fr, gt);
        }
      }
      return gt;
    }
    function F(I, k) {
      I.ambientLightColor.needsUpdate = k, I.lightProbe.needsUpdate = k, I.directionalLights.needsUpdate = k, I.directionalLightShadows.needsUpdate = k, I.pointLights.needsUpdate = k, I.pointLightShadows.needsUpdate = k, I.spotLights.needsUpdate = k, I.spotLightShadows.needsUpdate = k, I.rectAreaLights.needsUpdate = k, I.hemisphereLights.needsUpdate = k;
    }
    function $(I) {
      return I.isMeshLambertMaterial || I.isMeshToonMaterial || I.isMeshPhongMaterial || I.isMeshStandardMaterial || I.isShadowMaterial || I.isShaderMaterial && I.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return U;
    }, this.getActiveMipmapLevel = function() {
      return P;
    }, this.getRenderTarget = function() {
      return D;
    }, this.setRenderTargetTextures = function(I, k, V) {
      We.get(I.texture).__webglTexture = k, We.get(I.depthTexture).__webglTexture = V;
      const Z = We.get(I);
      Z.__hasExternalTextures = !0, Z.__autoAllocateDepthBuffer = V === void 0, Z.__autoAllocateDepthBuffer || Le.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), Z.__useRenderToTexture = !1);
    }, this.setRenderTargetFramebuffer = function(I, k) {
      const V = We.get(I);
      V.__webglFramebuffer = k, V.__useDefaultFramebuffer = k === void 0;
    }, this.setRenderTarget = function(I, k = 0, V = 0) {
      D = I, U = k, P = V;
      let Z = !0, X = null, ae = !1, le = !1;
      if (I) {
        const de = We.get(I);
        de.__useDefaultFramebuffer !== void 0 ? (Me.bindFramebuffer(H.FRAMEBUFFER, null), Z = !1) : de.__webglFramebuffer === void 0 ? et.setupRenderTarget(I) : de.__hasExternalTextures && et.rebindTextures(I, We.get(I.texture).__webglTexture, We.get(I.depthTexture).__webglTexture);
        const Xe = I.texture;
        (Xe.isData3DTexture || Xe.isDataArrayTexture || Xe.isCompressedArrayTexture) && (le = !0);
        const Pe = We.get(I).__webglFramebuffer;
        I.isWebGLCubeRenderTarget ? (Array.isArray(Pe[k]) ? X = Pe[k][V] : X = Pe[k], ae = !0) : I.samples > 0 && et.useMultisampledRTT(I) === !1 ? X = We.get(I).__webglMultisampledFramebuffer : Array.isArray(Pe) ? X = Pe[V] : X = Pe, A.copy(I.viewport), N.copy(I.scissor), G = I.scissorTest;
      } else
        A.copy(ne).multiplyScalar(oe).floor(), N.copy(he).multiplyScalar(oe).floor(), G = Se;
      if (Me.bindFramebuffer(H.FRAMEBUFFER, X) && Z && Me.drawBuffers(I, X), Me.viewport(A), Me.scissor(N), Me.setScissorTest(G), ae) {
        const de = We.get(I.texture);
        H.framebufferTexture2D(H.FRAMEBUFFER, H.COLOR_ATTACHMENT0, H.TEXTURE_CUBE_MAP_POSITIVE_X + k, de.__webglTexture, V);
      } else if (le) {
        const de = We.get(I.texture), Xe = k || 0;
        H.framebufferTextureLayer(H.FRAMEBUFFER, H.COLOR_ATTACHMENT0, de.__webglTexture, V || 0, Xe);
      }
      R = -1;
    }, this.readRenderTargetPixels = function(I, k, V, Z, X, ae, le) {
      if (!(I && I.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let pe = We.get(I).__webglFramebuffer;
      if (I.isWebGLCubeRenderTarget && le !== void 0 && (pe = pe[le]), pe) {
        Me.bindFramebuffer(H.FRAMEBUFFER, pe);
        try {
          const de = I.texture, Xe = de.format, Pe = de.type;
          if (!Ge.textureFormatReadable(Xe)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!Ge.textureTypeReadable(Pe)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          k >= 0 && k <= I.width - Z && V >= 0 && V <= I.height - X && H.readPixels(k, V, Z, X, ee.convert(Xe), ee.convert(Pe), ae);
        } finally {
          const de = D !== null ? We.get(D).__webglFramebuffer : null;
          Me.bindFramebuffer(H.FRAMEBUFFER, de);
        }
      }
    }, this.readRenderTargetPixelsAsync = async function(I, k, V, Z, X, ae, le) {
      if (!(I && I.isWebGLRenderTarget))
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      let pe = We.get(I).__webglFramebuffer;
      if (I.isWebGLCubeRenderTarget && le !== void 0 && (pe = pe[le]), pe) {
        Me.bindFramebuffer(H.FRAMEBUFFER, pe);
        try {
          const de = I.texture, Xe = de.format, Pe = de.type;
          if (!Ge.textureFormatReadable(Xe))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          if (!Ge.textureTypeReadable(Pe))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          if (k >= 0 && k <= I.width - Z && V >= 0 && V <= I.height - X) {
            const Re = H.createBuffer();
            H.bindBuffer(H.PIXEL_PACK_BUFFER, Re), H.bufferData(H.PIXEL_PACK_BUFFER, ae.byteLength, H.STREAM_READ), H.readPixels(k, V, Z, X, ee.convert(Xe), ee.convert(Pe), 0), H.flush();
            const je = H.fenceSync(H.SYNC_GPU_COMMANDS_COMPLETE, 0);
            await DD(H, je, 4);
            try {
              H.bindBuffer(H.PIXEL_PACK_BUFFER, Re), H.getBufferSubData(H.PIXEL_PACK_BUFFER, 0, ae);
            } finally {
              H.deleteBuffer(Re), H.deleteSync(je);
            }
            return ae;
          }
        } finally {
          const de = D !== null ? We.get(D).__webglFramebuffer : null;
          Me.bindFramebuffer(H.FRAMEBUFFER, de);
        }
      }
    }, this.copyFramebufferToTexture = function(I, k = null, V = 0) {
      I.isTexture !== !0 && (console.warn("WebGLRenderer: copyFramebufferToTexture function signature has changed."), k = arguments[0] || null, I = arguments[1]);
      const Z = Math.pow(2, -V), X = Math.floor(I.image.width * Z), ae = Math.floor(I.image.height * Z), le = k !== null ? k.x : 0, pe = k !== null ? k.y : 0;
      et.setTexture2D(I, 0), H.copyTexSubImage2D(H.TEXTURE_2D, V, 0, 0, le, pe, X, ae), Me.unbindTexture();
    }, this.copyTextureToTexture = function(I, k, V = null, Z = null, X = 0) {
      I.isTexture !== !0 && (console.warn("WebGLRenderer: copyTextureToTexture function signature has changed."), Z = arguments[0] || null, I = arguments[1], k = arguments[2], X = arguments[3] || 0, V = null);
      let ae, le, pe, de, Xe, Pe;
      V !== null ? (ae = V.max.x - V.min.x, le = V.max.y - V.min.y, pe = V.min.x, de = V.min.y) : (ae = I.image.width, le = I.image.height, pe = 0, de = 0), Z !== null ? (Xe = Z.x, Pe = Z.y) : (Xe = 0, Pe = 0);
      const Re = ee.convert(k.format), je = ee.convert(k.type);
      et.setTexture2D(k, 0), H.pixelStorei(H.UNPACK_FLIP_Y_WEBGL, k.flipY), H.pixelStorei(H.UNPACK_PREMULTIPLY_ALPHA_WEBGL, k.premultiplyAlpha), H.pixelStorei(H.UNPACK_ALIGNMENT, k.unpackAlignment);
      const nt = H.getParameter(H.UNPACK_ROW_LENGTH), ct = H.getParameter(H.UNPACK_IMAGE_HEIGHT), St = H.getParameter(H.UNPACK_SKIP_PIXELS), Ye = H.getParameter(H.UNPACK_SKIP_ROWS), Ne = H.getParameter(H.UNPACK_SKIP_IMAGES), mt = I.isCompressedTexture ? I.mipmaps[X] : I.image;
      H.pixelStorei(H.UNPACK_ROW_LENGTH, mt.width), H.pixelStorei(H.UNPACK_IMAGE_HEIGHT, mt.height), H.pixelStorei(H.UNPACK_SKIP_PIXELS, pe), H.pixelStorei(H.UNPACK_SKIP_ROWS, de), I.isDataTexture ? H.texSubImage2D(H.TEXTURE_2D, X, Xe, Pe, ae, le, Re, je, mt.data) : I.isCompressedTexture ? H.compressedTexSubImage2D(H.TEXTURE_2D, X, Xe, Pe, mt.width, mt.height, Re, mt.data) : H.texSubImage2D(H.TEXTURE_2D, X, Xe, Pe, ae, le, Re, je, mt), H.pixelStorei(H.UNPACK_ROW_LENGTH, nt), H.pixelStorei(H.UNPACK_IMAGE_HEIGHT, ct), H.pixelStorei(H.UNPACK_SKIP_PIXELS, St), H.pixelStorei(H.UNPACK_SKIP_ROWS, Ye), H.pixelStorei(H.UNPACK_SKIP_IMAGES, Ne), X === 0 && k.generateMipmaps && H.generateMipmap(H.TEXTURE_2D), Me.unbindTexture();
    }, this.copyTextureToTexture3D = function(I, k, V = null, Z = null, X = 0) {
      I.isTexture !== !0 && (console.warn("WebGLRenderer: copyTextureToTexture3D function signature has changed."), V = arguments[0] || null, Z = arguments[1] || null, I = arguments[2], k = arguments[3], X = arguments[4] || 0);
      let ae, le, pe, de, Xe, Pe, Re, je, nt;
      const ct = I.isCompressedTexture ? I.mipmaps[X] : I.image;
      V !== null ? (ae = V.max.x - V.min.x, le = V.max.y - V.min.y, pe = V.max.z - V.min.z, de = V.min.x, Xe = V.min.y, Pe = V.min.z) : (ae = ct.width, le = ct.height, pe = ct.depth, de = 0, Xe = 0, Pe = 0), Z !== null ? (Re = Z.x, je = Z.y, nt = Z.z) : (Re = 0, je = 0, nt = 0);
      const St = ee.convert(k.format), Ye = ee.convert(k.type);
      let Ne;
      if (k.isData3DTexture)
        et.setTexture3D(k, 0), Ne = H.TEXTURE_3D;
      else if (k.isDataArrayTexture || k.isCompressedArrayTexture)
        et.setTexture2DArray(k, 0), Ne = H.TEXTURE_2D_ARRAY;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      H.pixelStorei(H.UNPACK_FLIP_Y_WEBGL, k.flipY), H.pixelStorei(H.UNPACK_PREMULTIPLY_ALPHA_WEBGL, k.premultiplyAlpha), H.pixelStorei(H.UNPACK_ALIGNMENT, k.unpackAlignment);
      const mt = H.getParameter(H.UNPACK_ROW_LENGTH), lt = H.getParameter(H.UNPACK_IMAGE_HEIGHT), gt = H.getParameter(H.UNPACK_SKIP_PIXELS), Gt = H.getParameter(H.UNPACK_SKIP_ROWS), Qt = H.getParameter(H.UNPACK_SKIP_IMAGES);
      H.pixelStorei(H.UNPACK_ROW_LENGTH, ct.width), H.pixelStorei(H.UNPACK_IMAGE_HEIGHT, ct.height), H.pixelStorei(H.UNPACK_SKIP_PIXELS, de), H.pixelStorei(H.UNPACK_SKIP_ROWS, Xe), H.pixelStorei(H.UNPACK_SKIP_IMAGES, Pe), I.isDataTexture || I.isData3DTexture ? H.texSubImage3D(Ne, X, Re, je, nt, ae, le, pe, St, Ye, ct.data) : k.isCompressedArrayTexture ? H.compressedTexSubImage3D(Ne, X, Re, je, nt, ae, le, pe, St, ct.data) : H.texSubImage3D(Ne, X, Re, je, nt, ae, le, pe, St, Ye, ct), H.pixelStorei(H.UNPACK_ROW_LENGTH, mt), H.pixelStorei(H.UNPACK_IMAGE_HEIGHT, lt), H.pixelStorei(H.UNPACK_SKIP_PIXELS, gt), H.pixelStorei(H.UNPACK_SKIP_ROWS, Gt), H.pixelStorei(H.UNPACK_SKIP_IMAGES, Qt), X === 0 && k.generateMipmaps && H.generateMipmap(Ne), Me.unbindTexture();
    }, this.initRenderTarget = function(I) {
      We.get(I).__webglFramebuffer === void 0 && et.setupRenderTarget(I);
    }, this.initTexture = function(I) {
      I.isCubeTexture ? et.setTextureCube(I, 0) : I.isData3DTexture ? et.setTexture3D(I, 0) : I.isDataArrayTexture || I.isCompressedArrayTexture ? et.setTexture2DArray(I, 0) : et.setTexture2D(I, 0), Me.unbindTexture();
    }, this.resetState = function() {
      U = 0, P = 0, D = null, Me.reset(), ye.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return cs;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorSpace = e === Rg ? "display-p3" : "srgb", t.unpackColorSpace = Jt.workingColorSpace === ah ? "display-p3" : "srgb";
  }
}
class Lg {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new Qe(e), this.density = t;
  }
  clone() {
    return new Lg(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class Dg {
  constructor(e, t = 1, i = 1e3) {
    this.isFog = !0, this.name = "", this.color = new Qe(e), this.near = t, this.far = i;
  }
  clone() {
    return new Dg(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class bu extends Yt {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new bi(), this.environmentIntensity = 1, this.environmentRotation = new bi(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, this.backgroundRotation.copy(e.backgroundRotation), this.environmentIntensity = e.environmentIntensity, this.environmentRotation.copy(e.environmentRotation), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (t.object.environmentIntensity = this.environmentIntensity), t.object.environmentRotation = this.environmentRotation.toArray(), t;
  }
}
class Ng {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Ff, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.version = 0, this.uuid = rr();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  get updateRange() {
    return l1("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, i) {
    e *= this.stride, i *= t.stride;
    for (let r = 0, s = this.stride; r < s; r++)
      this.array[e + r] = t.array[i + r];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = rr()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), i = new this.constructor(t, this.stride);
    return i.setUsage(this.usage), i;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = rr()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Si = /* @__PURE__ */ new B();
class Za {
  constructor(e, t, i, r = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = i, this.normalized = r;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, i = this.data.count; t < i; t++)
      Si.fromBufferAttribute(this, t), Si.applyMatrix4(e), this.setXYZ(t, Si.x, Si.y, Si.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, i = this.count; t < i; t++)
      Si.fromBufferAttribute(this, t), Si.applyNormalMatrix(e), this.setXYZ(t, Si.x, Si.y, Si.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, i = this.count; t < i; t++)
      Si.fromBufferAttribute(this, t), Si.transformDirection(e), this.setXYZ(t, Si.x, Si.y, Si.z);
    return this;
  }
  getComponent(e, t) {
    let i = this.array[e * this.data.stride + this.offset + t];
    return this.normalized && (i = Ei(i, this.array)), i;
  }
  setComponent(e, t, i) {
    return this.normalized && (i = Pt(i, this.array)), this.data.array[e * this.data.stride + this.offset + t] = i, this;
  }
  setX(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = Pt(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = Ei(t, this.array)), t;
  }
  setXY(e, t, i) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this;
  }
  setXYZ(e, t, i, r) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array), r = Pt(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this.data.array[e + 2] = r, this;
  }
  setXYZW(e, t, i, r, s) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = Pt(t, this.array), i = Pt(i, this.array), r = Pt(r, this.array), s = Pt(s, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this.data.array[e + 2] = r, this.data.array[e + 3] = s, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let i = 0; i < this.count; i++) {
        const r = i * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          t.push(this.data.array[r + s]);
      }
      return new nn(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new Za(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let i = 0; i < this.count; i++) {
        const r = i * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          t.push(this.data.array[r + s]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class v1 extends si {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new Qe(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let Ul;
const gc = /* @__PURE__ */ new B(), Ol = /* @__PURE__ */ new B(), Fl = /* @__PURE__ */ new B(), kl = /* @__PURE__ */ new _e(), vc = /* @__PURE__ */ new _e(), X2 = /* @__PURE__ */ new yt(), Qd = /* @__PURE__ */ new B(), yc = /* @__PURE__ */ new B(), $d = /* @__PURE__ */ new B(), ME = /* @__PURE__ */ new _e(), ey = /* @__PURE__ */ new _e(), wE = /* @__PURE__ */ new _e();
class Y2 extends Yt {
  constructor(e = new v1()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", Ul === void 0) {
      Ul = new Dt();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), i = new Ng(t, 5);
      Ul.setIndex([0, 1, 2, 0, 2, 3]), Ul.setAttribute("position", new Za(i, 3, 0, !1)), Ul.setAttribute("uv", new Za(i, 2, 3, !1));
    }
    this.geometry = Ul, this.material = e, this.center = new _e(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Ol.setFromMatrixScale(this.matrixWorld), X2.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Fl.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Ol.multiplyScalar(-Fl.z);
    const i = this.material.rotation;
    let r, s;
    i !== 0 && (s = Math.cos(i), r = Math.sin(i));
    const o = this.center;
    ep(Qd.set(-0.5, -0.5, 0), Fl, o, Ol, r, s), ep(yc.set(0.5, -0.5, 0), Fl, o, Ol, r, s), ep($d.set(0.5, 0.5, 0), Fl, o, Ol, r, s), ME.set(0, 0), ey.set(1, 0), wE.set(1, 1);
    let a = e.ray.intersectTriangle(Qd, yc, $d, !1, gc);
    if (a === null && (ep(yc.set(-0.5, 0.5, 0), Fl, o, Ol, r, s), ey.set(0, 1), a = e.ray.intersectTriangle(Qd, $d, yc, !1, gc), a === null))
      return;
    const c = e.ray.origin.distanceTo(gc);
    c < e.near || c > e.far || t.push({
      distance: c,
      point: gc.clone(),
      uv: tr.getInterpolation(gc, Qd, yc, $d, ME, ey, wE, new _e()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function ep(n, e, t, i, r, s) {
  kl.subVectors(n, t).addScalar(0.5).multiply(i), r !== void 0 ? (vc.x = s * kl.x - r * kl.y, vc.y = r * kl.x + s * kl.y) : vc.copy(kl), n.copy(e), n.x += vc.x, n.y += vc.y, n.applyMatrix4(X2);
}
const tp = /* @__PURE__ */ new B(), EE = /* @__PURE__ */ new B();
class q2 extends Yt {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let i = 0, r = t.length; i < r; i++) {
      const s = t[i];
      this.addLevel(s.object.clone(), s.distance, s.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, i = 0) {
    t = Math.abs(t);
    const r = this.levels;
    let s;
    for (s = 0; s < r.length && !(t < r[s].distance); s++)
      ;
    return r.splice(s, 0, { distance: t, hysteresis: i, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let i, r;
      for (i = 1, r = t.length; i < r; i++) {
        let s = t[i].distance;
        if (t[i].object.visible && (s -= s * t[i].hysteresis), e < s)
          break;
      }
      return t[i - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      tp.setFromMatrixPosition(this.matrixWorld);
      const r = e.ray.origin.distanceTo(tp);
      this.getObjectForDistance(r).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      tp.setFromMatrixPosition(e.matrixWorld), EE.setFromMatrixPosition(this.matrixWorld);
      const i = tp.distanceTo(EE) / e.zoom;
      t[0].object.visible = !0;
      let r, s;
      for (r = 1, s = t.length; r < s; r++) {
        let o = t[r].distance;
        if (t[r].object.visible && (o -= o * t[r].hysteresis), i >= o)
          t[r - 1].object.visible = !1, t[r].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = r - 1; r < s; r++)
        t[r].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const i = this.levels;
    for (let r = 0, s = i.length; r < s; r++) {
      const o = i[r];
      t.object.levels.push({
        object: o.object.uuid,
        distance: o.distance,
        hysteresis: o.hysteresis
      });
    }
    return t;
  }
}
const TE = /* @__PURE__ */ new B(), AE = /* @__PURE__ */ new Vt(), CE = /* @__PURE__ */ new Vt(), Wk = /* @__PURE__ */ new B(), RE = /* @__PURE__ */ new yt(), np = /* @__PURE__ */ new B(), ty = /* @__PURE__ */ new gi(), bE = /* @__PURE__ */ new yt(), ny = /* @__PURE__ */ new el();
class y1 extends Sn {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = P_, this.bindMatrix = new yt(), this.bindMatrixInverse = new yt(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Ri()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let i = 0; i < t.count; i++)
      this.getVertexPosition(i, np), this.boundingBox.expandByPoint(np);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new gi()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let i = 0; i < t.count; i++)
      this.getVertexPosition(i, np), this.boundingSphere.expandByPoint(np);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, t) {
    const i = this.material, r = this.matrixWorld;
    i !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), ty.copy(this.boundingSphere), ty.applyMatrix4(r), e.ray.intersectsSphere(ty) !== !1 && (bE.copy(r).invert(), ny.copy(e.ray).applyMatrix4(bE), !(this.boundingBox !== null && ny.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, ny)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new Vt(), t = this.geometry.attributes.skinWeight;
    for (let i = 0, r = t.count; i < r; i++) {
      e.fromBufferAttribute(t, i);
      const s = 1 / e.manhattanLength();
      s !== 1 / 0 ? e.multiplyScalar(s) : e.set(1, 0, 0, 0), t.setXYZW(i, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === P_ ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === g2 ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const i = this.skeleton, r = this.geometry;
    AE.fromBufferAttribute(r.attributes.skinIndex, e), CE.fromBufferAttribute(r.attributes.skinWeight, e), TE.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let s = 0; s < 4; s++) {
      const o = CE.getComponent(s);
      if (o !== 0) {
        const a = AE.getComponent(s);
        RE.multiplyMatrices(i.bones[a].matrixWorld, i.boneInverses[a]), t.addScaledVector(Wk.copy(TE).applyMatrix4(RE), o);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
}
class Ug extends Yt {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class qr extends Kt {
  constructor(e = null, t = 1, i = 1, r, s, o, a, c, f = Qn, h = Qn, d, p) {
    super(null, o, a, c, f, h, r, s, d, p), this.isDataTexture = !0, this.image = { data: e, width: t, height: i }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const PE = /* @__PURE__ */ new yt(), Xk = /* @__PURE__ */ new yt();
class fh {
  constructor(e = [], t = []) {
    this.uuid = rr(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let i = 0, r = this.bones.length; i < r; i++)
        this.boneInverses.push(new yt());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const i = new yt();
      this.bones[e] && i.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(i);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const i = this.bones[e];
      i && i.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const i = this.bones[e];
      i && (i.parent && i.parent.isBone ? (i.matrix.copy(i.parent.matrixWorld).invert(), i.matrix.multiply(i.matrixWorld)) : i.matrix.copy(i.matrixWorld), i.matrix.decompose(i.position, i.quaternion, i.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, i = this.boneMatrices, r = this.boneTexture;
    for (let s = 0, o = e.length; s < o; s++) {
      const a = e[s] ? e[s].matrixWorld : Xk;
      PE.multiplyMatrices(a, t[s]), PE.toArray(i, s * 16);
    }
    r !== null && (r.needsUpdate = !0);
  }
  clone() {
    return new fh(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const i = new qr(t, e, e, Ln, xn);
    return i.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = i, this;
  }
  getBoneByName(e) {
    for (let t = 0, i = this.bones.length; t < i; t++) {
      const r = this.bones[t];
      if (r.name === e)
        return r;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let i = 0, r = e.bones.length; i < r; i++) {
      const s = e.bones[i];
      let o = t[s];
      o === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", s), o = new Ug()), this.bones.push(o), this.boneInverses.push(new yt().fromArray(e.boneInverses[i]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, i = this.boneInverses;
    for (let r = 0, s = t.length; r < s; r++) {
      const o = t[r];
      e.bones.push(o.uuid);
      const a = i[r];
      e.boneInverses.push(a.toArray());
    }
    return e;
  }
}
class Pu extends nn {
  constructor(e, t, i, r = 1) {
    super(e, t, i), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = r;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const zl = /* @__PURE__ */ new yt(), IE = /* @__PURE__ */ new yt(), ip = [], LE = /* @__PURE__ */ new Ri(), Yk = /* @__PURE__ */ new yt(), _c = /* @__PURE__ */ new Sn(), xc = /* @__PURE__ */ new gi();
class j2 extends Sn {
  constructor(e, t, i) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new Pu(new Float32Array(i * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = i, this.boundingBox = null, this.boundingSphere = null;
    for (let r = 0; r < i; r++)
      this.setMatrixAt(r, Yk);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new Ri()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let i = 0; i < t; i++)
      this.getMatrixAt(i, zl), LE.copy(e.boundingBox).applyMatrix4(zl), this.boundingBox.union(LE);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new gi()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let i = 0; i < t; i++)
      this.getMatrixAt(i, zl), xc.copy(e.boundingSphere).applyMatrix4(zl), this.boundingSphere.union(xc);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.morphTexture !== null && (this.morphTexture = e.morphTexture.clone()), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  getMorphAt(e, t) {
    const i = t.morphTargetInfluences, r = this.morphTexture.source.data.data, s = i.length + 1, o = e * s + 1;
    for (let a = 0; a < i.length; a++)
      i[a] = r[o + a];
  }
  raycast(e, t) {
    const i = this.matrixWorld, r = this.count;
    if (_c.geometry = this.geometry, _c.material = this.material, _c.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), xc.copy(this.boundingSphere), xc.applyMatrix4(i), e.ray.intersectsSphere(xc) !== !1))
      for (let s = 0; s < r; s++) {
        this.getMatrixAt(s, zl), IE.multiplyMatrices(i, zl), _c.matrixWorld = IE, _c.raycast(e, ip);
        for (let o = 0, a = ip.length; o < a; o++) {
          const c = ip[o];
          c.instanceId = s, c.object = this, t.push(c);
        }
        ip.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new Pu(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  setMorphAt(e, t) {
    const i = t.morphTargetInfluences, r = i.length + 1;
    this.morphTexture === null && (this.morphTexture = new qr(new Float32Array(r * this.count), r, this.count, sh, xn));
    const s = this.morphTexture.source.data.data;
    let o = 0;
    for (let f = 0; f < i.length; f++)
      o += i[f];
    const a = this.geometry.morphTargetsRelative ? 1 : 1 - o, c = r * e;
    s[c] = a, s.set(i, c + 1);
  }
  updateMorphTargets() {
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null), this;
  }
}
function qk(n, e) {
  return n.z - e.z;
}
function jk(n, e) {
  return e.z - n.z;
}
class Zk {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(e, t, i) {
    const r = this.pool, s = this.list;
    this.index >= r.length && r.push({
      start: -1,
      count: -1,
      z: -1,
      index: -1
    });
    const o = r[this.index];
    s.push(o), this.index++, o.start = e.start, o.count = e.count, o.z = t, o.index = i;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
}
const ho = /* @__PURE__ */ new yt(), iy = /* @__PURE__ */ new yt(), Kk = /* @__PURE__ */ new yt(), Jk = /* @__PURE__ */ new Qe(1, 1, 1), DE = /* @__PURE__ */ new yt(), ry = /* @__PURE__ */ new ch(), rp = /* @__PURE__ */ new Ri(), fa = /* @__PURE__ */ new gi(), Sc = /* @__PURE__ */ new B(), NE = /* @__PURE__ */ new B(), Qk = /* @__PURE__ */ new B(), sy = /* @__PURE__ */ new Zk(), pi = /* @__PURE__ */ new Sn(), sp = [];
function $k(n, e, t = 0) {
  const i = e.itemSize;
  if (n.isInterleavedBufferAttribute || n.array.constructor !== e.array.constructor) {
    const r = n.count;
    for (let s = 0; s < r; s++)
      for (let o = 0; o < i; o++)
        e.setComponent(s + t, o, n.getComponent(s, o));
  } else
    e.array.set(n.array, t * i);
  e.needsUpdate = !0;
}
class Z2 extends Sn {
  get maxInstanceCount() {
    return this._maxInstanceCount;
  }
  constructor(e, t, i = t * 2, r) {
    super(new Dt(), r), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._drawInfo = [], this._drawRanges = [], this._reservedRanges = [], this._bounds = [], this._maxInstanceCount = e, this._maxVertexCount = t, this._maxIndexCount = i, this._geometryInitialized = !1, this._geometryCount = 0, this._multiDrawCounts = new Int32Array(e), this._multiDrawStarts = new Int32Array(e), this._multiDrawCount = 0, this._multiDrawInstances = null, this._visibilityChanged = !0, this._matricesTexture = null, this._indirectTexture = null, this._colorsTexture = null, this._initMatricesTexture(), this._initIndirectTexture();
  }
  _initMatricesTexture() {
    let e = Math.sqrt(this._maxInstanceCount * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4), i = new qr(t, e, e, Ln, xn);
    this._matricesTexture = i;
  }
  _initIndirectTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const t = new Uint32Array(e * e), i = new qr(t, e, e, oh, ys);
    this._indirectTexture = i;
  }
  _initColorsTexture() {
    let e = Math.sqrt(this._maxIndexCount);
    e = Math.ceil(e);
    const t = new Float32Array(e * e * 4).fill(1), i = new qr(t, e, e, Ln, xn);
    i.colorSpace = Jt.workingColorSpace, this._colorsTexture = i;
  }
  _initializeGeometry(e) {
    const t = this.geometry, i = this._maxVertexCount, r = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const s in e.attributes) {
        const o = e.getAttribute(s), { array: a, itemSize: c, normalized: f } = o, h = new a.constructor(i * c), d = new nn(h, c, f);
        t.setAttribute(s, d);
      }
      if (e.getIndex() !== null) {
        const s = i > 65535 ? new Uint32Array(r) : new Uint16Array(r);
        t.setIndex(new nn(s, 1));
      }
      this._geometryInitialized = !0;
    }
  }
  // Make sure the geometry is compatible with the existing combined geometry attributes
  _validateGeometry(e) {
    const t = this.geometry;
    if (Boolean(e.getIndex()) !== Boolean(t.getIndex()))
      throw new Error('BatchedMesh: All geometries must consistently have "index".');
    for (const i in t.attributes) {
      if (!e.hasAttribute(i))
        throw new Error(`BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);
      const r = e.getAttribute(i), s = t.getAttribute(i);
      if (r.itemSize !== s.itemSize || r.normalized !== s.normalized)
        throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  setCustomSort(e) {
    return this.customSort = e, this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ri());
    const e = this._geometryCount, t = this.boundingBox, i = this._drawInfo;
    t.makeEmpty();
    for (let r = 0; r < e; r++) {
      if (i[r].active === !1)
        continue;
      const s = i[r].geometryIndex;
      this.getMatrixAt(r, ho), this.getBoundingBoxAt(s, rp).applyMatrix4(ho), t.union(rp);
    }
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new gi());
    const e = this.boundingSphere, t = this._drawInfo;
    e.makeEmpty();
    for (let i = 0, r = t.length; i < r; i++) {
      if (t[i].active === !1)
        continue;
      const s = t[i].geometryIndex;
      this.getMatrixAt(i, ho), this.getBoundingSphereAt(s, fa).applyMatrix4(ho), e.union(fa);
    }
  }
  addInstance(e) {
    if (this._drawInfo.length >= this._maxInstanceCount)
      throw new Error("BatchedMesh: Maximum item count reached.");
    this._drawInfo.push({
      visible: !0,
      active: !0,
      geometryIndex: e
    });
    const t = this._drawInfo.length - 1, i = this._matricesTexture, r = i.image.data;
    Kk.toArray(r, t * 16), i.needsUpdate = !0;
    const s = this._colorsTexture;
    return s && (Jk.toArray(s.image.data, t * 4), s.needsUpdate = !0), t;
  }
  addGeometry(e, t = -1, i = -1) {
    if (this._initializeGeometry(e), this._validateGeometry(e), this._drawInfo.length >= this._maxInstanceCount)
      throw new Error("BatchedMesh: Maximum item count reached.");
    const r = {
      vertexStart: -1,
      vertexCount: -1,
      indexStart: -1,
      indexCount: -1
    };
    let s = null;
    const o = this._reservedRanges, a = this._drawRanges, c = this._bounds;
    this._geometryCount !== 0 && (s = o[o.length - 1]), t === -1 ? r.vertexCount = e.getAttribute("position").count : r.vertexCount = t, s === null ? r.vertexStart = 0 : r.vertexStart = s.vertexStart + s.vertexCount;
    const f = e.getIndex(), h = f !== null;
    if (h && (i === -1 ? r.indexCount = f.count : r.indexCount = i, s === null ? r.indexStart = 0 : r.indexStart = s.indexStart + s.indexCount), r.indexStart !== -1 && r.indexStart + r.indexCount > this._maxIndexCount || r.vertexStart + r.vertexCount > this._maxVertexCount)
      throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    const d = this._geometryCount;
    return this._geometryCount++, o.push(r), a.push({
      start: h ? r.indexStart : r.vertexStart,
      count: -1
    }), c.push({
      boxInitialized: !1,
      box: new Ri(),
      sphereInitialized: !1,
      sphere: new gi()
    }), this.setGeometryAt(d, e), d;
  }
  setGeometryAt(e, t) {
    if (e >= this._geometryCount)
      throw new Error("BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(t);
    const i = this.geometry, r = i.getIndex() !== null, s = i.getIndex(), o = t.getIndex(), a = this._reservedRanges[e];
    if (r && o.count > a.indexCount || t.attributes.position.count > a.vertexCount)
      throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");
    const c = a.vertexStart, f = a.vertexCount;
    for (const v in i.attributes) {
      const y = t.getAttribute(v), w = i.getAttribute(v);
      $k(y, w, c);
      const x = y.itemSize;
      for (let g = y.count, S = f; g < S; g++) {
        const M = c + g;
        for (let T = 0; T < x; T++)
          w.setComponent(M, T, 0);
      }
      w.needsUpdate = !0, w.addUpdateRange(c * x, f * x);
    }
    if (r) {
      const v = a.indexStart;
      for (let y = 0; y < o.count; y++)
        s.setX(v + y, c + o.getX(y));
      for (let y = o.count, w = a.indexCount; y < w; y++)
        s.setX(v + y, c);
      s.needsUpdate = !0, s.addUpdateRange(v, a.indexCount);
    }
    const h = this._bounds[e];
    t.boundingBox !== null ? (h.box.copy(t.boundingBox), h.boxInitialized = !0) : h.boxInitialized = !1, t.boundingSphere !== null ? (h.sphere.copy(t.boundingSphere), h.sphereInitialized = !0) : h.sphereInitialized = !1;
    const d = this._drawRanges[e], p = t.getAttribute("position");
    return d.count = r ? o.count : p.count, this._visibilityChanged = !0, e;
  }
  /*
  	deleteGeometry( geometryId ) {
  
  		// TODO: delete geometry and associated instances
  
  	}
  	*/
  /*
  	deleteInstance( instanceId ) {
  
  		// Note: User needs to call optimize() afterward to pack the data.
  
  		const drawInfo = this._drawInfo;
  		if ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {
  
  			return this;
  
  		}
  
  		drawInfo[ instanceId ].active = false;
  		this._visibilityChanged = true;
  
  		return this;
  
  	}
  	*/
  // get bounding box and compute it if it doesn't exist
  getBoundingBoxAt(e, t) {
    if (e >= this._geometryCount)
      return null;
    const i = this._bounds[e], r = i.box, s = this.geometry;
    if (i.boxInitialized === !1) {
      r.makeEmpty();
      const o = s.index, a = s.attributes.position, c = this._drawRanges[e];
      for (let f = c.start, h = c.start + c.count; f < h; f++) {
        let d = f;
        o && (d = o.getX(d)), r.expandByPoint(Sc.fromBufferAttribute(a, d));
      }
      i.boxInitialized = !0;
    }
    return t.copy(r), t;
  }
  // get bounding sphere and compute it if it doesn't exist
  getBoundingSphereAt(e, t) {
    if (e >= this._geometryCount)
      return null;
    const i = this._bounds[e], r = i.sphere, s = this.geometry;
    if (i.sphereInitialized === !1) {
      r.makeEmpty(), this.getBoundingBoxAt(e, rp), rp.getCenter(r.center);
      const o = s.index, a = s.attributes.position, c = this._drawRanges[e];
      let f = 0;
      for (let h = c.start, d = c.start + c.count; h < d; h++) {
        let p = h;
        o && (p = o.getX(p)), Sc.fromBufferAttribute(a, p), f = Math.max(f, r.center.distanceToSquared(Sc));
      }
      r.radius = Math.sqrt(f), i.sphereInitialized = !0;
    }
    return t.copy(r), t;
  }
  setMatrixAt(e, t) {
    const i = this._drawInfo, r = this._matricesTexture, s = this._matricesTexture.image.data;
    return e >= i.length || i[e].active === !1 ? this : (t.toArray(s, e * 16), r.needsUpdate = !0, this);
  }
  getMatrixAt(e, t) {
    const i = this._drawInfo, r = this._matricesTexture.image.data;
    return e >= i.length || i[e].active === !1 ? null : t.fromArray(r, e * 16);
  }
  setColorAt(e, t) {
    this._colorsTexture === null && this._initColorsTexture();
    const i = this._colorsTexture, r = this._colorsTexture.image.data, s = this._drawInfo;
    return e >= s.length || s[e].active === !1 ? this : (t.toArray(r, e * 4), i.needsUpdate = !0, this);
  }
  getColorAt(e, t) {
    const i = this._colorsTexture.image.data, r = this._drawInfo;
    return e >= r.length || r[e].active === !1 ? null : t.fromArray(i, e * 4);
  }
  setVisibleAt(e, t) {
    const i = this._drawInfo;
    return e >= i.length || i[e].active === !1 || i[e].visible === t ? this : (i[e].visible = t, this._visibilityChanged = !0, this);
  }
  getVisibleAt(e) {
    const t = this._drawInfo;
    return e >= t.length || t[e].active === !1 ? !1 : t[e].visible;
  }
  raycast(e, t) {
    const i = this._drawInfo, r = this._drawRanges, s = this.matrixWorld, o = this.geometry;
    pi.material = this.material, pi.geometry.index = o.index, pi.geometry.attributes = o.attributes, pi.geometry.boundingBox === null && (pi.geometry.boundingBox = new Ri()), pi.geometry.boundingSphere === null && (pi.geometry.boundingSphere = new gi());
    for (let a = 0, c = i.length; a < c; a++) {
      if (!i[a].visible || !i[a].active)
        continue;
      const f = i[a].geometryIndex, h = r[f];
      pi.geometry.setDrawRange(h.start, h.count), this.getMatrixAt(a, pi.matrixWorld).premultiply(s), this.getBoundingBoxAt(f, pi.geometry.boundingBox), this.getBoundingSphereAt(f, pi.geometry.boundingSphere), pi.raycast(e, sp);
      for (let d = 0, p = sp.length; d < p; d++) {
        const v = sp[d];
        v.object = this, v.batchId = a, t.push(v);
      }
      sp.length = 0;
    }
    pi.material = null, pi.geometry.index = null, pi.geometry.attributes = {}, pi.geometry.setDrawRange(0, 1 / 0);
  }
  copy(e) {
    return super.copy(e), this.geometry = e.geometry.clone(), this.perObjectFrustumCulled = e.perObjectFrustumCulled, this.sortObjects = e.sortObjects, this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null, this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null, this._drawRanges = e._drawRanges.map((t) => ({ ...t })), this._reservedRanges = e._reservedRanges.map((t) => ({ ...t })), this._drawInfo = e._drawInfo.map((t) => ({ ...t })), this._bounds = e._bounds.map((t) => ({
      boxInitialized: t.boxInitialized,
      box: t.box.clone(),
      sphereInitialized: t.sphereInitialized,
      sphere: t.sphere.clone()
    })), this._maxInstanceCount = e._maxInstanceCount, this._maxVertexCount = e._maxVertexCount, this._maxIndexCount = e._maxIndexCount, this._geometryInitialized = e._geometryInitialized, this._geometryCount = e._geometryCount, this._multiDrawCounts = e._multiDrawCounts.slice(), this._multiDrawStarts = e._multiDrawStarts.slice(), this._matricesTexture = e._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.slice(), this._colorsTexture !== null && (this._colorsTexture = e._colorsTexture.clone(), this._colorsTexture.image.data = this._colorsTexture.image.slice()), this;
  }
  dispose() {
    return this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this._indirectTexture.dispose(), this._indirectTexture = null, this._colorsTexture !== null && (this._colorsTexture.dispose(), this._colorsTexture = null), this;
  }
  onBeforeRender(e, t, i, r, s) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects)
      return;
    const o = r.getIndex(), a = o === null ? 1 : o.array.BYTES_PER_ELEMENT, c = this._drawInfo, f = this._multiDrawStarts, h = this._multiDrawCounts, d = this._drawRanges, p = this.perObjectFrustumCulled, v = this._indirectTexture, y = v.image.data;
    p && (DE.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse).multiply(this.matrixWorld), ry.setFromProjectionMatrix(
      DE,
      e.coordinateSystem
    ));
    let w = 0;
    if (this.sortObjects) {
      iy.copy(this.matrixWorld).invert(), Sc.setFromMatrixPosition(i.matrixWorld).applyMatrix4(iy), NE.set(0, 0, -1).transformDirection(i.matrixWorld).transformDirection(iy);
      for (let S = 0, M = c.length; S < M; S++)
        if (c[S].visible && c[S].active) {
          const T = c[S].geometryIndex;
          this.getMatrixAt(S, ho), this.getBoundingSphereAt(T, fa).applyMatrix4(ho);
          let U = !1;
          if (p && (U = !ry.intersectsSphere(fa)), !U) {
            const P = Qk.subVectors(fa.center, Sc).dot(NE);
            sy.push(d[T], P, S);
          }
        }
      const x = sy.list, g = this.customSort;
      g === null ? x.sort(s.transparent ? jk : qk) : g.call(this, x, i);
      for (let S = 0, M = x.length; S < M; S++) {
        const T = x[S];
        f[w] = T.start * a, h[w] = T.count, y[w] = T.index, w++;
      }
      sy.reset();
    } else
      for (let x = 0, g = c.length; x < g; x++)
        if (c[x].visible && c[x].active) {
          const S = c[x].geometryIndex;
          let M = !1;
          if (p && (this.getMatrixAt(x, ho), this.getBoundingSphereAt(S, fa).applyMatrix4(ho), M = !ry.intersectsSphere(fa)), !M) {
            const T = d[S];
            f[w] = T.start * a, h[w] = T.count, y[w] = x, w++;
          }
        }
    v.needsUpdate = !0, this._multiDrawCount = w, this._visibilityChanged = !1;
  }
  onBeforeShadow(e, t, i, r, s, o) {
    this.onBeforeRender(e, null, r, s, o);
  }
}
class Li extends si {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Qe(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const Qm = /* @__PURE__ */ new B(), $m = /* @__PURE__ */ new B(), UE = /* @__PURE__ */ new yt(), Mc = /* @__PURE__ */ new el(), op = /* @__PURE__ */ new gi(), oy = /* @__PURE__ */ new B(), OE = /* @__PURE__ */ new B();
class zo extends Yt {
  constructor(e = new Dt(), t = new Li()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, i = [0];
      for (let r = 1, s = t.count; r < s; r++)
        Qm.fromBufferAttribute(t, r - 1), $m.fromBufferAttribute(t, r), i[r] = i[r - 1], i[r] += Qm.distanceTo($m);
      e.setAttribute("lineDistance", new rt(i, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const i = this.geometry, r = this.matrixWorld, s = e.params.Line.threshold, o = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), op.copy(i.boundingSphere), op.applyMatrix4(r), op.radius += s, e.ray.intersectsSphere(op) === !1)
      return;
    UE.copy(r).invert(), Mc.copy(e.ray).applyMatrix4(UE);
    const a = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = a * a, f = this.isLineSegments ? 2 : 1, h = i.index, p = i.attributes.position;
    if (h !== null) {
      const v = Math.max(0, o.start), y = Math.min(h.count, o.start + o.count);
      for (let w = v, x = y - 1; w < x; w += f) {
        const g = h.getX(w), S = h.getX(w + 1), M = ap(this, e, Mc, c, g, S);
        M && t.push(M);
      }
      if (this.isLineLoop) {
        const w = h.getX(y - 1), x = h.getX(v), g = ap(this, e, Mc, c, w, x);
        g && t.push(g);
      }
    } else {
      const v = Math.max(0, o.start), y = Math.min(p.count, o.start + o.count);
      for (let w = v, x = y - 1; w < x; w += f) {
        const g = ap(this, e, Mc, c, w, w + 1);
        g && t.push(g);
      }
      if (this.isLineLoop) {
        const w = ap(this, e, Mc, c, y - 1, v);
        w && t.push(w);
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, i = Object.keys(t);
    if (i.length > 0) {
      const r = t[i[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, o = r.length; s < o; s++) {
          const a = r[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = s;
        }
      }
    }
  }
}
function ap(n, e, t, i, r, s) {
  const o = n.geometry.attributes.position;
  if (Qm.fromBufferAttribute(o, r), $m.fromBufferAttribute(o, s), t.distanceSqToSegment(Qm, $m, oy, OE) > i)
    return;
  oy.applyMatrix4(n.matrixWorld);
  const c = e.ray.origin.distanceTo(oy);
  if (!(c < e.near || c > e.far))
    return {
      distance: c,
      // What do we want? intersection point on the ray or on the segment??
      // point: raycaster.ray.at( distance ),
      point: OE.clone().applyMatrix4(n.matrixWorld),
      index: r,
      face: null,
      faceIndex: null,
      object: n
    };
}
const FE = /* @__PURE__ */ new B(), kE = /* @__PURE__ */ new B();
class xs extends zo {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, i = [];
      for (let r = 0, s = t.count; r < s; r += 2)
        FE.fromBufferAttribute(t, r), kE.fromBufferAttribute(t, r + 1), i[r] = r === 0 ? 0 : i[r - 1], i[r + 1] = i[r] + FE.distanceTo(kE);
      e.setAttribute("lineDistance", new rt(i, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class K2 extends zo {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class _1 extends si {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new Qe(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const zE = /* @__PURE__ */ new yt(), F_ = /* @__PURE__ */ new el(), lp = /* @__PURE__ */ new gi(), up = /* @__PURE__ */ new B();
class J2 extends Yt {
  constructor(e = new Dt(), t = new _1()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const i = this.geometry, r = this.matrixWorld, s = e.params.Points.threshold, o = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), lp.copy(i.boundingSphere), lp.applyMatrix4(r), lp.radius += s, e.ray.intersectsSphere(lp) === !1)
      return;
    zE.copy(r).invert(), F_.copy(e.ray).applyMatrix4(zE);
    const a = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = a * a, f = i.index, d = i.attributes.position;
    if (f !== null) {
      const p = Math.max(0, o.start), v = Math.min(f.count, o.start + o.count);
      for (let y = p, w = v; y < w; y++) {
        const x = f.getX(y);
        up.fromBufferAttribute(d, x), BE(up, x, c, r, e, t, this);
      }
    } else {
      const p = Math.max(0, o.start), v = Math.min(d.count, o.start + o.count);
      for (let y = p, w = v; y < w; y++)
        up.fromBufferAttribute(d, y), BE(up, y, c, r, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, i = Object.keys(t);
    if (i.length > 0) {
      const r = t[i[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, o = r.length; s < o; s++) {
          const a = r[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = s;
        }
      }
    }
  }
}
function BE(n, e, t, i, r, s, o) {
  const a = F_.distanceSqToPoint(n);
  if (a < t) {
    const c = new B();
    F_.closestPointToPoint(n, c), c.applyMatrix4(i);
    const f = r.ray.origin.distanceTo(c);
    if (f < r.near || f > r.far)
      return;
    s.push({
      distance: f,
      distanceToRay: Math.sqrt(a),
      point: c,
      index: e,
      face: null,
      object: o
    });
  }
}
class ez extends Kt {
  constructor(e, t, i, r, s, o, a, c, f) {
    super(e, t, i, r, s, o, a, c, f), this.isVideoTexture = !0, this.minFilter = o !== void 0 ? o : $t, this.magFilter = s !== void 0 ? s : $t, this.generateMipmaps = !1;
    const h = this;
    function d() {
      h.needsUpdate = !0, e.requestVideoFrameCallback(d);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(d);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class tz extends Kt {
  constructor(e, t) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.magFilter = Qn, this.minFilter = Qn, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class Og extends Kt {
  constructor(e, t, i, r, s, o, a, c, f, h, d, p) {
    super(null, o, a, c, f, h, r, s, d, p), this.isCompressedTexture = !0, this.image = { width: t, height: i }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class nz extends Og {
  constructor(e, t, i, r, s, o) {
    super(e, t, i, s, o), this.isCompressedArrayTexture = !0, this.image.depth = r, this.wrapR = Bn, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class iz extends Og {
  constructor(e, t, i) {
    super(void 0, e[0].width, e[0].height, t, i, vs), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class rz extends Kt {
  constructor(e, t, i, r, s, o, a, c, f) {
    super(e, t, i, r, s, o, a, c, f), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class Zr {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const i = this.getUtoTmapping(e);
    return this.getPoint(i, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let i = 0; i <= e; i++)
      t.push(this.getPoint(i / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let i = 0; i <= e; i++)
      t.push(this.getPointAt(i / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let i, r = this.getPoint(0), s = 0;
    t.push(0);
    for (let o = 1; o <= e; o++)
      i = this.getPoint(o / e), s += i.distanceTo(r), t.push(s), r = i;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const i = this.getLengths();
    let r = 0;
    const s = i.length;
    let o;
    t ? o = t : o = e * i[s - 1];
    let a = 0, c = s - 1, f;
    for (; a <= c; )
      if (r = Math.floor(a + (c - a) / 2), f = i[r] - o, f < 0)
        a = r + 1;
      else if (f > 0)
        c = r - 1;
      else {
        c = r;
        break;
      }
    if (r = c, i[r] === o)
      return r / (s - 1);
    const h = i[r], p = i[r + 1] - h, v = (o - h) / p;
    return (r + v) / (s - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let r = e - 1e-4, s = e + 1e-4;
    r < 0 && (r = 0), s > 1 && (s = 1);
    const o = this.getPoint(r), a = this.getPoint(s), c = t || (o.isVector2 ? new _e() : new B());
    return c.copy(a).sub(o).normalize(), c;
  }
  getTangentAt(e, t) {
    const i = this.getUtoTmapping(e);
    return this.getTangent(i, t);
  }
  computeFrenetFrames(e, t) {
    const i = new B(), r = [], s = [], o = [], a = new B(), c = new yt();
    for (let v = 0; v <= e; v++) {
      const y = v / e;
      r[v] = this.getTangentAt(y, new B());
    }
    s[0] = new B(), o[0] = new B();
    let f = Number.MAX_VALUE;
    const h = Math.abs(r[0].x), d = Math.abs(r[0].y), p = Math.abs(r[0].z);
    h <= f && (f = h, i.set(1, 0, 0)), d <= f && (f = d, i.set(0, 1, 0)), p <= f && i.set(0, 0, 1), a.crossVectors(r[0], i).normalize(), s[0].crossVectors(r[0], a), o[0].crossVectors(r[0], s[0]);
    for (let v = 1; v <= e; v++) {
      if (s[v] = s[v - 1].clone(), o[v] = o[v - 1].clone(), a.crossVectors(r[v - 1], r[v]), a.length() > Number.EPSILON) {
        a.normalize();
        const y = Math.acos(Cn(r[v - 1].dot(r[v]), -1, 1));
        s[v].applyMatrix4(c.makeRotationAxis(a, y));
      }
      o[v].crossVectors(r[v], s[v]);
    }
    if (t === !0) {
      let v = Math.acos(Cn(s[0].dot(s[e]), -1, 1));
      v /= e, r[0].dot(a.crossVectors(s[0], s[e])) > 0 && (v = -v);
      for (let y = 1; y <= e; y++)
        s[y].applyMatrix4(c.makeRotationAxis(r[y], v * y)), o[y].crossVectors(r[y], s[y]);
    }
    return {
      tangents: r,
      normals: s,
      binormals: o
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class Fg extends Zr {
  constructor(e = 0, t = 0, i = 1, r = 1, s = 0, o = Math.PI * 2, a = !1, c = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = i, this.yRadius = r, this.aStartAngle = s, this.aEndAngle = o, this.aClockwise = a, this.aRotation = c;
  }
  getPoint(e, t = new _e()) {
    const i = t, r = Math.PI * 2;
    let s = this.aEndAngle - this.aStartAngle;
    const o = Math.abs(s) < Number.EPSILON;
    for (; s < 0; )
      s += r;
    for (; s > r; )
      s -= r;
    s < Number.EPSILON && (o ? s = 0 : s = r), this.aClockwise === !0 && !o && (s === r ? s = -r : s = s - r);
    const a = this.aStartAngle + e * s;
    let c = this.aX + this.xRadius * Math.cos(a), f = this.aY + this.yRadius * Math.sin(a);
    if (this.aRotation !== 0) {
      const h = Math.cos(this.aRotation), d = Math.sin(this.aRotation), p = c - this.aX, v = f - this.aY;
      c = p * h - v * d + this.aX, f = p * d + v * h + this.aY;
    }
    return i.set(c, f);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class Q2 extends Fg {
  constructor(e, t, i, r, s, o) {
    super(e, t, i, i, r, s, o), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function x1() {
  let n = 0, e = 0, t = 0, i = 0;
  function r(s, o, a, c) {
    n = s, e = a, t = -3 * s + 3 * o - 2 * a - c, i = 2 * s - 2 * o + a + c;
  }
  return {
    initCatmullRom: function(s, o, a, c, f) {
      r(o, a, f * (a - s), f * (c - o));
    },
    initNonuniformCatmullRom: function(s, o, a, c, f, h, d) {
      let p = (o - s) / f - (a - s) / (f + h) + (a - o) / h, v = (a - o) / h - (c - o) / (h + d) + (c - a) / d;
      p *= h, v *= h, r(o, a, p, v);
    },
    calc: function(s) {
      const o = s * s, a = o * s;
      return n + e * s + t * o + i * a;
    }
  };
}
const cp = /* @__PURE__ */ new B(), ay = /* @__PURE__ */ new x1(), ly = /* @__PURE__ */ new x1(), uy = /* @__PURE__ */ new x1();
class $2 extends Zr {
  constructor(e = [], t = !1, i = "centripetal", r = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = i, this.tension = r;
  }
  getPoint(e, t = new B()) {
    const i = t, r = this.points, s = r.length, o = (s - (this.closed ? 0 : 1)) * e;
    let a = Math.floor(o), c = o - a;
    this.closed ? a += a > 0 ? 0 : (Math.floor(Math.abs(a) / s) + 1) * s : c === 0 && a === s - 1 && (a = s - 2, c = 1);
    let f, h;
    this.closed || a > 0 ? f = r[(a - 1) % s] : (cp.subVectors(r[0], r[1]).add(r[0]), f = cp);
    const d = r[a % s], p = r[(a + 1) % s];
    if (this.closed || a + 2 < s ? h = r[(a + 2) % s] : (cp.subVectors(r[s - 1], r[s - 2]).add(r[s - 1]), h = cp), this.curveType === "centripetal" || this.curveType === "chordal") {
      const v = this.curveType === "chordal" ? 0.5 : 0.25;
      let y = Math.pow(f.distanceToSquared(d), v), w = Math.pow(d.distanceToSquared(p), v), x = Math.pow(p.distanceToSquared(h), v);
      w < 1e-4 && (w = 1), y < 1e-4 && (y = w), x < 1e-4 && (x = w), ay.initNonuniformCatmullRom(f.x, d.x, p.x, h.x, y, w, x), ly.initNonuniformCatmullRom(f.y, d.y, p.y, h.y, y, w, x), uy.initNonuniformCatmullRom(f.z, d.z, p.z, h.z, y, w, x);
    } else
      this.curveType === "catmullrom" && (ay.initCatmullRom(f.x, d.x, p.x, h.x, this.tension), ly.initCatmullRom(f.y, d.y, p.y, h.y, this.tension), uy.initCatmullRom(f.z, d.z, p.z, h.z, this.tension));
    return i.set(
      ay.calc(c),
      ly.calc(c),
      uy.calc(c)
    ), i;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const r = e.points[t];
      this.points.push(r.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, i = this.points.length; t < i; t++) {
      const r = this.points[t];
      e.points.push(r.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const r = e.points[t];
      this.points.push(new B().fromArray(r));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function HE(n, e, t, i, r) {
  const s = (i - e) * 0.5, o = (r - t) * 0.5, a = n * n, c = n * a;
  return (2 * t - 2 * i + s + o) * c + (-3 * t + 3 * i - 2 * s - o) * a + s * n + t;
}
function sz(n, e) {
  const t = 1 - n;
  return t * t * e;
}
function oz(n, e) {
  return 2 * (1 - n) * n * e;
}
function az(n, e) {
  return n * n * e;
}
function of(n, e, t, i) {
  return sz(n, e) + oz(n, t) + az(n, i);
}
function lz(n, e) {
  const t = 1 - n;
  return t * t * t * e;
}
function uz(n, e) {
  const t = 1 - n;
  return 3 * t * t * n * e;
}
function cz(n, e) {
  return 3 * (1 - n) * n * n * e;
}
function fz(n, e) {
  return n * n * n * e;
}
function af(n, e, t, i, r) {
  return lz(n, e) + uz(n, t) + cz(n, i) + fz(n, r);
}
class S1 extends Zr {
  constructor(e = new _e(), t = new _e(), i = new _e(), r = new _e()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = i, this.v3 = r;
  }
  getPoint(e, t = new _e()) {
    const i = t, r = this.v0, s = this.v1, o = this.v2, a = this.v3;
    return i.set(
      af(e, r.x, s.x, o.x, a.x),
      af(e, r.y, s.y, o.y, a.y)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class eb extends Zr {
  constructor(e = new B(), t = new B(), i = new B(), r = new B()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = i, this.v3 = r;
  }
  getPoint(e, t = new B()) {
    const i = t, r = this.v0, s = this.v1, o = this.v2, a = this.v3;
    return i.set(
      af(e, r.x, s.x, o.x, a.x),
      af(e, r.y, s.y, o.y, a.y),
      af(e, r.z, s.z, o.z, a.z)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class M1 extends Zr {
  constructor(e = new _e(), t = new _e()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new _e()) {
    const i = t;
    return e === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(e).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new _e()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class tb extends Zr {
  constructor(e = new B(), t = new B()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new B()) {
    const i = t;
    return e === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(e).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new B()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class w1 extends Zr {
  constructor(e = new _e(), t = new _e(), i = new _e()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = i;
  }
  getPoint(e, t = new _e()) {
    const i = t, r = this.v0, s = this.v1, o = this.v2;
    return i.set(
      of(e, r.x, s.x, o.x),
      of(e, r.y, s.y, o.y)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class E1 extends Zr {
  constructor(e = new B(), t = new B(), i = new B()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = i;
  }
  getPoint(e, t = new B()) {
    const i = t, r = this.v0, s = this.v1, o = this.v2;
    return i.set(
      of(e, r.x, s.x, o.x),
      of(e, r.y, s.y, o.y),
      of(e, r.z, s.z, o.z)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class T1 extends Zr {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new _e()) {
    const i = t, r = this.points, s = (r.length - 1) * e, o = Math.floor(s), a = s - o, c = r[o === 0 ? o : o - 1], f = r[o], h = r[o > r.length - 2 ? r.length - 1 : o + 1], d = r[o > r.length - 3 ? r.length - 1 : o + 2];
    return i.set(
      HE(a, c.x, f.x, h.x, d.x),
      HE(a, c.y, f.y, h.y, d.y)
    ), i;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const r = e.points[t];
      this.points.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, i = this.points.length; t < i; t++) {
      const r = this.points[t];
      e.points.push(r.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const r = e.points[t];
      this.points.push(new _e().fromArray(r));
    }
    return this;
  }
}
var eg = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: Q2,
  CatmullRomCurve3: $2,
  CubicBezierCurve: S1,
  CubicBezierCurve3: eb,
  EllipseCurve: Fg,
  LineCurve: M1,
  LineCurve3: tb,
  QuadraticBezierCurve: w1,
  QuadraticBezierCurve3: E1,
  SplineCurve: T1
});
class nb extends Zr {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const i = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new eg[i](t, e));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const i = e * this.getLength(), r = this.getCurveLengths();
    let s = 0;
    for (; s < r.length; ) {
      if (r[s] >= i) {
        const o = r[s] - i, a = this.curves[s], c = a.getLength(), f = c === 0 ? 0 : 1 - o / c;
        return a.getPointAt(f, t);
      }
      s++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let i = 0, r = this.curves.length; i < r; i++)
      t += this.curves[i].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let i = 0; i <= e; i++)
      t.push(this.getPoint(i / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let i;
    for (let r = 0, s = this.curves; r < s.length; r++) {
      const o = s[r], a = o.isEllipseCurve ? e * 2 : o.isLineCurve || o.isLineCurve3 ? 1 : o.isSplineCurve ? e * o.points.length : e, c = o.getPoints(a);
      for (let f = 0; f < c.length; f++) {
        const h = c[f];
        i && i.equals(h) || (t.push(h), i = h);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, i = e.curves.length; t < i; t++) {
      const r = e.curves[t];
      this.curves.push(r.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, i = this.curves.length; t < i; t++) {
      const r = this.curves[t];
      e.curves.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, i = e.curves.length; t < i; t++) {
      const r = e.curves[t];
      this.curves.push(new eg[r.type]().fromJSON(r));
    }
    return this;
  }
}
class Bf extends nb {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new _e(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, i = e.length; t < i; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const i = new M1(this.currentPoint.clone(), new _e(e, t));
    return this.curves.push(i), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, i, r) {
    const s = new w1(
      this.currentPoint.clone(),
      new _e(e, t),
      new _e(i, r)
    );
    return this.curves.push(s), this.currentPoint.set(i, r), this;
  }
  bezierCurveTo(e, t, i, r, s, o) {
    const a = new S1(
      this.currentPoint.clone(),
      new _e(e, t),
      new _e(i, r),
      new _e(s, o)
    );
    return this.curves.push(a), this.currentPoint.set(s, o), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), i = new T1(t);
    return this.curves.push(i), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, i, r, s, o) {
    const a = this.currentPoint.x, c = this.currentPoint.y;
    return this.absarc(
      e + a,
      t + c,
      i,
      r,
      s,
      o
    ), this;
  }
  absarc(e, t, i, r, s, o) {
    return this.absellipse(e, t, i, i, r, s, o), this;
  }
  ellipse(e, t, i, r, s, o, a, c) {
    const f = this.currentPoint.x, h = this.currentPoint.y;
    return this.absellipse(e + f, t + h, i, r, s, o, a, c), this;
  }
  absellipse(e, t, i, r, s, o, a, c) {
    const f = new Fg(e, t, i, r, s, o, a, c);
    if (this.curves.length > 0) {
      const d = f.getPoint(0);
      d.equals(this.currentPoint) || this.lineTo(d.x, d.y);
    }
    this.curves.push(f);
    const h = f.getPoint(1);
    return this.currentPoint.copy(h), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class hh extends Dt {
  constructor(e = [new _e(0, -0.5), new _e(0.5, 0), new _e(0, 0.5)], t = 12, i = 0, r = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: i,
      phiLength: r
    }, t = Math.floor(t), r = Cn(r, 0, Math.PI * 2);
    const s = [], o = [], a = [], c = [], f = [], h = 1 / t, d = new B(), p = new _e(), v = new B(), y = new B(), w = new B();
    let x = 0, g = 0;
    for (let S = 0; S <= e.length - 1; S++)
      switch (S) {
        case 0:
          x = e[S + 1].x - e[S].x, g = e[S + 1].y - e[S].y, v.x = g * 1, v.y = -x, v.z = g * 0, w.copy(v), v.normalize(), c.push(v.x, v.y, v.z);
          break;
        case e.length - 1:
          c.push(w.x, w.y, w.z);
          break;
        default:
          x = e[S + 1].x - e[S].x, g = e[S + 1].y - e[S].y, v.x = g * 1, v.y = -x, v.z = g * 0, y.copy(v), v.x += w.x, v.y += w.y, v.z += w.z, v.normalize(), c.push(v.x, v.y, v.z), w.copy(y);
      }
    for (let S = 0; S <= t; S++) {
      const M = i + S * h * r, T = Math.sin(M), U = Math.cos(M);
      for (let P = 0; P <= e.length - 1; P++) {
        d.x = e[P].x * T, d.y = e[P].y, d.z = e[P].x * U, o.push(d.x, d.y, d.z), p.x = S / t, p.y = P / (e.length - 1), a.push(p.x, p.y);
        const D = c[3 * P + 0] * T, R = c[3 * P + 1], C = c[3 * P + 0] * U;
        f.push(D, R, C);
      }
    }
    for (let S = 0; S < t; S++)
      for (let M = 0; M < e.length - 1; M++) {
        const T = M + S * e.length, U = T, P = T + e.length, D = T + e.length + 1, R = T + 1;
        s.push(U, P, R), s.push(D, R, P);
      }
    this.setIndex(s), this.setAttribute("position", new rt(o, 3)), this.setAttribute("uv", new rt(a, 2)), this.setAttribute("normal", new rt(f, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new hh(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class kg extends hh {
  constructor(e = 1, t = 1, i = 4, r = 8) {
    const s = new Bf();
    s.absarc(0, -t / 2, e, Math.PI * 1.5, 0), s.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(s.getPoints(i), r), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      length: t,
      capSegments: i,
      radialSegments: r
    };
  }
  static fromJSON(e) {
    return new kg(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class zg extends Dt {
  constructor(e = 1, t = 32, i = 0, r = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: i,
      thetaLength: r
    }, t = Math.max(3, t);
    const s = [], o = [], a = [], c = [], f = new B(), h = new _e();
    o.push(0, 0, 0), a.push(0, 0, 1), c.push(0.5, 0.5);
    for (let d = 0, p = 3; d <= t; d++, p += 3) {
      const v = i + d / t * r;
      f.x = e * Math.cos(v), f.y = e * Math.sin(v), o.push(f.x, f.y, f.z), a.push(0, 0, 1), h.x = (o[p] / e + 1) / 2, h.y = (o[p + 1] / e + 1) / 2, c.push(h.x, h.y);
    }
    for (let d = 1; d <= t; d++)
      s.push(d, d + 1, 0);
    this.setIndex(s), this.setAttribute("position", new rt(o, 3)), this.setAttribute("normal", new rt(a, 3)), this.setAttribute("uv", new rt(c, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new zg(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class Fu extends Dt {
  constructor(e = 1, t = 1, i = 1, r = 32, s = 1, o = !1, a = 0, c = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: i,
      radialSegments: r,
      heightSegments: s,
      openEnded: o,
      thetaStart: a,
      thetaLength: c
    };
    const f = this;
    r = Math.floor(r), s = Math.floor(s);
    const h = [], d = [], p = [], v = [];
    let y = 0;
    const w = [], x = i / 2;
    let g = 0;
    S(), o === !1 && (e > 0 && M(!0), t > 0 && M(!1)), this.setIndex(h), this.setAttribute("position", new rt(d, 3)), this.setAttribute("normal", new rt(p, 3)), this.setAttribute("uv", new rt(v, 2));
    function S() {
      const T = new B(), U = new B();
      let P = 0;
      const D = (t - e) / i;
      for (let R = 0; R <= s; R++) {
        const C = [], A = R / s, N = A * (t - e) + e;
        for (let G = 0; G <= r; G++) {
          const W = G / r, j = W * c + a, Q = Math.sin(j), J = Math.cos(j);
          U.x = N * Q, U.y = -A * i + x, U.z = N * J, d.push(U.x, U.y, U.z), T.set(Q, D, J).normalize(), p.push(T.x, T.y, T.z), v.push(W, 1 - A), C.push(y++);
        }
        w.push(C);
      }
      for (let R = 0; R < r; R++)
        for (let C = 0; C < s; C++) {
          const A = w[C][R], N = w[C + 1][R], G = w[C + 1][R + 1], W = w[C][R + 1];
          h.push(A, N, W), h.push(N, G, W), P += 6;
        }
      f.addGroup(g, P, 0), g += P;
    }
    function M(T) {
      const U = y, P = new _e(), D = new B();
      let R = 0;
      const C = T === !0 ? e : t, A = T === !0 ? 1 : -1;
      for (let G = 1; G <= r; G++)
        d.push(0, x * A, 0), p.push(0, A, 0), v.push(0.5, 0.5), y++;
      const N = y;
      for (let G = 0; G <= r; G++) {
        const j = G / r * c + a, Q = Math.cos(j), J = Math.sin(j);
        D.x = C * J, D.y = x * A, D.z = C * Q, d.push(D.x, D.y, D.z), p.push(0, A, 0), P.x = Q * 0.5 + 0.5, P.y = J * 0.5 * A + 0.5, v.push(P.x, P.y), y++;
      }
      for (let G = 0; G < r; G++) {
        const W = U + G, j = N + G;
        T === !0 ? h.push(j, j + 1, W) : h.push(j + 1, j, W), R += 3;
      }
      f.addGroup(g, R, T === !0 ? 1 : 2), g += R;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Fu(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Bg extends Fu {
  constructor(e = 1, t = 1, i = 32, r = 1, s = !1, o = 0, a = Math.PI * 2) {
    super(0, e, t, i, r, s, o, a), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: i,
      heightSegments: r,
      openEnded: s,
      thetaStart: o,
      thetaLength: a
    };
  }
  static fromJSON(e) {
    return new Bg(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Yo extends Dt {
  constructor(e = [], t = [], i = 1, r = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: i,
      detail: r
    };
    const s = [], o = [];
    a(r), f(i), h(), this.setAttribute("position", new rt(s, 3)), this.setAttribute("normal", new rt(s.slice(), 3)), this.setAttribute("uv", new rt(o, 2)), r === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function a(S) {
      const M = new B(), T = new B(), U = new B();
      for (let P = 0; P < t.length; P += 3)
        v(t[P + 0], M), v(t[P + 1], T), v(t[P + 2], U), c(M, T, U, S);
    }
    function c(S, M, T, U) {
      const P = U + 1, D = [];
      for (let R = 0; R <= P; R++) {
        D[R] = [];
        const C = S.clone().lerp(T, R / P), A = M.clone().lerp(T, R / P), N = P - R;
        for (let G = 0; G <= N; G++)
          G === 0 && R === P ? D[R][G] = C : D[R][G] = C.clone().lerp(A, G / N);
      }
      for (let R = 0; R < P; R++)
        for (let C = 0; C < 2 * (P - R) - 1; C++) {
          const A = Math.floor(C / 2);
          C % 2 === 0 ? (p(D[R][A + 1]), p(D[R + 1][A]), p(D[R][A])) : (p(D[R][A + 1]), p(D[R + 1][A + 1]), p(D[R + 1][A]));
        }
    }
    function f(S) {
      const M = new B();
      for (let T = 0; T < s.length; T += 3)
        M.x = s[T + 0], M.y = s[T + 1], M.z = s[T + 2], M.normalize().multiplyScalar(S), s[T + 0] = M.x, s[T + 1] = M.y, s[T + 2] = M.z;
    }
    function h() {
      const S = new B();
      for (let M = 0; M < s.length; M += 3) {
        S.x = s[M + 0], S.y = s[M + 1], S.z = s[M + 2];
        const T = x(S) / 2 / Math.PI + 0.5, U = g(S) / Math.PI + 0.5;
        o.push(T, 1 - U);
      }
      y(), d();
    }
    function d() {
      for (let S = 0; S < o.length; S += 6) {
        const M = o[S + 0], T = o[S + 2], U = o[S + 4], P = Math.max(M, T, U), D = Math.min(M, T, U);
        P > 0.9 && D < 0.1 && (M < 0.2 && (o[S + 0] += 1), T < 0.2 && (o[S + 2] += 1), U < 0.2 && (o[S + 4] += 1));
      }
    }
    function p(S) {
      s.push(S.x, S.y, S.z);
    }
    function v(S, M) {
      const T = S * 3;
      M.x = e[T + 0], M.y = e[T + 1], M.z = e[T + 2];
    }
    function y() {
      const S = new B(), M = new B(), T = new B(), U = new B(), P = new _e(), D = new _e(), R = new _e();
      for (let C = 0, A = 0; C < s.length; C += 9, A += 6) {
        S.set(s[C + 0], s[C + 1], s[C + 2]), M.set(s[C + 3], s[C + 4], s[C + 5]), T.set(s[C + 6], s[C + 7], s[C + 8]), P.set(o[A + 0], o[A + 1]), D.set(o[A + 2], o[A + 3]), R.set(o[A + 4], o[A + 5]), U.copy(S).add(M).add(T).divideScalar(3);
        const N = x(U);
        w(P, A + 0, S, N), w(D, A + 2, M, N), w(R, A + 4, T, N);
      }
    }
    function w(S, M, T, U) {
      U < 0 && S.x === 1 && (o[M] = S.x - 1), T.x === 0 && T.z === 0 && (o[M] = U / 2 / Math.PI + 0.5);
    }
    function x(S) {
      return Math.atan2(S.z, -S.x);
    }
    function g(S) {
      return Math.atan2(-S.y, Math.sqrt(S.x * S.x + S.z * S.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Yo(e.vertices, e.indices, e.radius, e.details);
  }
}
class Hg extends Yo {
  constructor(e = 1, t = 0) {
    const i = (1 + Math.sqrt(5)) / 2, r = 1 / i, s = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -r,
      -i,
      0,
      -r,
      i,
      0,
      r,
      -i,
      0,
      r,
      i,
      // (±1/φ, ±φ, 0)
      -r,
      -i,
      0,
      -r,
      i,
      0,
      r,
      -i,
      0,
      r,
      i,
      0,
      // (±φ, 0, ±1/φ)
      -i,
      0,
      -r,
      i,
      0,
      -r,
      -i,
      0,
      r,
      i,
      0,
      r
    ], o = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(s, o, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Hg(e.radius, e.detail);
  }
}
const fp = /* @__PURE__ */ new B(), hp = /* @__PURE__ */ new B(), cy = /* @__PURE__ */ new B(), dp = /* @__PURE__ */ new tr();
class ib extends Dt {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const r = Math.pow(10, 4), s = Math.cos(za * t), o = e.getIndex(), a = e.getAttribute("position"), c = o ? o.count : a.count, f = [0, 0, 0], h = ["a", "b", "c"], d = new Array(3), p = {}, v = [];
      for (let y = 0; y < c; y += 3) {
        o ? (f[0] = o.getX(y), f[1] = o.getX(y + 1), f[2] = o.getX(y + 2)) : (f[0] = y, f[1] = y + 1, f[2] = y + 2);
        const { a: w, b: x, c: g } = dp;
        if (w.fromBufferAttribute(a, f[0]), x.fromBufferAttribute(a, f[1]), g.fromBufferAttribute(a, f[2]), dp.getNormal(cy), d[0] = `${Math.round(w.x * r)},${Math.round(w.y * r)},${Math.round(w.z * r)}`, d[1] = `${Math.round(x.x * r)},${Math.round(x.y * r)},${Math.round(x.z * r)}`, d[2] = `${Math.round(g.x * r)},${Math.round(g.y * r)},${Math.round(g.z * r)}`, !(d[0] === d[1] || d[1] === d[2] || d[2] === d[0]))
          for (let S = 0; S < 3; S++) {
            const M = (S + 1) % 3, T = d[S], U = d[M], P = dp[h[S]], D = dp[h[M]], R = `${T}_${U}`, C = `${U}_${T}`;
            C in p && p[C] ? (cy.dot(p[C].normal) <= s && (v.push(P.x, P.y, P.z), v.push(D.x, D.y, D.z)), p[C] = null) : R in p || (p[R] = {
              index0: f[S],
              index1: f[M],
              normal: cy.clone()
            });
          }
      }
      for (const y in p)
        if (p[y]) {
          const { index0: w, index1: x } = p[y];
          fp.fromBufferAttribute(a, w), hp.fromBufferAttribute(a, x), v.push(fp.x, fp.y, fp.z), v.push(hp.x, hp.y, hp.z);
        }
      this.setAttribute("position", new rt(v, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class Ha extends Bf {
  constructor(e) {
    super(e), this.uuid = rr(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let i = 0, r = this.holes.length; i < r; i++)
      t[i] = this.holes[i].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, i = e.holes.length; t < i; t++) {
      const r = e.holes[t];
      this.holes.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, i = this.holes.length; t < i; t++) {
      const r = this.holes[t];
      e.holes.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, i = e.holes.length; t < i; t++) {
      const r = e.holes[t];
      this.holes.push(new Bf().fromJSON(r));
    }
    return this;
  }
}
const hz = {
  triangulate: function(n, e, t = 2) {
    const i = e && e.length, r = i ? e[0] * t : n.length;
    let s = rb(n, 0, r, t, !0);
    const o = [];
    if (!s || s.next === s.prev)
      return o;
    let a, c, f, h, d, p, v;
    if (i && (s = vz(n, e, s, t)), n.length > 80 * t) {
      a = f = n[0], c = h = n[1];
      for (let y = t; y < r; y += t)
        d = n[y], p = n[y + 1], d < a && (a = d), p < c && (c = p), d > f && (f = d), p > h && (h = p);
      v = Math.max(f - a, h - c), v = v !== 0 ? 32767 / v : 0;
    }
    return Hf(s, o, t, a, c, v, 0), o;
  }
};
function rb(n, e, t, i, r) {
  let s, o;
  if (r === Rz(n, e, t, i) > 0)
    for (s = e; s < t; s += i)
      o = VE(s, n[s], n[s + 1], o);
  else
    for (s = t - i; s >= e; s -= i)
      o = VE(s, n[s], n[s + 1], o);
  return o && Vg(o, o.next) && (Gf(o), o = o.next), o;
}
function Ka(n, e) {
  if (!n)
    return n;
  e || (e = n);
  let t = n, i;
  do
    if (i = !1, !t.steiner && (Vg(t, t.next) || _n(t.prev, t, t.next) === 0)) {
      if (Gf(t), t = e = t.prev, t === t.next)
        break;
      i = !0;
    } else
      t = t.next;
  while (i || t !== e);
  return e;
}
function Hf(n, e, t, i, r, s, o) {
  if (!n)
    return;
  !o && s && Mz(n, i, r, s);
  let a = n, c, f;
  for (; n.prev !== n.next; ) {
    if (c = n.prev, f = n.next, s ? pz(n, i, r, s) : dz(n)) {
      e.push(c.i / t | 0), e.push(n.i / t | 0), e.push(f.i / t | 0), Gf(n), n = f.next, a = f.next;
      continue;
    }
    if (n = f, n === a) {
      o ? o === 1 ? (n = mz(Ka(n), e, t), Hf(n, e, t, i, r, s, 2)) : o === 2 && gz(n, e, t, i, r, s) : Hf(Ka(n), e, t, i, r, s, 1);
      break;
    }
  }
}
function dz(n) {
  const e = n.prev, t = n, i = n.next;
  if (_n(e, t, i) >= 0)
    return !1;
  const r = e.x, s = t.x, o = i.x, a = e.y, c = t.y, f = i.y, h = r < s ? r < o ? r : o : s < o ? s : o, d = a < c ? a < f ? a : f : c < f ? c : f, p = r > s ? r > o ? r : o : s > o ? s : o, v = a > c ? a > f ? a : f : c > f ? c : f;
  let y = i.next;
  for (; y !== e; ) {
    if (y.x >= h && y.x <= p && y.y >= d && y.y <= v && lu(r, a, s, c, o, f, y.x, y.y) && _n(y.prev, y, y.next) >= 0)
      return !1;
    y = y.next;
  }
  return !0;
}
function pz(n, e, t, i) {
  const r = n.prev, s = n, o = n.next;
  if (_n(r, s, o) >= 0)
    return !1;
  const a = r.x, c = s.x, f = o.x, h = r.y, d = s.y, p = o.y, v = a < c ? a < f ? a : f : c < f ? c : f, y = h < d ? h < p ? h : p : d < p ? d : p, w = a > c ? a > f ? a : f : c > f ? c : f, x = h > d ? h > p ? h : p : d > p ? d : p, g = k_(v, y, e, t, i), S = k_(w, x, e, t, i);
  let M = n.prevZ, T = n.nextZ;
  for (; M && M.z >= g && T && T.z <= S; ) {
    if (M.x >= v && M.x <= w && M.y >= y && M.y <= x && M !== r && M !== o && lu(a, h, c, d, f, p, M.x, M.y) && _n(M.prev, M, M.next) >= 0 || (M = M.prevZ, T.x >= v && T.x <= w && T.y >= y && T.y <= x && T !== r && T !== o && lu(a, h, c, d, f, p, T.x, T.y) && _n(T.prev, T, T.next) >= 0))
      return !1;
    T = T.nextZ;
  }
  for (; M && M.z >= g; ) {
    if (M.x >= v && M.x <= w && M.y >= y && M.y <= x && M !== r && M !== o && lu(a, h, c, d, f, p, M.x, M.y) && _n(M.prev, M, M.next) >= 0)
      return !1;
    M = M.prevZ;
  }
  for (; T && T.z <= S; ) {
    if (T.x >= v && T.x <= w && T.y >= y && T.y <= x && T !== r && T !== o && lu(a, h, c, d, f, p, T.x, T.y) && _n(T.prev, T, T.next) >= 0)
      return !1;
    T = T.nextZ;
  }
  return !0;
}
function mz(n, e, t) {
  let i = n;
  do {
    const r = i.prev, s = i.next.next;
    !Vg(r, s) && sb(r, i, i.next, s) && Vf(r, s) && Vf(s, r) && (e.push(r.i / t | 0), e.push(i.i / t | 0), e.push(s.i / t | 0), Gf(i), Gf(i.next), i = n = s), i = i.next;
  } while (i !== n);
  return Ka(i);
}
function gz(n, e, t, i, r, s) {
  let o = n;
  do {
    let a = o.next.next;
    for (; a !== o.prev; ) {
      if (o.i !== a.i && Tz(o, a)) {
        let c = ob(o, a);
        o = Ka(o, o.next), c = Ka(c, c.next), Hf(o, e, t, i, r, s, 0), Hf(c, e, t, i, r, s, 0);
        return;
      }
      a = a.next;
    }
    o = o.next;
  } while (o !== n);
}
function vz(n, e, t, i) {
  const r = [];
  let s, o, a, c, f;
  for (s = 0, o = e.length; s < o; s++)
    a = e[s] * i, c = s < o - 1 ? e[s + 1] * i : n.length, f = rb(n, a, c, i, !1), f === f.next && (f.steiner = !0), r.push(Ez(f));
  for (r.sort(yz), s = 0; s < r.length; s++)
    t = _z(r[s], t);
  return t;
}
function yz(n, e) {
  return n.x - e.x;
}
function _z(n, e) {
  const t = xz(n, e);
  if (!t)
    return e;
  const i = ob(t, n);
  return Ka(i, i.next), Ka(t, t.next);
}
function xz(n, e) {
  let t = e, i = -1 / 0, r;
  const s = n.x, o = n.y;
  do {
    if (o <= t.y && o >= t.next.y && t.next.y !== t.y) {
      const p = t.x + (o - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (p <= s && p > i && (i = p, r = t.x < t.next.x ? t : t.next, p === s))
        return r;
    }
    t = t.next;
  } while (t !== e);
  if (!r)
    return null;
  const a = r, c = r.x, f = r.y;
  let h = 1 / 0, d;
  t = r;
  do
    s >= t.x && t.x >= c && s !== t.x && lu(o < f ? s : i, o, c, f, o < f ? i : s, o, t.x, t.y) && (d = Math.abs(o - t.y) / (s - t.x), Vf(t, n) && (d < h || d === h && (t.x > r.x || t.x === r.x && Sz(r, t))) && (r = t, h = d)), t = t.next;
  while (t !== a);
  return r;
}
function Sz(n, e) {
  return _n(n.prev, n, e.prev) < 0 && _n(e.next, n, n.next) < 0;
}
function Mz(n, e, t, i) {
  let r = n;
  do
    r.z === 0 && (r.z = k_(r.x, r.y, e, t, i)), r.prevZ = r.prev, r.nextZ = r.next, r = r.next;
  while (r !== n);
  r.prevZ.nextZ = null, r.prevZ = null, wz(r);
}
function wz(n) {
  let e, t, i, r, s, o, a, c, f = 1;
  do {
    for (t = n, n = null, s = null, o = 0; t; ) {
      for (o++, i = t, a = 0, e = 0; e < f && (a++, i = i.nextZ, !!i); e++)
        ;
      for (c = f; a > 0 || c > 0 && i; )
        a !== 0 && (c === 0 || !i || t.z <= i.z) ? (r = t, t = t.nextZ, a--) : (r = i, i = i.nextZ, c--), s ? s.nextZ = r : n = r, r.prevZ = s, s = r;
      t = i;
    }
    s.nextZ = null, f *= 2;
  } while (o > 1);
  return n;
}
function k_(n, e, t, i, r) {
  return n = (n - t) * r | 0, e = (e - i) * r | 0, n = (n | n << 8) & 16711935, n = (n | n << 4) & 252645135, n = (n | n << 2) & 858993459, n = (n | n << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, n | e << 1;
}
function Ez(n) {
  let e = n, t = n;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== n);
  return t;
}
function lu(n, e, t, i, r, s, o, a) {
  return (r - o) * (e - a) >= (n - o) * (s - a) && (n - o) * (i - a) >= (t - o) * (e - a) && (t - o) * (s - a) >= (r - o) * (i - a);
}
function Tz(n, e) {
  return n.next.i !== e.i && n.prev.i !== e.i && !Az(n, e) && // dones't intersect other edges
  (Vf(n, e) && Vf(e, n) && Cz(n, e) && // locally visible
  (_n(n.prev, n, e.prev) || _n(n, e.prev, e)) || // does not create opposite-facing sectors
  Vg(n, e) && _n(n.prev, n, n.next) > 0 && _n(e.prev, e, e.next) > 0);
}
function _n(n, e, t) {
  return (e.y - n.y) * (t.x - e.x) - (e.x - n.x) * (t.y - e.y);
}
function Vg(n, e) {
  return n.x === e.x && n.y === e.y;
}
function sb(n, e, t, i) {
  const r = mp(_n(n, e, t)), s = mp(_n(n, e, i)), o = mp(_n(t, i, n)), a = mp(_n(t, i, e));
  return !!(r !== s && o !== a || r === 0 && pp(n, t, e) || s === 0 && pp(n, i, e) || o === 0 && pp(t, n, i) || a === 0 && pp(t, e, i));
}
function pp(n, e, t) {
  return e.x <= Math.max(n.x, t.x) && e.x >= Math.min(n.x, t.x) && e.y <= Math.max(n.y, t.y) && e.y >= Math.min(n.y, t.y);
}
function mp(n) {
  return n > 0 ? 1 : n < 0 ? -1 : 0;
}
function Az(n, e) {
  let t = n;
  do {
    if (t.i !== n.i && t.next.i !== n.i && t.i !== e.i && t.next.i !== e.i && sb(t, t.next, n, e))
      return !0;
    t = t.next;
  } while (t !== n);
  return !1;
}
function Vf(n, e) {
  return _n(n.prev, n, n.next) < 0 ? _n(n, e, n.next) >= 0 && _n(n, n.prev, e) >= 0 : _n(n, e, n.prev) < 0 || _n(n, n.next, e) < 0;
}
function Cz(n, e) {
  let t = n, i = !1;
  const r = (n.x + e.x) / 2, s = (n.y + e.y) / 2;
  do
    t.y > s != t.next.y > s && t.next.y !== t.y && r < (t.next.x - t.x) * (s - t.y) / (t.next.y - t.y) + t.x && (i = !i), t = t.next;
  while (t !== n);
  return i;
}
function ob(n, e) {
  const t = new z_(n.i, n.x, n.y), i = new z_(e.i, e.x, e.y), r = n.next, s = e.prev;
  return n.next = e, e.prev = n, t.next = r, r.prev = t, i.next = t, t.prev = i, s.next = i, i.prev = s, i;
}
function VE(n, e, t, i) {
  const r = new z_(n, e, t);
  return i ? (r.next = i.next, r.prev = i, i.next.prev = r, i.next = r) : (r.prev = r, r.next = r), r;
}
function Gf(n) {
  n.next.prev = n.prev, n.prev.next = n.next, n.prevZ && (n.prevZ.nextZ = n.nextZ), n.nextZ && (n.nextZ.prevZ = n.prevZ);
}
function z_(n, e, t) {
  this.i = n, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function Rz(n, e, t, i) {
  let r = 0;
  for (let s = e, o = t - i; s < t; s += i)
    r += (n[o] - n[s]) * (n[s + 1] + n[o + 1]), o = s;
  return r;
}
class gs {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let i = 0;
    for (let r = t - 1, s = 0; s < t; r = s++)
      i += e[r].x * e[s].y - e[s].x * e[r].y;
    return i * 0.5;
  }
  static isClockWise(e) {
    return gs.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const i = [], r = [], s = [];
    GE(e), WE(i, e);
    let o = e.length;
    t.forEach(GE);
    for (let c = 0; c < t.length; c++)
      r.push(o), o += t[c].length, WE(i, t[c]);
    const a = hz.triangulate(i, r);
    for (let c = 0; c < a.length; c += 3)
      s.push(a.slice(c, c + 3));
    return s;
  }
}
function GE(n) {
  const e = n.length;
  e > 2 && n[e - 1].equals(n[0]) && n.pop();
}
function WE(n, e) {
  for (let t = 0; t < e.length; t++)
    n.push(e[t].x), n.push(e[t].y);
}
class Gg extends Dt {
  constructor(e = new Ha([new _e(0.5, 0.5), new _e(-0.5, 0.5), new _e(-0.5, -0.5), new _e(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const i = this, r = [], s = [];
    for (let a = 0, c = e.length; a < c; a++) {
      const f = e[a];
      o(f);
    }
    this.setAttribute("position", new rt(r, 3)), this.setAttribute("uv", new rt(s, 2)), this.computeVertexNormals();
    function o(a) {
      const c = [], f = t.curveSegments !== void 0 ? t.curveSegments : 12, h = t.steps !== void 0 ? t.steps : 1, d = t.depth !== void 0 ? t.depth : 1;
      let p = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, v = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, y = t.bevelSize !== void 0 ? t.bevelSize : v - 0.1, w = t.bevelOffset !== void 0 ? t.bevelOffset : 0, x = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const g = t.extrudePath, S = t.UVGenerator !== void 0 ? t.UVGenerator : bz;
      let M, T = !1, U, P, D, R;
      g && (M = g.getSpacedPoints(h), T = !0, p = !1, U = g.computeFrenetFrames(h, !1), P = new B(), D = new B(), R = new B()), p || (x = 0, v = 0, y = 0, w = 0);
      const C = a.extractPoints(f);
      let A = C.shape;
      const N = C.holes;
      if (!gs.isClockWise(A)) {
        A = A.reverse();
        for (let H = 0, Ie = N.length; H < Ie; H++) {
          const Le = N[H];
          gs.isClockWise(Le) && (N[H] = Le.reverse());
        }
      }
      const W = gs.triangulateShape(A, N), j = A;
      for (let H = 0, Ie = N.length; H < Ie; H++) {
        const Le = N[H];
        A = A.concat(Le);
      }
      function Q(H, Ie, Le) {
        return Ie || console.error("THREE.ExtrudeGeometry: vec does not exist"), H.clone().addScaledVector(Ie, Le);
      }
      const J = A.length, oe = W.length;
      function z(H, Ie, Le) {
        let Ge, Me, at;
        const We = H.x - Ie.x, et = H.y - Ie.y, q = Le.x - H.x, O = Le.y - H.y, ue = We * We + et * et, Te = We * O - et * q;
        if (Math.abs(Te) > Number.EPSILON) {
          const Ae = Math.sqrt(ue), Ce = Math.sqrt(q * q + O * O), ot = Ie.x - et / Ae, Ve = Ie.y + We / Ae, Je = Le.x - O / Ce, _t = Le.y + q / Ce, Ue = ((Je - ot) * O - (_t - Ve) * q) / (We * O - et * q);
          Ge = ot + We * Ue - H.x, Me = Ve + et * Ue - H.y;
          const Ze = Ge * Ge + Me * Me;
          if (Ze <= 2)
            return new _e(Ge, Me);
          at = Math.sqrt(Ze / 2);
        } else {
          let Ae = !1;
          We > Number.EPSILON ? q > Number.EPSILON && (Ae = !0) : We < -Number.EPSILON ? q < -Number.EPSILON && (Ae = !0) : Math.sign(et) === Math.sign(O) && (Ae = !0), Ae ? (Ge = -et, Me = We, at = Math.sqrt(ue)) : (Ge = We, Me = et, at = Math.sqrt(ue / 2));
        }
        return new _e(Ge / at, Me / at);
      }
      const te = [];
      for (let H = 0, Ie = j.length, Le = Ie - 1, Ge = H + 1; H < Ie; H++, Le++, Ge++)
        Le === Ie && (Le = 0), Ge === Ie && (Ge = 0), te[H] = z(j[H], j[Le], j[Ge]);
      const ne = [];
      let he, Se = te.concat();
      for (let H = 0, Ie = N.length; H < Ie; H++) {
        const Le = N[H];
        he = [];
        for (let Ge = 0, Me = Le.length, at = Me - 1, We = Ge + 1; Ge < Me; Ge++, at++, We++)
          at === Me && (at = 0), We === Me && (We = 0), he[Ge] = z(Le[Ge], Le[at], Le[We]);
        ne.push(he), Se = Se.concat(he);
      }
      for (let H = 0; H < x; H++) {
        const Ie = H / x, Le = v * Math.cos(Ie * Math.PI / 2), Ge = y * Math.sin(Ie * Math.PI / 2) + w;
        for (let Me = 0, at = j.length; Me < at; Me++) {
          const We = Q(j[Me], te[Me], Ge);
          De(We.x, We.y, -Le);
        }
        for (let Me = 0, at = N.length; Me < at; Me++) {
          const We = N[Me];
          he = ne[Me];
          for (let et = 0, q = We.length; et < q; et++) {
            const O = Q(We[et], he[et], Ge);
            De(O.x, O.y, -Le);
          }
        }
      }
      const ke = y + w;
      for (let H = 0; H < J; H++) {
        const Ie = p ? Q(A[H], Se[H], ke) : A[H];
        T ? (D.copy(U.normals[0]).multiplyScalar(Ie.x), P.copy(U.binormals[0]).multiplyScalar(Ie.y), R.copy(M[0]).add(D).add(P), De(R.x, R.y, R.z)) : De(Ie.x, Ie.y, 0);
      }
      for (let H = 1; H <= h; H++)
        for (let Ie = 0; Ie < J; Ie++) {
          const Le = p ? Q(A[Ie], Se[Ie], ke) : A[Ie];
          T ? (D.copy(U.normals[H]).multiplyScalar(Le.x), P.copy(U.binormals[H]).multiplyScalar(Le.y), R.copy(M[H]).add(D).add(P), De(R.x, R.y, R.z)) : De(Le.x, Le.y, d / h * H);
        }
      for (let H = x - 1; H >= 0; H--) {
        const Ie = H / x, Le = v * Math.cos(Ie * Math.PI / 2), Ge = y * Math.sin(Ie * Math.PI / 2) + w;
        for (let Me = 0, at = j.length; Me < at; Me++) {
          const We = Q(j[Me], te[Me], Ge);
          De(We.x, We.y, d + Le);
        }
        for (let Me = 0, at = N.length; Me < at; Me++) {
          const We = N[Me];
          he = ne[Me];
          for (let et = 0, q = We.length; et < q; et++) {
            const O = Q(We[et], he[et], Ge);
            T ? De(O.x, O.y + M[h - 1].y, M[h - 1].x + Le) : De(O.x, O.y, d + Le);
          }
        }
      }
      ce(), we();
      function ce() {
        const H = r.length / 3;
        if (p) {
          let Ie = 0, Le = J * Ie;
          for (let Ge = 0; Ge < oe; Ge++) {
            const Me = W[Ge];
            st(Me[2] + Le, Me[1] + Le, Me[0] + Le);
          }
          Ie = h + x * 2, Le = J * Ie;
          for (let Ge = 0; Ge < oe; Ge++) {
            const Me = W[Ge];
            st(Me[0] + Le, Me[1] + Le, Me[2] + Le);
          }
        } else {
          for (let Ie = 0; Ie < oe; Ie++) {
            const Le = W[Ie];
            st(Le[2], Le[1], Le[0]);
          }
          for (let Ie = 0; Ie < oe; Ie++) {
            const Le = W[Ie];
            st(Le[0] + J * h, Le[1] + J * h, Le[2] + J * h);
          }
        }
        i.addGroup(H, r.length / 3 - H, 0);
      }
      function we() {
        const H = r.length / 3;
        let Ie = 0;
        Ee(j, Ie), Ie += j.length;
        for (let Le = 0, Ge = N.length; Le < Ge; Le++) {
          const Me = N[Le];
          Ee(Me, Ie), Ie += Me.length;
        }
        i.addGroup(H, r.length / 3 - H, 1);
      }
      function Ee(H, Ie) {
        let Le = H.length;
        for (; --Le >= 0; ) {
          const Ge = Le;
          let Me = Le - 1;
          Me < 0 && (Me = H.length - 1);
          for (let at = 0, We = h + x * 2; at < We; at++) {
            const et = J * at, q = J * (at + 1), O = Ie + Ge + et, ue = Ie + Me + et, Te = Ie + Me + q, Ae = Ie + Ge + q;
            Mt(O, ue, Te, Ae);
          }
        }
      }
      function De(H, Ie, Le) {
        c.push(H), c.push(Ie), c.push(Le);
      }
      function st(H, Ie, Le) {
        dt(H), dt(Ie), dt(Le);
        const Ge = r.length / 3, Me = S.generateTopUV(i, r, Ge - 3, Ge - 2, Ge - 1);
        xt(Me[0]), xt(Me[1]), xt(Me[2]);
      }
      function Mt(H, Ie, Le, Ge) {
        dt(H), dt(Ie), dt(Ge), dt(Ie), dt(Le), dt(Ge);
        const Me = r.length / 3, at = S.generateSideWallUV(i, r, Me - 6, Me - 3, Me - 2, Me - 1);
        xt(at[0]), xt(at[1]), xt(at[3]), xt(at[1]), xt(at[2]), xt(at[3]);
      }
      function dt(H) {
        r.push(c[H * 3 + 0]), r.push(c[H * 3 + 1]), r.push(c[H * 3 + 2]);
      }
      function xt(H) {
        s.push(H.x), s.push(H.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, i = this.parameters.options;
    return Pz(t, i, e);
  }
  static fromJSON(e, t) {
    const i = [];
    for (let s = 0, o = e.shapes.length; s < o; s++) {
      const a = t[e.shapes[s]];
      i.push(a);
    }
    const r = e.options.extrudePath;
    return r !== void 0 && (e.options.extrudePath = new eg[r.type]().fromJSON(r)), new Gg(i, e.options);
  }
}
const bz = {
  generateTopUV: function(n, e, t, i, r) {
    const s = e[t * 3], o = e[t * 3 + 1], a = e[i * 3], c = e[i * 3 + 1], f = e[r * 3], h = e[r * 3 + 1];
    return [
      new _e(s, o),
      new _e(a, c),
      new _e(f, h)
    ];
  },
  generateSideWallUV: function(n, e, t, i, r, s) {
    const o = e[t * 3], a = e[t * 3 + 1], c = e[t * 3 + 2], f = e[i * 3], h = e[i * 3 + 1], d = e[i * 3 + 2], p = e[r * 3], v = e[r * 3 + 1], y = e[r * 3 + 2], w = e[s * 3], x = e[s * 3 + 1], g = e[s * 3 + 2];
    return Math.abs(a - h) < Math.abs(o - f) ? [
      new _e(o, 1 - c),
      new _e(f, 1 - d),
      new _e(p, 1 - y),
      new _e(w, 1 - g)
    ] : [
      new _e(a, 1 - c),
      new _e(h, 1 - d),
      new _e(v, 1 - y),
      new _e(x, 1 - g)
    ];
  }
};
function Pz(n, e, t) {
  if (t.shapes = [], Array.isArray(n))
    for (let i = 0, r = n.length; i < r; i++) {
      const s = n[i];
      t.shapes.push(s.uuid);
    }
  else
    t.shapes.push(n.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class dh extends Yo {
  constructor(e = 1, t = 0) {
    const i = (1 + Math.sqrt(5)) / 2, r = [
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      0,
      0,
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      i,
      0,
      -1,
      i,
      0,
      1,
      -i,
      0,
      -1,
      -i,
      0,
      1
    ], s = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(r, s, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new dh(e.radius, e.detail);
  }
}
class ph extends Yo {
  constructor(e = 1, t = 0) {
    const i = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], r = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(i, r, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new ph(e.radius, e.detail);
  }
}
class Wg extends Dt {
  constructor(e = 0.5, t = 1, i = 32, r = 1, s = 0, o = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: i,
      phiSegments: r,
      thetaStart: s,
      thetaLength: o
    }, i = Math.max(3, i), r = Math.max(1, r);
    const a = [], c = [], f = [], h = [];
    let d = e;
    const p = (t - e) / r, v = new B(), y = new _e();
    for (let w = 0; w <= r; w++) {
      for (let x = 0; x <= i; x++) {
        const g = s + x / i * o;
        v.x = d * Math.cos(g), v.y = d * Math.sin(g), c.push(v.x, v.y, v.z), f.push(0, 0, 1), y.x = (v.x / t + 1) / 2, y.y = (v.y / t + 1) / 2, h.push(y.x, y.y);
      }
      d += p;
    }
    for (let w = 0; w < r; w++) {
      const x = w * (i + 1);
      for (let g = 0; g < i; g++) {
        const S = g + x, M = S, T = S + i + 1, U = S + i + 2, P = S + 1;
        a.push(M, T, P), a.push(T, U, P);
      }
    }
    this.setIndex(a), this.setAttribute("position", new rt(c, 3)), this.setAttribute("normal", new rt(f, 3)), this.setAttribute("uv", new rt(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Wg(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class Xg extends Dt {
  constructor(e = new Ha([new _e(0, 0.5), new _e(-0.5, -0.5), new _e(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const i = [], r = [], s = [], o = [];
    let a = 0, c = 0;
    if (Array.isArray(e) === !1)
      f(e);
    else
      for (let h = 0; h < e.length; h++)
        f(e[h]), this.addGroup(a, c, h), a += c, c = 0;
    this.setIndex(i), this.setAttribute("position", new rt(r, 3)), this.setAttribute("normal", new rt(s, 3)), this.setAttribute("uv", new rt(o, 2));
    function f(h) {
      const d = r.length / 3, p = h.extractPoints(t);
      let v = p.shape;
      const y = p.holes;
      gs.isClockWise(v) === !1 && (v = v.reverse());
      for (let x = 0, g = y.length; x < g; x++) {
        const S = y[x];
        gs.isClockWise(S) === !0 && (y[x] = S.reverse());
      }
      const w = gs.triangulateShape(v, y);
      for (let x = 0, g = y.length; x < g; x++) {
        const S = y[x];
        v = v.concat(S);
      }
      for (let x = 0, g = v.length; x < g; x++) {
        const S = v[x];
        r.push(S.x, S.y, 0), s.push(0, 0, 1), o.push(S.x, S.y);
      }
      for (let x = 0, g = w.length; x < g; x++) {
        const S = w[x], M = S[0] + d, T = S[1] + d, U = S[2] + d;
        i.push(M, T, U), c += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return Iz(t, e);
  }
  static fromJSON(e, t) {
    const i = [];
    for (let r = 0, s = e.shapes.length; r < s; r++) {
      const o = t[e.shapes[r]];
      i.push(o);
    }
    return new Xg(i, e.curveSegments);
  }
}
function Iz(n, e) {
  if (e.shapes = [], Array.isArray(n))
    for (let t = 0, i = n.length; t < i; t++) {
      const r = n[t];
      e.shapes.push(r.uuid);
    }
  else
    e.shapes.push(n.uuid);
  return e;
}
class mh extends Dt {
  constructor(e = 1, t = 32, i = 16, r = 0, s = Math.PI * 2, o = 0, a = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: i,
      phiStart: r,
      phiLength: s,
      thetaStart: o,
      thetaLength: a
    }, t = Math.max(3, Math.floor(t)), i = Math.max(2, Math.floor(i));
    const c = Math.min(o + a, Math.PI);
    let f = 0;
    const h = [], d = new B(), p = new B(), v = [], y = [], w = [], x = [];
    for (let g = 0; g <= i; g++) {
      const S = [], M = g / i;
      let T = 0;
      g === 0 && o === 0 ? T = 0.5 / t : g === i && c === Math.PI && (T = -0.5 / t);
      for (let U = 0; U <= t; U++) {
        const P = U / t;
        d.x = -e * Math.cos(r + P * s) * Math.sin(o + M * a), d.y = e * Math.cos(o + M * a), d.z = e * Math.sin(r + P * s) * Math.sin(o + M * a), y.push(d.x, d.y, d.z), p.copy(d).normalize(), w.push(p.x, p.y, p.z), x.push(P + T, 1 - M), S.push(f++);
      }
      h.push(S);
    }
    for (let g = 0; g < i; g++)
      for (let S = 0; S < t; S++) {
        const M = h[g][S + 1], T = h[g][S], U = h[g + 1][S], P = h[g + 1][S + 1];
        (g !== 0 || o > 0) && v.push(M, T, P), (g !== i - 1 || c < Math.PI) && v.push(T, U, P);
      }
    this.setIndex(v), this.setAttribute("position", new rt(y, 3)), this.setAttribute("normal", new rt(w, 3)), this.setAttribute("uv", new rt(x, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new mh(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class Yg extends Yo {
  constructor(e = 1, t = 0) {
    const i = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], r = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(i, r, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Yg(e.radius, e.detail);
  }
}
class qg extends Dt {
  constructor(e = 1, t = 0.4, i = 12, r = 48, s = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: i,
      tubularSegments: r,
      arc: s
    }, i = Math.floor(i), r = Math.floor(r);
    const o = [], a = [], c = [], f = [], h = new B(), d = new B(), p = new B();
    for (let v = 0; v <= i; v++)
      for (let y = 0; y <= r; y++) {
        const w = y / r * s, x = v / i * Math.PI * 2;
        d.x = (e + t * Math.cos(x)) * Math.cos(w), d.y = (e + t * Math.cos(x)) * Math.sin(w), d.z = t * Math.sin(x), a.push(d.x, d.y, d.z), h.x = e * Math.cos(w), h.y = e * Math.sin(w), p.subVectors(d, h).normalize(), c.push(p.x, p.y, p.z), f.push(y / r), f.push(v / i);
      }
    for (let v = 1; v <= i; v++)
      for (let y = 1; y <= r; y++) {
        const w = (r + 1) * v + y - 1, x = (r + 1) * (v - 1) + y - 1, g = (r + 1) * (v - 1) + y, S = (r + 1) * v + y;
        o.push(w, x, S), o.push(x, g, S);
      }
    this.setIndex(o), this.setAttribute("position", new rt(a, 3)), this.setAttribute("normal", new rt(c, 3)), this.setAttribute("uv", new rt(f, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new qg(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class jg extends Dt {
  constructor(e = 1, t = 0.4, i = 64, r = 8, s = 2, o = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: i,
      radialSegments: r,
      p: s,
      q: o
    }, i = Math.floor(i), r = Math.floor(r);
    const a = [], c = [], f = [], h = [], d = new B(), p = new B(), v = new B(), y = new B(), w = new B(), x = new B(), g = new B();
    for (let M = 0; M <= i; ++M) {
      const T = M / i * s * Math.PI * 2;
      S(T, s, o, e, v), S(T + 0.01, s, o, e, y), x.subVectors(y, v), g.addVectors(y, v), w.crossVectors(x, g), g.crossVectors(w, x), w.normalize(), g.normalize();
      for (let U = 0; U <= r; ++U) {
        const P = U / r * Math.PI * 2, D = -t * Math.cos(P), R = t * Math.sin(P);
        d.x = v.x + (D * g.x + R * w.x), d.y = v.y + (D * g.y + R * w.y), d.z = v.z + (D * g.z + R * w.z), c.push(d.x, d.y, d.z), p.subVectors(d, v).normalize(), f.push(p.x, p.y, p.z), h.push(M / i), h.push(U / r);
      }
    }
    for (let M = 1; M <= i; M++)
      for (let T = 1; T <= r; T++) {
        const U = (r + 1) * (M - 1) + (T - 1), P = (r + 1) * M + (T - 1), D = (r + 1) * M + T, R = (r + 1) * (M - 1) + T;
        a.push(U, P, R), a.push(P, D, R);
      }
    this.setIndex(a), this.setAttribute("position", new rt(c, 3)), this.setAttribute("normal", new rt(f, 3)), this.setAttribute("uv", new rt(h, 2));
    function S(M, T, U, P, D) {
      const R = Math.cos(M), C = Math.sin(M), A = U / T * M, N = Math.cos(A);
      D.x = P * (2 + N) * 0.5 * R, D.y = P * (2 + N) * C * 0.5, D.z = P * Math.sin(A) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new jg(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class Zg extends Dt {
  constructor(e = new E1(new B(-1, -1, 0), new B(-1, 1, 0), new B(1, 1, 0)), t = 64, i = 1, r = 8, s = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: i,
      radialSegments: r,
      closed: s
    };
    const o = e.computeFrenetFrames(t, s);
    this.tangents = o.tangents, this.normals = o.normals, this.binormals = o.binormals;
    const a = new B(), c = new B(), f = new _e();
    let h = new B();
    const d = [], p = [], v = [], y = [];
    w(), this.setIndex(y), this.setAttribute("position", new rt(d, 3)), this.setAttribute("normal", new rt(p, 3)), this.setAttribute("uv", new rt(v, 2));
    function w() {
      for (let M = 0; M < t; M++)
        x(M);
      x(s === !1 ? t : 0), S(), g();
    }
    function x(M) {
      h = e.getPointAt(M / t, h);
      const T = o.normals[M], U = o.binormals[M];
      for (let P = 0; P <= r; P++) {
        const D = P / r * Math.PI * 2, R = Math.sin(D), C = -Math.cos(D);
        c.x = C * T.x + R * U.x, c.y = C * T.y + R * U.y, c.z = C * T.z + R * U.z, c.normalize(), p.push(c.x, c.y, c.z), a.x = h.x + i * c.x, a.y = h.y + i * c.y, a.z = h.z + i * c.z, d.push(a.x, a.y, a.z);
      }
    }
    function g() {
      for (let M = 1; M <= t; M++)
        for (let T = 1; T <= r; T++) {
          const U = (r + 1) * (M - 1) + (T - 1), P = (r + 1) * M + (T - 1), D = (r + 1) * M + T, R = (r + 1) * (M - 1) + T;
          y.push(U, P, R), y.push(P, D, R);
        }
    }
    function S() {
      for (let M = 0; M <= t; M++)
        for (let T = 0; T <= r; T++)
          f.x = M / t, f.y = T / r, v.push(f.x, f.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new Zg(
      new eg[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class ab extends Dt {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], i = /* @__PURE__ */ new Set(), r = new B(), s = new B();
      if (e.index !== null) {
        const o = e.attributes.position, a = e.index;
        let c = e.groups;
        c.length === 0 && (c = [{ start: 0, count: a.count, materialIndex: 0 }]);
        for (let f = 0, h = c.length; f < h; ++f) {
          const d = c[f], p = d.start, v = d.count;
          for (let y = p, w = p + v; y < w; y += 3)
            for (let x = 0; x < 3; x++) {
              const g = a.getX(y + x), S = a.getX(y + (x + 1) % 3);
              r.fromBufferAttribute(o, g), s.fromBufferAttribute(o, S), XE(r, s, i) === !0 && (t.push(r.x, r.y, r.z), t.push(s.x, s.y, s.z));
            }
        }
      } else {
        const o = e.attributes.position;
        for (let a = 0, c = o.count / 3; a < c; a++)
          for (let f = 0; f < 3; f++) {
            const h = 3 * a + f, d = 3 * a + (f + 1) % 3;
            r.fromBufferAttribute(o, h), s.fromBufferAttribute(o, d), XE(r, s, i) === !0 && (t.push(r.x, r.y, r.z), t.push(s.x, s.y, s.z));
          }
      }
      this.setAttribute("position", new rt(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function XE(n, e, t) {
  const i = `${n.x},${n.y},${n.z}-${e.x},${e.y},${e.z}`, r = `${e.x},${e.y},${e.z}-${n.x},${n.y},${n.z}`;
  return t.has(i) === !0 || t.has(r) === !0 ? !1 : (t.add(i), t.add(r), !0);
}
var YE = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: Wo,
  CapsuleGeometry: kg,
  CircleGeometry: zg,
  ConeGeometry: Bg,
  CylinderGeometry: Fu,
  DodecahedronGeometry: Hg,
  EdgesGeometry: ib,
  ExtrudeGeometry: Gg,
  IcosahedronGeometry: dh,
  LatheGeometry: hh,
  OctahedronGeometry: ph,
  PlaneGeometry: Xo,
  PolyhedronGeometry: Yo,
  RingGeometry: Wg,
  ShapeGeometry: Xg,
  SphereGeometry: mh,
  TetrahedronGeometry: Yg,
  TorusGeometry: qg,
  TorusKnotGeometry: jg,
  TubeGeometry: Zg,
  WireframeGeometry: ab
});
class lb extends si {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new Qe(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class ub extends qi {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class A1 extends si {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new Qe(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Qe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Go, this.normalScale = new _e(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new bi(), this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class cb extends A1 {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new _e(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return Cn(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Qe(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Qe(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Qe(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(e) {
    this._dispersion > 0 != e > 0 && this.version++, this._dispersion = e;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.dispersion = e.dispersion, this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class fb extends si {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new Qe(16777215), this.specular = new Qe(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Qe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Go, this.normalScale = new _e(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new bi(), this.combine = ih, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class hb extends si {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new Qe(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Qe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Go, this.normalScale = new _e(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class db extends si {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Go, this.normalScale = new _e(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class pb extends si {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Qe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Qe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Go, this.normalScale = new _e(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new bi(), this.combine = ih, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class mb extends si {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new Qe(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Go, this.normalScale = new _e(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class gb extends Li {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function Da(n, e, t) {
  return !n || // let 'undefined' and 'null' pass
  !t && n.constructor === e ? n : typeof e.BYTES_PER_ELEMENT == "number" ? new e(n) : Array.prototype.slice.call(n);
}
function vb(n) {
  return ArrayBuffer.isView(n) && !(n instanceof DataView);
}
function yb(n) {
  function e(r, s) {
    return n[r] - n[s];
  }
  const t = n.length, i = new Array(t);
  for (let r = 0; r !== t; ++r)
    i[r] = r;
  return i.sort(e), i;
}
function B_(n, e, t) {
  const i = n.length, r = new n.constructor(i);
  for (let s = 0, o = 0; o !== i; ++s) {
    const a = t[s] * e;
    for (let c = 0; c !== e; ++c)
      r[o++] = n[a + c];
  }
  return r;
}
function C1(n, e, t, i) {
  let r = 1, s = n[0];
  for (; s !== void 0 && s[i] === void 0; )
    s = n[r++];
  if (s === void 0)
    return;
  let o = s[i];
  if (o !== void 0)
    if (Array.isArray(o))
      do
        o = s[i], o !== void 0 && (e.push(s.time), t.push.apply(t, o)), s = n[r++];
      while (s !== void 0);
    else if (o.toArray !== void 0)
      do
        o = s[i], o !== void 0 && (e.push(s.time), o.toArray(t, t.length)), s = n[r++];
      while (s !== void 0);
    else
      do
        o = s[i], o !== void 0 && (e.push(s.time), t.push(o)), s = n[r++];
      while (s !== void 0);
}
function Lz(n, e, t, i, r = 30) {
  const s = n.clone();
  s.name = e;
  const o = [];
  for (let c = 0; c < s.tracks.length; ++c) {
    const f = s.tracks[c], h = f.getValueSize(), d = [], p = [];
    for (let v = 0; v < f.times.length; ++v) {
      const y = f.times[v] * r;
      if (!(y < t || y >= i)) {
        d.push(f.times[v]);
        for (let w = 0; w < h; ++w)
          p.push(f.values[v * h + w]);
      }
    }
    d.length !== 0 && (f.times = Da(d, f.times.constructor), f.values = Da(p, f.values.constructor), o.push(f));
  }
  s.tracks = o;
  let a = 1 / 0;
  for (let c = 0; c < s.tracks.length; ++c)
    a > s.tracks[c].times[0] && (a = s.tracks[c].times[0]);
  for (let c = 0; c < s.tracks.length; ++c)
    s.tracks[c].shift(-1 * a);
  return s.resetDuration(), s;
}
function Dz(n, e = 0, t = n, i = 30) {
  i <= 0 && (i = 30);
  const r = t.tracks.length, s = e / i;
  for (let o = 0; o < r; ++o) {
    const a = t.tracks[o], c = a.ValueTypeName;
    if (c === "bool" || c === "string")
      continue;
    const f = n.tracks.find(function(g) {
      return g.name === a.name && g.ValueTypeName === c;
    });
    if (f === void 0)
      continue;
    let h = 0;
    const d = a.getValueSize();
    a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (h = d / 3);
    let p = 0;
    const v = f.getValueSize();
    f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (p = v / 3);
    const y = a.times.length - 1;
    let w;
    if (s <= a.times[0]) {
      const g = h, S = d - h;
      w = a.values.slice(g, S);
    } else if (s >= a.times[y]) {
      const g = y * d + h, S = g + d - h;
      w = a.values.slice(g, S);
    } else {
      const g = a.createInterpolant(), S = h, M = d - h;
      g.evaluate(s), w = g.resultBuffer.slice(S, M);
    }
    c === "quaternion" && new Dn().fromArray(w).normalize().conjugate().toArray(w);
    const x = f.times.length;
    for (let g = 0; g < x; ++g) {
      const S = g * v + p;
      if (c === "quaternion")
        Dn.multiplyQuaternionsFlat(
          f.values,
          S,
          w,
          0,
          f.values,
          S
        );
      else {
        const M = v - p * 2;
        for (let T = 0; T < M; ++T)
          f.values[S + T] -= w[T];
      }
    }
  }
  return n.blendMode = r1, n;
}
const Nz = {
  convertArray: Da,
  isTypedArray: vb,
  getKeyframeOrder: yb,
  sortedArray: B_,
  flattenJSON: C1,
  subclip: Lz,
  makeClipAdditive: Dz
};
class gh {
  constructor(e, t, i, r) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = r !== void 0 ? r : new t.constructor(i), this.sampleValues = t, this.valueSize = i, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let i = this._cachedIndex, r = t[i], s = t[i - 1];
    e: {
      t: {
        let o;
        n: {
          i:
            if (!(e < r)) {
              for (let a = i + 2; ; ) {
                if (r === void 0) {
                  if (e < s)
                    break i;
                  return i = t.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
                }
                if (i === a)
                  break;
                if (s = r, r = t[++i], e < r)
                  break t;
              }
              o = t.length;
              break n;
            }
          if (!(e >= s)) {
            const a = t[1];
            e < a && (i = 2, s = a);
            for (let c = i - 2; ; ) {
              if (s === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (i === c)
                break;
              if (r = s, s = t[--i - 1], e >= s)
                break t;
            }
            o = i, i = 0;
            break n;
          }
          break e;
        }
        for (; i < o; ) {
          const a = i + o >>> 1;
          e < t[a] ? o = a : i = a + 1;
        }
        if (r = t[i], s = t[i - 1], s === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (r === void 0)
          return i = t.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
      }
      this._cachedIndex = i, this.intervalChanged_(i, s, r);
    }
    return this.interpolate_(i, s, e, r);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, i = this.sampleValues, r = this.valueSize, s = e * r;
    for (let o = 0; o !== r; ++o)
      t[o] = i[s + o];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class _b extends gh {
  constructor(e, t, i, r) {
    super(e, t, i, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: ba,
      endingEnd: ba
    };
  }
  intervalChanged_(e, t, i) {
    const r = this.parameterPositions;
    let s = e - 2, o = e + 1, a = r[s], c = r[o];
    if (a === void 0)
      switch (this.getSettings_().endingStart) {
        case Pa:
          s = e, a = 2 * t - i;
          break;
        case Df:
          s = r.length - 2, a = t + r[s] - r[s + 1];
          break;
        default:
          s = e, a = i;
      }
    if (c === void 0)
      switch (this.getSettings_().endingEnd) {
        case Pa:
          o = e, c = 2 * i - t;
          break;
        case Df:
          o = 1, c = i + r[1] - r[0];
          break;
        default:
          o = e - 1, c = t;
      }
    const f = (i - t) * 0.5, h = this.valueSize;
    this._weightPrev = f / (t - a), this._weightNext = f / (c - i), this._offsetPrev = s * h, this._offsetNext = o * h;
  }
  interpolate_(e, t, i, r) {
    const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, c = e * a, f = c - a, h = this._offsetPrev, d = this._offsetNext, p = this._weightPrev, v = this._weightNext, y = (i - t) / (r - t), w = y * y, x = w * y, g = -p * x + 2 * p * w - p * y, S = (1 + p) * x + (-1.5 - 2 * p) * w + (-0.5 + p) * y + 1, M = (-1 - v) * x + (1.5 + v) * w + 0.5 * y, T = v * x - v * w;
    for (let U = 0; U !== a; ++U)
      s[U] = g * o[h + U] + S * o[f + U] + M * o[c + U] + T * o[d + U];
    return s;
  }
}
class R1 extends gh {
  constructor(e, t, i, r) {
    super(e, t, i, r);
  }
  interpolate_(e, t, i, r) {
    const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, c = e * a, f = c - a, h = (i - t) / (r - t), d = 1 - h;
    for (let p = 0; p !== a; ++p)
      s[p] = o[f + p] * d + o[c + p] * h;
    return s;
  }
}
class xb extends gh {
  constructor(e, t, i, r) {
    super(e, t, i, r);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class Kr {
  constructor(e, t, i, r) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = Da(t, this.TimeBufferType), this.values = Da(i, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let i;
    if (t.toJSON !== this.toJSON)
      i = t.toJSON(e);
    else {
      i = {
        name: e.name,
        times: Da(e.times, Array),
        values: Da(e.values, Array)
      };
      const r = e.getInterpolation();
      r !== e.DefaultInterpolation && (i.interpolation = r);
    }
    return i.type = e.ValueTypeName, i;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new xb(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new R1(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new _b(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case Lf:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case Jm:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case qp:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(i);
      return console.warn("THREE.KeyframeTrack:", i), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return Lf;
      case this.InterpolantFactoryMethodLinear:
        return Jm;
      case this.InterpolantFactoryMethodSmooth:
        return qp;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let i = 0, r = t.length; i !== r; ++i)
        t[i] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let i = 0, r = t.length; i !== r; ++i)
        t[i] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const i = this.times, r = i.length;
    let s = 0, o = r - 1;
    for (; s !== r && i[s] < e; )
      ++s;
    for (; o !== -1 && i[o] > t; )
      --o;
    if (++o, s !== 0 || o !== r) {
      s >= o && (o = Math.max(o, 1), s = o - 1);
      const a = this.getValueSize();
      this.times = i.slice(s, o), this.values = this.values.slice(s * a, o * a);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const i = this.times, r = this.values, s = i.length;
    s === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let o = null;
    for (let a = 0; a !== s; a++) {
      const c = i[a];
      if (typeof c == "number" && isNaN(c)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, c), e = !1;
        break;
      }
      if (o !== null && o > c) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, a, c, o), e = !1;
        break;
      }
      o = c;
    }
    if (r !== void 0 && vb(r))
      for (let a = 0, c = r.length; a !== c; ++a) {
        const f = r[a];
        if (isNaN(f)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, f), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = this.times.slice(), t = this.values.slice(), i = this.getValueSize(), r = this.getInterpolation() === qp, s = e.length - 1;
    let o = 1;
    for (let a = 1; a < s; ++a) {
      let c = !1;
      const f = e[a], h = e[a + 1];
      if (f !== h && (a !== 1 || f !== e[0]))
        if (r)
          c = !0;
        else {
          const d = a * i, p = d - i, v = d + i;
          for (let y = 0; y !== i; ++y) {
            const w = t[d + y];
            if (w !== t[p + y] || w !== t[v + y]) {
              c = !0;
              break;
            }
          }
        }
      if (c) {
        if (a !== o) {
          e[o] = e[a];
          const d = a * i, p = o * i;
          for (let v = 0; v !== i; ++v)
            t[p + v] = t[d + v];
        }
        ++o;
      }
    }
    if (s > 0) {
      e[o] = e[s];
      for (let a = s * i, c = o * i, f = 0; f !== i; ++f)
        t[c + f] = t[a + f];
      ++o;
    }
    return o !== e.length ? (this.times = e.slice(0, o), this.values = t.slice(0, o * i)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = this.times.slice(), t = this.values.slice(), i = this.constructor, r = new i(this.name, e, t);
    return r.createInterpolant = this.createInterpolant, r;
  }
}
Kr.prototype.TimeBufferType = Float32Array;
Kr.prototype.ValueBufferType = Float32Array;
Kr.prototype.DefaultInterpolation = Jm;
class tl extends Kr {
  // No interpolation parameter because only InterpolateDiscrete is valid.
  constructor(e, t, i) {
    super(e, t, i);
  }
}
tl.prototype.ValueTypeName = "bool";
tl.prototype.ValueBufferType = Array;
tl.prototype.DefaultInterpolation = Lf;
tl.prototype.InterpolantFactoryMethodLinear = void 0;
tl.prototype.InterpolantFactoryMethodSmooth = void 0;
class b1 extends Kr {
}
b1.prototype.ValueTypeName = "color";
class Wf extends Kr {
}
Wf.prototype.ValueTypeName = "number";
class Sb extends gh {
  constructor(e, t, i, r) {
    super(e, t, i, r);
  }
  interpolate_(e, t, i, r) {
    const s = this.resultBuffer, o = this.sampleValues, a = this.valueSize, c = (i - t) / (r - t);
    let f = e * a;
    for (let h = f + a; f !== h; f += 4)
      Dn.slerpFlat(s, 0, o, f - a, o, f, c);
    return s;
  }
}
class vh extends Kr {
  InterpolantFactoryMethodLinear(e) {
    return new Sb(this.times, this.values, this.getValueSize(), e);
  }
}
vh.prototype.ValueTypeName = "quaternion";
vh.prototype.InterpolantFactoryMethodSmooth = void 0;
class nl extends Kr {
  // No interpolation parameter because only InterpolateDiscrete is valid.
  constructor(e, t, i) {
    super(e, t, i);
  }
}
nl.prototype.ValueTypeName = "string";
nl.prototype.ValueBufferType = Array;
nl.prototype.DefaultInterpolation = Lf;
nl.prototype.InterpolantFactoryMethodLinear = void 0;
nl.prototype.InterpolantFactoryMethodSmooth = void 0;
class Xf extends Kr {
}
Xf.prototype.ValueTypeName = "vector";
class Yf {
  constructor(e = "", t = -1, i = [], r = Cg) {
    this.name = e, this.tracks = i, this.duration = t, this.blendMode = r, this.uuid = rr(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], i = e.tracks, r = 1 / (e.fps || 1);
    for (let o = 0, a = i.length; o !== a; ++o)
      t.push(Oz(i[o]).scale(r));
    const s = new this(e.name, e.duration, t, e.blendMode);
    return s.uuid = e.uuid, s;
  }
  static toJSON(e) {
    const t = [], i = e.tracks, r = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let s = 0, o = i.length; s !== o; ++s)
      t.push(Kr.toJSON(i[s]));
    return r;
  }
  static CreateFromMorphTargetSequence(e, t, i, r) {
    const s = t.length, o = [];
    for (let a = 0; a < s; a++) {
      let c = [], f = [];
      c.push(
        (a + s - 1) % s,
        a,
        (a + 1) % s
      ), f.push(0, 1, 0);
      const h = yb(c);
      c = B_(c, 1, h), f = B_(f, 1, h), !r && c[0] === 0 && (c.push(s), f.push(f[0])), o.push(
        new Wf(
          ".morphTargetInfluences[" + t[a].name + "]",
          c,
          f
        ).scale(1 / i)
      );
    }
    return new this(e, -1, o);
  }
  static findByName(e, t) {
    let i = e;
    if (!Array.isArray(e)) {
      const r = e;
      i = r.geometry && r.geometry.animations || r.animations;
    }
    for (let r = 0; r < i.length; r++)
      if (i[r].name === t)
        return i[r];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, i) {
    const r = {}, s = /^([\w-]*?)([\d]+)$/;
    for (let a = 0, c = e.length; a < c; a++) {
      const f = e[a], h = f.name.match(s);
      if (h && h.length > 1) {
        const d = h[1];
        let p = r[d];
        p || (r[d] = p = []), p.push(f);
      }
    }
    const o = [];
    for (const a in r)
      o.push(this.CreateFromMorphTargetSequence(a, r[a], t, i));
    return o;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const i = function(d, p, v, y, w) {
      if (v.length !== 0) {
        const x = [], g = [];
        C1(v, x, g, y), x.length !== 0 && w.push(new d(p, x, g));
      }
    }, r = [], s = e.name || "default", o = e.fps || 30, a = e.blendMode;
    let c = e.length || -1;
    const f = e.hierarchy || [];
    for (let d = 0; d < f.length; d++) {
      const p = f[d].keys;
      if (!(!p || p.length === 0))
        if (p[0].morphTargets) {
          const v = {};
          let y;
          for (y = 0; y < p.length; y++)
            if (p[y].morphTargets)
              for (let w = 0; w < p[y].morphTargets.length; w++)
                v[p[y].morphTargets[w]] = -1;
          for (const w in v) {
            const x = [], g = [];
            for (let S = 0; S !== p[y].morphTargets.length; ++S) {
              const M = p[y];
              x.push(M.time), g.push(M.morphTarget === w ? 1 : 0);
            }
            r.push(new Wf(".morphTargetInfluence[" + w + "]", x, g));
          }
          c = v.length * o;
        } else {
          const v = ".bones[" + t[d].name + "]";
          i(
            Xf,
            v + ".position",
            p,
            "pos",
            r
          ), i(
            vh,
            v + ".quaternion",
            p,
            "rot",
            r
          ), i(
            Xf,
            v + ".scale",
            p,
            "scl",
            r
          );
        }
    }
    return r.length === 0 ? null : new this(s, c, r, a);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let i = 0, r = e.length; i !== r; ++i) {
      const s = this.tracks[i];
      t = Math.max(t, s.times[s.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function Uz(n) {
  switch (n.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Wf;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Xf;
    case "color":
      return b1;
    case "quaternion":
      return vh;
    case "bool":
    case "boolean":
      return tl;
    case "string":
      return nl;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + n);
}
function Oz(n) {
  if (n.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = Uz(n.type);
  if (n.times === void 0) {
    const t = [], i = [];
    C1(n.keys, t, i, "value"), n.times = t, n.values = i;
  }
  return e.parse !== void 0 ? e.parse(n) : new e(n.name, n.times, n.values, n.interpolation);
}
const Vs = {
  enabled: !1,
  files: {},
  add: function(n, e) {
    this.enabled !== !1 && (this.files[n] = e);
  },
  get: function(n) {
    if (this.enabled !== !1)
      return this.files[n];
  },
  remove: function(n) {
    delete this.files[n];
  },
  clear: function() {
    this.files = {};
  }
};
class Kg {
  constructor(e, t, i) {
    const r = this;
    let s = !1, o = 0, a = 0, c;
    const f = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = i, this.itemStart = function(h) {
      a++, s === !1 && r.onStart !== void 0 && r.onStart(h, o, a), s = !0;
    }, this.itemEnd = function(h) {
      o++, r.onProgress !== void 0 && r.onProgress(h, o, a), o === a && (s = !1, r.onLoad !== void 0 && r.onLoad());
    }, this.itemError = function(h) {
      r.onError !== void 0 && r.onError(h);
    }, this.resolveURL = function(h) {
      return c ? c(h) : h;
    }, this.setURLModifier = function(h) {
      return c = h, this;
    }, this.addHandler = function(h, d) {
      return f.push(h, d), this;
    }, this.removeHandler = function(h) {
      const d = f.indexOf(h);
      return d !== -1 && f.splice(d, 2), this;
    }, this.getHandler = function(h) {
      for (let d = 0, p = f.length; d < p; d += 2) {
        const v = f[d], y = f[d + 1];
        if (v.global && (v.lastIndex = 0), v.test(h))
          return y;
      }
      return null;
    };
  }
}
const uu = /* @__PURE__ */ new Kg();
let Di = class {
  constructor(e) {
    this.manager = e !== void 0 ? e : uu, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const i = this;
    return new Promise(function(r, s) {
      i.load(e, r, t, s);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
};
Di.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const Ls = {};
class Fz extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class sr extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = Vs.get(e);
    if (s !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(s), this.manager.itemEnd(e);
      }, 0), s;
    if (Ls[e] !== void 0) {
      Ls[e].push({
        onLoad: t,
        onProgress: i,
        onError: r
      });
      return;
    }
    Ls[e] = [], Ls[e].push({
      onLoad: t,
      onProgress: i,
      onError: r
    });
    const o = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), a = this.mimeType, c = this.responseType;
    fetch(o).then((f) => {
      if (f.status === 200 || f.status === 0) {
        if (f.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || f.body === void 0 || f.body.getReader === void 0)
          return f;
        const h = Ls[e], d = f.body.getReader(), p = f.headers.get("X-File-Size") || f.headers.get("Content-Length"), v = p ? parseInt(p) : 0, y = v !== 0;
        let w = 0;
        const x = new ReadableStream({
          start(g) {
            S();
            function S() {
              d.read().then(({ done: M, value: T }) => {
                if (M)
                  g.close();
                else {
                  w += T.byteLength;
                  const U = new ProgressEvent("progress", { lengthComputable: y, loaded: w, total: v });
                  for (let P = 0, D = h.length; P < D; P++) {
                    const R = h[P];
                    R.onProgress && R.onProgress(U);
                  }
                  g.enqueue(T), S();
                }
              }, (M) => {
                g.error(M);
              });
            }
          }
        });
        return new Response(x);
      } else
        throw new Fz(`fetch for "${f.url}" responded with ${f.status}: ${f.statusText}`, f);
    }).then((f) => {
      switch (c) {
        case "arraybuffer":
          return f.arrayBuffer();
        case "blob":
          return f.blob();
        case "document":
          return f.text().then((h) => new DOMParser().parseFromString(h, a));
        case "json":
          return f.json();
        default:
          if (a === void 0)
            return f.text();
          {
            const d = /charset="?([^;"\s]*)"?/i.exec(a), p = d && d[1] ? d[1].toLowerCase() : void 0, v = new TextDecoder(p);
            return f.arrayBuffer().then((y) => v.decode(y));
          }
      }
    }).then((f) => {
      Vs.add(e, f);
      const h = Ls[e];
      delete Ls[e];
      for (let d = 0, p = h.length; d < p; d++) {
        const v = h[d];
        v.onLoad && v.onLoad(f);
      }
    }).catch((f) => {
      const h = Ls[e];
      if (h === void 0)
        throw this.manager.itemError(e), f;
      delete Ls[e];
      for (let d = 0, p = h.length; d < p; d++) {
        const v = h[d];
        v.onError && v.onError(f);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class kz extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = this, o = new sr(this.manager);
    o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(a) {
      try {
        t(s.parse(JSON.parse(a)));
      } catch (c) {
        r ? r(c) : console.error(c), s.manager.itemError(e);
      }
    }, i, r);
  }
  parse(e) {
    const t = [];
    for (let i = 0; i < e.length; i++) {
      const r = Yf.parse(e[i]);
      t.push(r);
    }
    return t;
  }
}
class zz extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = this, o = [], a = new Og(), c = new sr(this.manager);
    c.setPath(this.path), c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setWithCredentials(s.withCredentials);
    let f = 0;
    function h(d) {
      c.load(e[d], function(p) {
        const v = s.parse(p, !0);
        o[d] = {
          width: v.width,
          height: v.height,
          format: v.format,
          mipmaps: v.mipmaps
        }, f += 1, f === 6 && (v.mipmapCount === 1 && (a.minFilter = $t), a.image = o, a.format = v.format, a.needsUpdate = !0, t && t(a));
      }, i, r);
    }
    if (Array.isArray(e))
      for (let d = 0, p = e.length; d < p; ++d)
        h(d);
    else
      c.load(e, function(d) {
        const p = s.parse(d, !0);
        if (p.isCubemap) {
          const v = p.mipmaps.length / p.mipmapCount;
          for (let y = 0; y < v; y++) {
            o[y] = { mipmaps: [] };
            for (let w = 0; w < p.mipmapCount; w++)
              o[y].mipmaps.push(p.mipmaps[y * p.mipmapCount + w]), o[y].format = p.format, o[y].width = p.width, o[y].height = p.height;
          }
          a.image = o;
        } else
          a.image.width = p.width, a.image.height = p.height, a.mipmaps = p.mipmaps;
        p.mipmapCount === 1 && (a.minFilter = $t), a.format = p.format, a.needsUpdate = !0, t && t(a);
      }, i, r);
    return a;
  }
}
class qf extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = this, o = Vs.get(e);
    if (o !== void 0)
      return s.manager.itemStart(e), setTimeout(function() {
        t && t(o), s.manager.itemEnd(e);
      }, 0), o;
    const a = zf("img");
    function c() {
      h(), Vs.add(e, this), t && t(this), s.manager.itemEnd(e);
    }
    function f(d) {
      h(), r && r(d), s.manager.itemError(e), s.manager.itemEnd(e);
    }
    function h() {
      a.removeEventListener("load", c, !1), a.removeEventListener("error", f, !1);
    }
    return a.addEventListener("load", c, !1), a.addEventListener("error", f, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (a.crossOrigin = this.crossOrigin), s.manager.itemStart(e), a.src = e, a;
  }
}
class Mb extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = new uh();
    s.colorSpace = Bi;
    const o = new qf(this.manager);
    o.setCrossOrigin(this.crossOrigin), o.setPath(this.path);
    let a = 0;
    function c(f) {
      o.load(e[f], function(h) {
        s.images[f] = h, a++, a === 6 && (s.needsUpdate = !0, t && t(s));
      }, void 0, r);
    }
    for (let f = 0; f < e.length; ++f)
      c(f);
    return s;
  }
}
class P1 extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = this, o = new qr(), a = new sr(this.manager);
    return a.setResponseType("arraybuffer"), a.setRequestHeader(this.requestHeader), a.setPath(this.path), a.setWithCredentials(s.withCredentials), a.load(e, function(c) {
      let f;
      try {
        f = s.parse(c);
      } catch (h) {
        if (r !== void 0)
          r(h);
        else {
          console.error(h);
          return;
        }
      }
      f.image !== void 0 ? o.image = f.image : f.data !== void 0 && (o.image.width = f.width, o.image.height = f.height, o.image.data = f.data), o.wrapS = f.wrapS !== void 0 ? f.wrapS : Bn, o.wrapT = f.wrapT !== void 0 ? f.wrapT : Bn, o.magFilter = f.magFilter !== void 0 ? f.magFilter : $t, o.minFilter = f.minFilter !== void 0 ? f.minFilter : $t, o.anisotropy = f.anisotropy !== void 0 ? f.anisotropy : 1, f.colorSpace !== void 0 && (o.colorSpace = f.colorSpace), f.flipY !== void 0 && (o.flipY = f.flipY), f.format !== void 0 && (o.format = f.format), f.type !== void 0 && (o.type = f.type), f.mipmaps !== void 0 && (o.mipmaps = f.mipmaps, o.minFilter = us), f.mipmapCount === 1 && (o.minFilter = $t), f.generateMipmaps !== void 0 && (o.generateMipmaps = f.generateMipmaps), o.needsUpdate = !0, t && t(o, f);
    }, i, r), o;
  }
}
class Jg extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = new Kt(), o = new qf(this.manager);
    return o.setCrossOrigin(this.crossOrigin), o.setPath(this.path), o.load(e, function(a) {
      s.image = a, s.needsUpdate = !0, t !== void 0 && t(s);
    }, i, r), s;
  }
}
class qo extends Yt {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new Qe(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (t.object.target = this.target.uuid), t;
  }
}
class wb extends qo {
  constructor(e, t, i) {
    super(e, i), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Yt.DEFAULT_UP), this.updateMatrix(), this.groundColor = new Qe(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const fy = /* @__PURE__ */ new yt(), qE = /* @__PURE__ */ new B(), jE = /* @__PURE__ */ new B();
class I1 {
  constructor(e) {
    this.camera = e, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new _e(512, 512), this.map = null, this.mapPass = null, this.matrix = new yt(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new ch(), this._frameExtents = new _e(1, 1), this._viewportCount = 1, this._viewports = [
      new Vt(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, i = this.matrix;
    qE.setFromMatrixPosition(e.matrixWorld), t.position.copy(qE), jE.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(jE), t.updateMatrixWorld(), fy.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(fy), i.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), i.multiply(fy);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.intensity = e.intensity, this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.intensity !== 1 && (e.intensity = this.intensity), this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class Bz extends I1 {
  constructor() {
    super(new Rn(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, i = Cu * 2 * e.angle * this.focus, r = this.mapSize.width / this.mapSize.height, s = e.distance || t.far;
    (i !== t.fov || r !== t.aspect || s !== t.far) && (t.fov = i, t.aspect = r, t.far = s, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class Eb extends qo {
  constructor(e, t, i = 0, r = Math.PI / 3, s = 0, o = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Yt.DEFAULT_UP), this.updateMatrix(), this.target = new Yt(), this.distance = i, this.angle = r, this.penumbra = s, this.decay = o, this.map = null, this.shadow = new Bz();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const ZE = /* @__PURE__ */ new yt(), wc = /* @__PURE__ */ new B(), hy = /* @__PURE__ */ new B();
class Hz extends I1 {
  constructor() {
    super(new Rn(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new _e(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Vt(2, 1, 1, 1),
      // negative X
      new Vt(0, 1, 1, 1),
      // positive Z
      new Vt(3, 1, 1, 1),
      // negative Z
      new Vt(1, 1, 1, 1),
      // positive Y
      new Vt(3, 0, 1, 1),
      // negative Y
      new Vt(1, 0, 1, 1)
    ], this._cubeDirections = [
      new B(1, 0, 0),
      new B(-1, 0, 0),
      new B(0, 0, 1),
      new B(0, 0, -1),
      new B(0, 1, 0),
      new B(0, -1, 0)
    ], this._cubeUps = [
      new B(0, 1, 0),
      new B(0, 1, 0),
      new B(0, 1, 0),
      new B(0, 1, 0),
      new B(0, 0, 1),
      new B(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const i = this.camera, r = this.matrix, s = e.distance || i.far;
    s !== i.far && (i.far = s, i.updateProjectionMatrix()), wc.setFromMatrixPosition(e.matrixWorld), i.position.copy(wc), hy.copy(i.position), hy.add(this._cubeDirections[t]), i.up.copy(this._cubeUps[t]), i.lookAt(hy), i.updateMatrixWorld(), r.makeTranslation(-wc.x, -wc.y, -wc.z), ZE.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse), this._frustum.setFromProjectionMatrix(ZE);
  }
}
class Tb extends qo {
  constructor(e, t, i = 0, r = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = i, this.decay = r, this.shadow = new Hz();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class Vz extends I1 {
  constructor() {
    super(new fs(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class Ab extends qo {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Yt.DEFAULT_UP), this.updateMatrix(), this.target = new Yt(), this.shadow = new Vz();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class Cb extends qo {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class Rb extends qo {
  constructor(e, t, i = 10, r = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = i, this.height = r;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class bb {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new B());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const i = e.x, r = e.y, s = e.z, o = this.coefficients;
    return t.copy(o[0]).multiplyScalar(0.282095), t.addScaledVector(o[1], 0.488603 * r), t.addScaledVector(o[2], 0.488603 * s), t.addScaledVector(o[3], 0.488603 * i), t.addScaledVector(o[4], 1.092548 * (i * r)), t.addScaledVector(o[5], 1.092548 * (r * s)), t.addScaledVector(o[6], 0.315392 * (3 * s * s - 1)), t.addScaledVector(o[7], 1.092548 * (i * s)), t.addScaledVector(o[8], 0.546274 * (i * i - r * r)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const i = e.x, r = e.y, s = e.z, o = this.coefficients;
    return t.copy(o[0]).multiplyScalar(0.886227), t.addScaledVector(o[1], 2 * 0.511664 * r), t.addScaledVector(o[2], 2 * 0.511664 * s), t.addScaledVector(o[3], 2 * 0.511664 * i), t.addScaledVector(o[4], 2 * 0.429043 * i * r), t.addScaledVector(o[5], 2 * 0.429043 * r * s), t.addScaledVector(o[6], 0.743125 * s * s - 0.247708), t.addScaledVector(o[7], 2 * 0.429043 * i * s), t.addScaledVector(o[8], 0.429043 * (i * i - r * r)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].addScaledVector(e.coefficients[i], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].lerp(e.coefficients[i], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const i = this.coefficients;
    for (let r = 0; r < 9; r++)
      i[r].fromArray(e, t + r * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const i = this.coefficients;
    for (let r = 0; r < 9; r++)
      i[r].toArray(e, t + r * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const i = e.x, r = e.y, s = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * r, t[2] = 0.488603 * s, t[3] = 0.488603 * i, t[4] = 1.092548 * i * r, t[5] = 1.092548 * r * s, t[6] = 0.315392 * (3 * s * s - 1), t[7] = 1.092548 * i * s, t[8] = 0.546274 * (i * i - r * r);
  }
}
class Pb extends qo {
  constructor(e = new bb(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class Qg extends Di {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, i, r) {
    const s = this, o = new sr(s.manager);
    o.setPath(s.path), o.setRequestHeader(s.requestHeader), o.setWithCredentials(s.withCredentials), o.load(e, function(a) {
      try {
        t(s.parse(JSON.parse(a)));
      } catch (c) {
        r ? r(c) : console.error(c), s.manager.itemError(e);
      }
    }, i, r);
  }
  parse(e) {
    const t = this.textures;
    function i(s) {
      return t[s] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", s), t[s];
    }
    const r = Qg.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (r.uuid = e.uuid), e.name !== void 0 && (r.name = e.name), e.color !== void 0 && r.color !== void 0 && r.color.setHex(e.color), e.roughness !== void 0 && (r.roughness = e.roughness), e.metalness !== void 0 && (r.metalness = e.metalness), e.sheen !== void 0 && (r.sheen = e.sheen), e.sheenColor !== void 0 && (r.sheenColor = new Qe().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (r.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && r.emissive !== void 0 && r.emissive.setHex(e.emissive), e.specular !== void 0 && r.specular !== void 0 && r.specular.setHex(e.specular), e.specularIntensity !== void 0 && (r.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && r.specularColor !== void 0 && r.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (r.shininess = e.shininess), e.clearcoat !== void 0 && (r.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (r.clearcoatRoughness = e.clearcoatRoughness), e.dispersion !== void 0 && (r.dispersion = e.dispersion), e.iridescence !== void 0 && (r.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (r.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (r.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (r.transmission = e.transmission), e.thickness !== void 0 && (r.thickness = e.thickness), e.attenuationDistance !== void 0 && (r.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && r.attenuationColor !== void 0 && r.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (r.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (r.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (r.fog = e.fog), e.flatShading !== void 0 && (r.flatShading = e.flatShading), e.blending !== void 0 && (r.blending = e.blending), e.combine !== void 0 && (r.combine = e.combine), e.side !== void 0 && (r.side = e.side), e.shadowSide !== void 0 && (r.shadowSide = e.shadowSide), e.opacity !== void 0 && (r.opacity = e.opacity), e.transparent !== void 0 && (r.transparent = e.transparent), e.alphaTest !== void 0 && (r.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (r.alphaHash = e.alphaHash), e.depthFunc !== void 0 && (r.depthFunc = e.depthFunc), e.depthTest !== void 0 && (r.depthTest = e.depthTest), e.depthWrite !== void 0 && (r.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (r.colorWrite = e.colorWrite), e.blendSrc !== void 0 && (r.blendSrc = e.blendSrc), e.blendDst !== void 0 && (r.blendDst = e.blendDst), e.blendEquation !== void 0 && (r.blendEquation = e.blendEquation), e.blendSrcAlpha !== void 0 && (r.blendSrcAlpha = e.blendSrcAlpha), e.blendDstAlpha !== void 0 && (r.blendDstAlpha = e.blendDstAlpha), e.blendEquationAlpha !== void 0 && (r.blendEquationAlpha = e.blendEquationAlpha), e.blendColor !== void 0 && r.blendColor !== void 0 && r.blendColor.setHex(e.blendColor), e.blendAlpha !== void 0 && (r.blendAlpha = e.blendAlpha), e.stencilWriteMask !== void 0 && (r.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (r.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (r.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (r.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (r.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (r.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (r.stencilZPass = e.stencilZPass), e.stencilWrite !== void 0 && (r.stencilWrite = e.stencilWrite), e.wireframe !== void 0 && (r.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (r.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (r.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (r.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (r.rotation = e.rotation), e.linewidth !== void 0 && (r.linewidth = e.linewidth), e.dashSize !== void 0 && (r.dashSize = e.dashSize), e.gapSize !== void 0 && (r.gapSize = e.gapSize), e.scale !== void 0 && (r.scale = e.scale), e.polygonOffset !== void 0 && (r.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (r.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (r.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (r.dithering = e.dithering), e.alphaToCoverage !== void 0 && (r.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (r.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (r.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (r.visible = e.visible), e.toneMapped !== void 0 && (r.toneMapped = e.toneMapped), e.userData !== void 0 && (r.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? r.vertexColors = e.vertexColors > 0 : r.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const s in e.uniforms) {
        const o = e.uniforms[s];
        switch (r.uniforms[s] = {}, o.type) {
          case "t":
            r.uniforms[s].value = i(o.value);
            break;
          case "c":
            r.uniforms[s].value = new Qe().setHex(o.value);
            break;
          case "v2":
            r.uniforms[s].value = new _e().fromArray(o.value);
            break;
          case "v3":
            r.uniforms[s].value = new B().fromArray(o.value);
            break;
          case "v4":
            r.uniforms[s].value = new Vt().fromArray(o.value);
            break;
          case "m3":
            r.uniforms[s].value = new bt().fromArray(o.value);
            break;
          case "m4":
            r.uniforms[s].value = new yt().fromArray(o.value);
            break;
          default:
            r.uniforms[s].value = o.value;
        }
      }
    if (e.defines !== void 0 && (r.defines = e.defines), e.vertexShader !== void 0 && (r.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (r.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (r.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const s in e.extensions)
        r.extensions[s] = e.extensions[s];
    if (e.lights !== void 0 && (r.lights = e.lights), e.clipping !== void 0 && (r.clipping = e.clipping), e.size !== void 0 && (r.size = e.size), e.sizeAttenuation !== void 0 && (r.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (r.map = i(e.map)), e.matcap !== void 0 && (r.matcap = i(e.matcap)), e.alphaMap !== void 0 && (r.alphaMap = i(e.alphaMap)), e.bumpMap !== void 0 && (r.bumpMap = i(e.bumpMap)), e.bumpScale !== void 0 && (r.bumpScale = e.bumpScale), e.normalMap !== void 0 && (r.normalMap = i(e.normalMap)), e.normalMapType !== void 0 && (r.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let s = e.normalScale;
      Array.isArray(s) === !1 && (s = [s, s]), r.normalScale = new _e().fromArray(s);
    }
    return e.displacementMap !== void 0 && (r.displacementMap = i(e.displacementMap)), e.displacementScale !== void 0 && (r.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (r.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (r.roughnessMap = i(e.roughnessMap)), e.metalnessMap !== void 0 && (r.metalnessMap = i(e.metalnessMap)), e.emissiveMap !== void 0 && (r.emissiveMap = i(e.emissiveMap)), e.emissiveIntensity !== void 0 && (r.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (r.specularMap = i(e.specularMap)), e.specularIntensityMap !== void 0 && (r.specularIntensityMap = i(e.specularIntensityMap)), e.specularColorMap !== void 0 && (r.specularColorMap = i(e.specularColorMap)), e.envMap !== void 0 && (r.envMap = i(e.envMap)), e.envMapRotation !== void 0 && r.envMapRotation.fromArray(e.envMapRotation), e.envMapIntensity !== void 0 && (r.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (r.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (r.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (r.lightMap = i(e.lightMap)), e.lightMapIntensity !== void 0 && (r.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (r.aoMap = i(e.aoMap)), e.aoMapIntensity !== void 0 && (r.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (r.gradientMap = i(e.gradientMap)), e.clearcoatMap !== void 0 && (r.clearcoatMap = i(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (r.clearcoatRoughnessMap = i(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (r.clearcoatNormalMap = i(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (r.clearcoatNormalScale = new _e().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (r.iridescenceMap = i(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (r.iridescenceThicknessMap = i(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (r.transmissionMap = i(e.transmissionMap)), e.thicknessMap !== void 0 && (r.thicknessMap = i(e.thicknessMap)), e.anisotropyMap !== void 0 && (r.anisotropyMap = i(e.anisotropyMap)), e.sheenColorMap !== void 0 && (r.sheenColorMap = i(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (r.sheenRoughnessMap = i(e.sheenRoughnessMap)), r;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: lb,
      SpriteMaterial: v1,
      RawShaderMaterial: ub,
      ShaderMaterial: qi,
      PointsMaterial: _1,
      MeshPhysicalMaterial: cb,
      MeshStandardMaterial: A1,
      MeshPhongMaterial: fb,
      MeshToonMaterial: hb,
      MeshNormalMaterial: db,
      MeshLambertMaterial: pb,
      MeshDepthMaterial: p1,
      MeshDistanceMaterial: m1,
      MeshBasicMaterial: Ti,
      MeshMatcapMaterial: mb,
      LineDashedMaterial: gb,
      LineBasicMaterial: Li,
      Material: si
    };
    return new t[e]();
  }
}
class H_ {
  static decodeText(e) {
    if (console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."), typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let i = 0, r = e.length; i < r; i++)
      t += String.fromCharCode(e[i]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class Ib extends Dt {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class Lb extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = this, o = new sr(s.manager);
    o.setPath(s.path), o.setRequestHeader(s.requestHeader), o.setWithCredentials(s.withCredentials), o.load(e, function(a) {
      try {
        t(s.parse(JSON.parse(a)));
      } catch (c) {
        r ? r(c) : console.error(c), s.manager.itemError(e);
      }
    }, i, r);
  }
  parse(e) {
    const t = {}, i = {};
    function r(v, y) {
      if (t[y] !== void 0)
        return t[y];
      const x = v.interleavedBuffers[y], g = s(v, x.buffer), S = su(x.type, g), M = new Ng(S, x.stride);
      return M.uuid = x.uuid, t[y] = M, M;
    }
    function s(v, y) {
      if (i[y] !== void 0)
        return i[y];
      const x = v.arrayBuffers[y], g = new Uint32Array(x).buffer;
      return i[y] = g, g;
    }
    const o = e.isInstancedBufferGeometry ? new Ib() : new Dt(), a = e.data.index;
    if (a !== void 0) {
      const v = su(a.type, a.array);
      o.setIndex(new nn(v, 1));
    }
    const c = e.data.attributes;
    for (const v in c) {
      const y = c[v];
      let w;
      if (y.isInterleavedBufferAttribute) {
        const x = r(e.data, y.data);
        w = new Za(x, y.itemSize, y.offset, y.normalized);
      } else {
        const x = su(y.type, y.array), g = y.isInstancedBufferAttribute ? Pu : nn;
        w = new g(x, y.itemSize, y.normalized);
      }
      y.name !== void 0 && (w.name = y.name), y.usage !== void 0 && w.setUsage(y.usage), o.setAttribute(v, w);
    }
    const f = e.data.morphAttributes;
    if (f)
      for (const v in f) {
        const y = f[v], w = [];
        for (let x = 0, g = y.length; x < g; x++) {
          const S = y[x];
          let M;
          if (S.isInterleavedBufferAttribute) {
            const T = r(e.data, S.data);
            M = new Za(T, S.itemSize, S.offset, S.normalized);
          } else {
            const T = su(S.type, S.array);
            M = new nn(T, S.itemSize, S.normalized);
          }
          S.name !== void 0 && (M.name = S.name), w.push(M);
        }
        o.morphAttributes[v] = w;
      }
    e.data.morphTargetsRelative && (o.morphTargetsRelative = !0);
    const d = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (d !== void 0)
      for (let v = 0, y = d.length; v !== y; ++v) {
        const w = d[v];
        o.addGroup(w.start, w.count, w.materialIndex);
      }
    const p = e.data.boundingSphere;
    if (p !== void 0) {
      const v = new B();
      p.center !== void 0 && v.fromArray(p.center), o.boundingSphere = new gi(v, p.radius);
    }
    return e.name && (o.name = e.name), e.userData && (o.userData = e.userData), o;
  }
}
class Gz extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = this, o = this.path === "" ? H_.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || o;
    const a = new sr(this.manager);
    a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(c) {
      let f = null;
      try {
        f = JSON.parse(c);
      } catch (d) {
        r !== void 0 && r(d), console.error("THREE:ObjectLoader: Can't parse " + e + ".", d.message);
        return;
      }
      const h = f.metadata;
      if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry") {
        r !== void 0 && r(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      s.parse(f, t);
    }, i, r);
  }
  async loadAsync(e, t) {
    const i = this, r = this.path === "" ? H_.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || r;
    const s = new sr(this.manager);
    s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials);
    const o = await s.loadAsync(e, t), a = JSON.parse(o), c = a.metadata;
    if (c === void 0 || c.type === void 0 || c.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await i.parseAsync(a);
  }
  parse(e, t) {
    const i = this.parseAnimations(e.animations), r = this.parseShapes(e.shapes), s = this.parseGeometries(e.geometries, r), o = this.parseImages(e.images, function() {
      t !== void 0 && t(f);
    }), a = this.parseTextures(e.textures, o), c = this.parseMaterials(e.materials, a), f = this.parseObject(e.object, s, c, a, i), h = this.parseSkeletons(e.skeletons, f);
    if (this.bindSkeletons(f, h), this.bindLightTargets(f), t !== void 0) {
      let d = !1;
      for (const p in o)
        if (o[p].data instanceof HTMLImageElement) {
          d = !0;
          break;
        }
      d === !1 && t(f);
    }
    return f;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, i), s = await this.parseImagesAsync(e.images), o = this.parseTextures(e.textures, s), a = this.parseMaterials(e.materials, o), c = this.parseObject(e.object, r, a, o, t), f = this.parseSkeletons(e.skeletons, c);
    return this.bindSkeletons(c, f), this.bindLightTargets(c), c;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let i = 0, r = e.length; i < r; i++) {
        const s = new Ha().fromJSON(e[i]);
        t[s.uuid] = s;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const i = {}, r = {};
    if (t.traverse(function(s) {
      s.isBone && (r[s.uuid] = s);
    }), e !== void 0)
      for (let s = 0, o = e.length; s < o; s++) {
        const a = new fh().fromJSON(e[s], r);
        i[a.uuid] = a;
      }
    return i;
  }
  parseGeometries(e, t) {
    const i = {};
    if (e !== void 0) {
      const r = new Lb();
      for (let s = 0, o = e.length; s < o; s++) {
        let a;
        const c = e[s];
        switch (c.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            a = r.parse(c);
            break;
          default:
            c.type in YE ? a = YE[c.type].fromJSON(c, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`);
        }
        a.uuid = c.uuid, c.name !== void 0 && (a.name = c.name), c.userData !== void 0 && (a.userData = c.userData), i[c.uuid] = a;
      }
    }
    return i;
  }
  parseMaterials(e, t) {
    const i = {}, r = {};
    if (e !== void 0) {
      const s = new Qg();
      s.setTextures(t);
      for (let o = 0, a = e.length; o < a; o++) {
        const c = e[o];
        i[c.uuid] === void 0 && (i[c.uuid] = s.parse(c)), r[c.uuid] = i[c.uuid];
      }
    }
    return r;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let i = 0; i < e.length; i++) {
        const r = e[i], s = Yf.parse(r);
        t[s.uuid] = s;
      }
    return t;
  }
  parseImages(e, t) {
    const i = this, r = {};
    let s;
    function o(c) {
      return i.manager.itemStart(c), s.load(c, function() {
        i.manager.itemEnd(c);
      }, void 0, function() {
        i.manager.itemError(c), i.manager.itemEnd(c);
      });
    }
    function a(c) {
      if (typeof c == "string") {
        const f = c, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f) ? f : i.resourcePath + f;
        return o(h);
      } else
        return c.data ? {
          data: su(c.type, c.data),
          width: c.width,
          height: c.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const c = new Kg(t);
      s = new qf(c), s.setCrossOrigin(this.crossOrigin);
      for (let f = 0, h = e.length; f < h; f++) {
        const d = e[f], p = d.url;
        if (Array.isArray(p)) {
          const v = [];
          for (let y = 0, w = p.length; y < w; y++) {
            const x = p[y], g = a(x);
            g !== null && (g instanceof HTMLImageElement ? v.push(g) : v.push(new qr(g.data, g.width, g.height)));
          }
          r[d.uuid] = new Ia(v);
        } else {
          const v = a(d.url);
          r[d.uuid] = new Ia(v);
        }
      }
    }
    return r;
  }
  async parseImagesAsync(e) {
    const t = this, i = {};
    let r;
    async function s(o) {
      if (typeof o == "string") {
        const a = o, c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(a) ? a : t.resourcePath + a;
        return await r.loadAsync(c);
      } else
        return o.data ? {
          data: su(o.type, o.data),
          width: o.width,
          height: o.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      r = new qf(this.manager), r.setCrossOrigin(this.crossOrigin);
      for (let o = 0, a = e.length; o < a; o++) {
        const c = e[o], f = c.url;
        if (Array.isArray(f)) {
          const h = [];
          for (let d = 0, p = f.length; d < p; d++) {
            const v = f[d], y = await s(v);
            y !== null && (y instanceof HTMLImageElement ? h.push(y) : h.push(new qr(y.data, y.width, y.height)));
          }
          i[c.uuid] = new Ia(h);
        } else {
          const h = await s(c.url);
          i[c.uuid] = new Ia(h);
        }
      }
    }
    return i;
  }
  parseTextures(e, t) {
    function i(s, o) {
      return typeof s == "number" ? s : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", s), o[s]);
    }
    const r = {};
    if (e !== void 0)
      for (let s = 0, o = e.length; s < o; s++) {
        const a = e[s];
        a.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', a.uuid), t[a.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", a.image);
        const c = t[a.image], f = c.data;
        let h;
        Array.isArray(f) ? (h = new uh(), f.length === 6 && (h.needsUpdate = !0)) : (f && f.data ? h = new qr() : h = new Kt(), f && (h.needsUpdate = !0)), h.source = c, h.uuid = a.uuid, a.name !== void 0 && (h.name = a.name), a.mapping !== void 0 && (h.mapping = i(a.mapping, Wz)), a.channel !== void 0 && (h.channel = a.channel), a.offset !== void 0 && h.offset.fromArray(a.offset), a.repeat !== void 0 && h.repeat.fromArray(a.repeat), a.center !== void 0 && h.center.fromArray(a.center), a.rotation !== void 0 && (h.rotation = a.rotation), a.wrap !== void 0 && (h.wrapS = i(a.wrap[0], KE), h.wrapT = i(a.wrap[1], KE)), a.format !== void 0 && (h.format = a.format), a.internalFormat !== void 0 && (h.internalFormat = a.internalFormat), a.type !== void 0 && (h.type = a.type), a.colorSpace !== void 0 && (h.colorSpace = a.colorSpace), a.minFilter !== void 0 && (h.minFilter = i(a.minFilter, JE)), a.magFilter !== void 0 && (h.magFilter = i(a.magFilter, JE)), a.anisotropy !== void 0 && (h.anisotropy = a.anisotropy), a.flipY !== void 0 && (h.flipY = a.flipY), a.generateMipmaps !== void 0 && (h.generateMipmaps = a.generateMipmaps), a.premultiplyAlpha !== void 0 && (h.premultiplyAlpha = a.premultiplyAlpha), a.unpackAlignment !== void 0 && (h.unpackAlignment = a.unpackAlignment), a.compareFunction !== void 0 && (h.compareFunction = a.compareFunction), a.userData !== void 0 && (h.userData = a.userData), r[a.uuid] = h;
      }
    return r;
  }
  parseObject(e, t, i, r, s) {
    let o;
    function a(p) {
      return t[p] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", p), t[p];
    }
    function c(p) {
      if (p !== void 0) {
        if (Array.isArray(p)) {
          const v = [];
          for (let y = 0, w = p.length; y < w; y++) {
            const x = p[y];
            i[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", x), v.push(i[x]);
          }
          return v;
        }
        return i[p] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", p), i[p];
      }
    }
    function f(p) {
      return r[p] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", p), r[p];
    }
    let h, d;
    switch (e.type) {
      case "Scene":
        o = new bu(), e.background !== void 0 && (Number.isInteger(e.background) ? o.background = new Qe(e.background) : o.background = f(e.background)), e.environment !== void 0 && (o.environment = f(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? o.fog = new Dg(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (o.fog = new Lg(e.fog.color, e.fog.density)), e.fog.name !== "" && (o.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (o.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (o.backgroundIntensity = e.backgroundIntensity), e.backgroundRotation !== void 0 && o.backgroundRotation.fromArray(e.backgroundRotation), e.environmentIntensity !== void 0 && (o.environmentIntensity = e.environmentIntensity), e.environmentRotation !== void 0 && o.environmentRotation.fromArray(e.environmentRotation);
        break;
      case "PerspectiveCamera":
        o = new Rn(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (o.focus = e.focus), e.zoom !== void 0 && (o.zoom = e.zoom), e.filmGauge !== void 0 && (o.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (o.filmOffset = e.filmOffset), e.view !== void 0 && (o.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        o = new fs(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (o.zoom = e.zoom), e.view !== void 0 && (o.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        o = new Cb(e.color, e.intensity);
        break;
      case "DirectionalLight":
        o = new Ab(e.color, e.intensity), o.target = e.target || "";
        break;
      case "PointLight":
        o = new Tb(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        o = new Rb(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        o = new Eb(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay), o.target = e.target || "";
        break;
      case "HemisphereLight":
        o = new wb(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        o = new Pb().fromJSON(e);
        break;
      case "SkinnedMesh":
        h = a(e.geometry), d = c(e.material), o = new y1(h, d), e.bindMode !== void 0 && (o.bindMode = e.bindMode), e.bindMatrix !== void 0 && o.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (o.skeleton = e.skeleton);
        break;
      case "Mesh":
        h = a(e.geometry), d = c(e.material), o = new Sn(h, d);
        break;
      case "InstancedMesh":
        h = a(e.geometry), d = c(e.material);
        const p = e.count, v = e.instanceMatrix, y = e.instanceColor;
        o = new j2(h, d, p), o.instanceMatrix = new Pu(new Float32Array(v.array), 16), y !== void 0 && (o.instanceColor = new Pu(new Float32Array(y.array), y.itemSize));
        break;
      case "BatchedMesh":
        h = a(e.geometry), d = c(e.material), o = new Z2(e.maxInstanceCount, e.maxVertexCount, e.maxIndexCount, d), o.geometry = h, o.perObjectFrustumCulled = e.perObjectFrustumCulled, o.sortObjects = e.sortObjects, o._drawRanges = e.drawRanges, o._reservedRanges = e.reservedRanges, o._visibility = e.visibility, o._active = e.active, o._bounds = e.bounds.map((w) => {
          const x = new Ri();
          x.min.fromArray(w.boxMin), x.max.fromArray(w.boxMax);
          const g = new gi();
          return g.radius = w.sphereRadius, g.center.fromArray(w.sphereCenter), {
            boxInitialized: w.boxInitialized,
            box: x,
            sphereInitialized: w.sphereInitialized,
            sphere: g
          };
        }), o._maxInstanceCount = e.maxInstanceCount, o._maxVertexCount = e.maxVertexCount, o._maxIndexCount = e.maxIndexCount, o._geometryInitialized = e.geometryInitialized, o._geometryCount = e.geometryCount, o._matricesTexture = f(e.matricesTexture.uuid), e.colorsTexture !== void 0 && (o._colorsTexture = f(e.colorsTexture.uuid));
        break;
      case "LOD":
        o = new q2();
        break;
      case "Line":
        o = new zo(a(e.geometry), c(e.material));
        break;
      case "LineLoop":
        o = new K2(a(e.geometry), c(e.material));
        break;
      case "LineSegments":
        o = new xs(a(e.geometry), c(e.material));
        break;
      case "PointCloud":
      case "Points":
        o = new J2(a(e.geometry), c(e.material));
        break;
      case "Sprite":
        o = new Y2(c(e.material));
        break;
      case "Group":
        o = new au();
        break;
      case "Bone":
        o = new Ug();
        break;
      default:
        o = new Yt();
    }
    if (o.uuid = e.uuid, e.name !== void 0 && (o.name = e.name), e.matrix !== void 0 ? (o.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (o.matrixAutoUpdate = e.matrixAutoUpdate), o.matrixAutoUpdate && o.matrix.decompose(o.position, o.quaternion, o.scale)) : (e.position !== void 0 && o.position.fromArray(e.position), e.rotation !== void 0 && o.rotation.fromArray(e.rotation), e.quaternion !== void 0 && o.quaternion.fromArray(e.quaternion), e.scale !== void 0 && o.scale.fromArray(e.scale)), e.up !== void 0 && o.up.fromArray(e.up), e.castShadow !== void 0 && (o.castShadow = e.castShadow), e.receiveShadow !== void 0 && (o.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.intensity !== void 0 && (o.shadow.intensity = e.shadow.intensity), e.shadow.bias !== void 0 && (o.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (o.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (o.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && o.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (o.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (o.visible = e.visible), e.frustumCulled !== void 0 && (o.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (o.renderOrder = e.renderOrder), e.userData !== void 0 && (o.userData = e.userData), e.layers !== void 0 && (o.layers.mask = e.layers), e.children !== void 0) {
      const p = e.children;
      for (let v = 0; v < p.length; v++)
        o.add(this.parseObject(p[v], t, i, r, s));
    }
    if (e.animations !== void 0) {
      const p = e.animations;
      for (let v = 0; v < p.length; v++) {
        const y = p[v];
        o.animations.push(s[y]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (o.autoUpdate = e.autoUpdate);
      const p = e.levels;
      for (let v = 0; v < p.length; v++) {
        const y = p[v], w = o.getObjectByProperty("uuid", y.object);
        w !== void 0 && o.addLevel(w, y.distance, y.hysteresis);
      }
    }
    return o;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(i) {
      if (i.isSkinnedMesh === !0 && i.skeleton !== void 0) {
        const r = t[i.skeleton];
        r === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", i.skeleton) : i.bind(r, i.bindMatrix);
      }
    });
  }
  bindLightTargets(e) {
    e.traverse(function(t) {
      if (t.isDirectionalLight || t.isSpotLight) {
        const i = t.target, r = e.getObjectByProperty("uuid", i);
        r !== void 0 ? t.target = r : t.target = new Yt();
      }
    });
  }
}
const Wz = {
  UVMapping: Fo,
  CubeReflectionMapping: vs,
  CubeRefractionMapping: ko,
  EquirectangularReflectionMapping: Tu,
  EquirectangularRefractionMapping: bf,
  CubeUVReflectionMapping: Uu
}, KE = {
  RepeatWrapping: Pf,
  ClampToEdgeWrapping: Bn,
  MirroredRepeatWrapping: If
}, JE = {
  NearestFilter: Qn,
  NearestMipmapNearestFilter: Kx,
  NearestMipmapLinearFilter: ru,
  LinearFilter: $t,
  LinearMipmapNearestFilter: Qc,
  LinearMipmapLinearFilter: us
};
class Xz extends Di {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, i, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = this, o = Vs.get(e);
    if (o !== void 0) {
      if (s.manager.itemStart(e), o.then) {
        o.then((f) => {
          t && t(f), s.manager.itemEnd(e);
        }).catch((f) => {
          r && r(f);
        });
        return;
      }
      return setTimeout(function() {
        t && t(o), s.manager.itemEnd(e);
      }, 0), o;
    }
    const a = {};
    a.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", a.headers = this.requestHeader;
    const c = fetch(e, a).then(function(f) {
      return f.blob();
    }).then(function(f) {
      return createImageBitmap(f, Object.assign(s.options, { colorSpaceConversion: "none" }));
    }).then(function(f) {
      return Vs.add(e, f), t && t(f), s.manager.itemEnd(e), f;
    }).catch(function(f) {
      r && r(f), Vs.remove(e), s.manager.itemError(e), s.manager.itemEnd(e);
    });
    Vs.add(e, c), s.manager.itemStart(e);
  }
}
let gp;
class L1 {
  static getContext() {
    return gp === void 0 && (gp = new (window.AudioContext || window.webkitAudioContext)()), gp;
  }
  static setContext(e) {
    gp = e;
  }
}
class Yz extends Di {
  constructor(e) {
    super(e);
  }
  load(e, t, i, r) {
    const s = this, o = new sr(this.manager);
    o.setResponseType("arraybuffer"), o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(c) {
      try {
        const f = c.slice(0);
        L1.getContext().decodeAudioData(f, function(d) {
          t(d);
        }).catch(a);
      } catch (f) {
        a(f);
      }
    }, i, r);
    function a(c) {
      r ? r(c) : console.error(c), s.manager.itemError(e);
    }
  }
}
const QE = /* @__PURE__ */ new yt(), $E = /* @__PURE__ */ new yt(), ha = /* @__PURE__ */ new yt();
class qz {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Rn(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Rn(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, ha.copy(e.projectionMatrix);
      const r = t.eyeSep / 2, s = r * t.near / t.focus, o = t.near * Math.tan(za * t.fov * 0.5) / t.zoom;
      let a, c;
      $E.elements[12] = -r, QE.elements[12] = r, a = -o * t.aspect + s, c = o * t.aspect + s, ha.elements[0] = 2 * t.near / (c - a), ha.elements[8] = (c + a) / (c - a), this.cameraL.projectionMatrix.copy(ha), a = -o * t.aspect - s, c = o * t.aspect - s, ha.elements[0] = 2 * t.near / (c - a), ha.elements[8] = (c + a) / (c - a), this.cameraR.projectionMatrix.copy(ha);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply($E), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(QE);
  }
}
class D1 {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = eT(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = eT();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function eT() {
  return (typeof performance > "u" ? Date : performance).now();
}
const da = /* @__PURE__ */ new B(), tT = /* @__PURE__ */ new Dn(), jz = /* @__PURE__ */ new B(), pa = /* @__PURE__ */ new B();
class Zz extends Yt {
  constructor() {
    super(), this.type = "AudioListener", this.context = L1.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new D1();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, i = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(da, tT, jz), pa.set(0, 0, -1).applyQuaternion(tT), t.positionX) {
      const r = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(da.x, r), t.positionY.linearRampToValueAtTime(da.y, r), t.positionZ.linearRampToValueAtTime(da.z, r), t.forwardX.linearRampToValueAtTime(pa.x, r), t.forwardY.linearRampToValueAtTime(pa.y, r), t.forwardZ.linearRampToValueAtTime(pa.z, r), t.upX.linearRampToValueAtTime(i.x, r), t.upY.linearRampToValueAtTime(i.y, r), t.upZ.linearRampToValueAtTime(i.z, r);
    } else
      t.setPosition(da.x, da.y, da.z), t.setOrientation(pa.x, pa.y, pa.z, i.x, i.y, i.z);
  }
}
class Db extends Yt {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    return this.detune = e, this.isPlaying === !0 && this.source.detune !== void 0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const ma = /* @__PURE__ */ new B(), nT = /* @__PURE__ */ new Dn(), Kz = /* @__PURE__ */ new B(), ga = /* @__PURE__ */ new B();
class Jz extends Db {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    super.connect(), this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, i) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = i, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)
      return;
    this.matrixWorld.decompose(ma, nT, Kz), ga.set(0, 0, 1).applyQuaternion(nT);
    const t = this.panner;
    if (t.positionX) {
      const i = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(ma.x, i), t.positionY.linearRampToValueAtTime(ma.y, i), t.positionZ.linearRampToValueAtTime(ma.z, i), t.orientationX.linearRampToValueAtTime(ga.x, i), t.orientationY.linearRampToValueAtTime(ga.y, i), t.orientationZ.linearRampToValueAtTime(ga.z, i);
    } else
      t.setPosition(ma.x, ma.y, ma.z), t.setOrientation(ga.x, ga.y, ga.z);
  }
}
class Qz {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let i = 0; i < t.length; i++)
      e += t[i];
    return e / t.length;
  }
}
class Nb {
  constructor(e, t, i) {
    this.binding = e, this.valueSize = i;
    let r, s, o;
    switch (t) {
      case "quaternion":
        r = this._slerp, s = this._slerpAdditive, o = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(i * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        r = this._select, s = this._select, o = this._setAdditiveIdentityOther, this.buffer = new Array(i * 5);
        break;
      default:
        r = this._lerp, s = this._lerpAdditive, o = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(i * 5);
    }
    this._mixBufferRegion = r, this._mixBufferRegionAdditive = s, this._setIdentity = o, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const i = this.buffer, r = this.valueSize, s = e * r + r;
    let o = this.cumulativeWeight;
    if (o === 0) {
      for (let a = 0; a !== r; ++a)
        i[s + a] = i[a];
      o = t;
    } else {
      o += t;
      const a = t / o;
      this._mixBufferRegion(i, s, 0, a, r);
    }
    this.cumulativeWeight = o;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, i = this.valueSize, r = i * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, r, 0, e, i), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, i = this.buffer, r = e * t + t, s = this.cumulativeWeight, o = this.cumulativeWeightAdditive, a = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, s < 1) {
      const c = t * this._origIndex;
      this._mixBufferRegion(
        i,
        r,
        c,
        1 - s,
        t
      );
    }
    o > 0 && this._mixBufferRegionAdditive(i, r, this._addIndex * t, 1, t);
    for (let c = t, f = t + t; c !== f; ++c)
      if (i[c] !== i[c + t]) {
        a.setValue(i, r);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, i = this.valueSize, r = i * this._origIndex;
    e.getValue(t, r);
    for (let s = i, o = r; s !== o; ++s)
      t[s] = t[r + s % i];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let i = e; i < t; i++)
      this.buffer[i] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let i = 0; i < this.valueSize; i++)
      this.buffer[t + i] = this.buffer[e + i];
  }
  // mix functions
  _select(e, t, i, r, s) {
    if (r >= 0.5)
      for (let o = 0; o !== s; ++o)
        e[t + o] = e[i + o];
  }
  _slerp(e, t, i, r) {
    Dn.slerpFlat(e, t, e, t, e, i, r);
  }
  _slerpAdditive(e, t, i, r, s) {
    const o = this._workIndex * s;
    Dn.multiplyQuaternionsFlat(e, o, e, t, e, i), Dn.slerpFlat(e, t, e, t, e, o, r);
  }
  _lerp(e, t, i, r, s) {
    const o = 1 - r;
    for (let a = 0; a !== s; ++a) {
      const c = t + a;
      e[c] = e[c] * o + e[i + a] * r;
    }
  }
  _lerpAdditive(e, t, i, r, s) {
    for (let o = 0; o !== s; ++o) {
      const a = t + o;
      e[a] = e[a] + e[i + o] * r;
    }
  }
}
const N1 = "\\[\\]\\.:\\/", $z = new RegExp("[" + N1 + "]", "g"), U1 = "[^" + N1 + "]", e4 = "[^" + N1.replace("\\.", "") + "]", t4 = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", U1), n4 = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", e4), i4 = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", U1), r4 = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", U1), s4 = new RegExp(
  "^" + t4 + n4 + i4 + r4 + "$"
), o4 = ["material", "materials", "bones", "map"];
class a4 {
  constructor(e, t, i) {
    const r = i || Wt.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, r);
  }
  getValue(e, t) {
    this.bind();
    const i = this._targetGroup.nCachedObjects_, r = this._bindings[i];
    r !== void 0 && r.getValue(e, t);
  }
  setValue(e, t) {
    const i = this._bindings;
    for (let r = this._targetGroup.nCachedObjects_, s = i.length; r !== s; ++r)
      i[r].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, i = e.length; t !== i; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, i = e.length; t !== i; ++t)
      e[t].unbind();
  }
}
class Wt {
  constructor(e, t, i) {
    this.path = t, this.parsedPath = i || Wt.parseTrackName(t), this.node = Wt.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, i) {
    return e && e.isAnimationObjectGroup ? new Wt.Composite(e, t, i) : new Wt(e, t, i);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace($z, "");
  }
  static parseTrackName(e) {
    const t = s4.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const i = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, r = i.nodeName && i.nodeName.lastIndexOf(".");
    if (r !== void 0 && r !== -1) {
      const s = i.nodeName.substring(r + 1);
      o4.indexOf(s) !== -1 && (i.nodeName = i.nodeName.substring(0, r), i.objectName = s);
    }
    if (i.propertyName === null || i.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return i;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const i = e.skeleton.getBoneByName(t);
      if (i !== void 0)
        return i;
    }
    if (e.children) {
      const i = function(s) {
        for (let o = 0; o < s.length; o++) {
          const a = s[o];
          if (a.name === t || a.uuid === t)
            return a;
          const c = i(a.children);
          if (c)
            return c;
        }
        return null;
      }, r = i(e.children);
      if (r)
        return r;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const i = this.resolvedProperty;
    for (let r = 0, s = i.length; r !== s; ++r)
      e[t++] = i[r];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const i = this.resolvedProperty;
    for (let r = 0, s = i.length; r !== s; ++r)
      i[r] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const i = this.resolvedProperty;
    for (let r = 0, s = i.length; r !== s; ++r)
      i[r] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const i = this.resolvedProperty;
    for (let r = 0, s = i.length; r !== s; ++r)
      i[r] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, i = t.objectName, r = t.propertyName;
    let s = t.propertyIndex;
    if (e || (e = Wt.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (i) {
      let f = t.objectIndex;
      switch (i) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let h = 0; h < e.length; h++)
            if (e[h].name === f) {
              f = h;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[i] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[i];
      }
      if (f !== void 0) {
        if (e[f] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[f];
      }
    }
    const o = e[r];
    if (o === void 0) {
      const f = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + f + "." + r + " but it wasn't found.", e);
      return;
    }
    let a = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? a = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (a = this.Versioning.MatrixWorldNeedsUpdate);
    let c = this.BindingType.Direct;
    if (s !== void 0) {
      if (r === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[s] !== void 0 && (s = e.morphTargetDictionary[s]);
      }
      c = this.BindingType.ArrayElement, this.resolvedProperty = o, this.propertyIndex = s;
    } else
      o.fromArray !== void 0 && o.toArray !== void 0 ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = o) : Array.isArray(o) ? (c = this.BindingType.EntireArray, this.resolvedProperty = o) : this.propertyName = r;
    this.getValue = this.GetterByBindingType[c], this.setValue = this.SetterByBindingTypeAndVersioning[c][a];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
Wt.Composite = a4;
Wt.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
Wt.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
Wt.prototype.GetterByBindingType = [
  Wt.prototype._getValue_direct,
  Wt.prototype._getValue_array,
  Wt.prototype._getValue_arrayElement,
  Wt.prototype._getValue_toArray
];
Wt.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    Wt.prototype._setValue_direct,
    Wt.prototype._setValue_direct_setNeedsUpdate,
    Wt.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    Wt.prototype._setValue_array,
    Wt.prototype._setValue_array_setNeedsUpdate,
    Wt.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    Wt.prototype._setValue_arrayElement,
    Wt.prototype._setValue_arrayElement_setNeedsUpdate,
    Wt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    Wt.prototype._setValue_fromArray,
    Wt.prototype._setValue_fromArray_setNeedsUpdate,
    Wt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class l4 {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = rr(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let i = 0, r = arguments.length; i !== r; ++i)
      e[arguments[i].uuid] = i;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, i = this._paths, r = this._parsedPaths, s = this._bindings, o = s.length;
    let a, c = e.length, f = this.nCachedObjects_;
    for (let h = 0, d = arguments.length; h !== d; ++h) {
      const p = arguments[h], v = p.uuid;
      let y = t[v];
      if (y === void 0) {
        y = c++, t[v] = y, e.push(p);
        for (let w = 0, x = o; w !== x; ++w)
          s[w].push(new Wt(p, i[w], r[w]));
      } else if (y < f) {
        a = e[y];
        const w = --f, x = e[w];
        t[x.uuid] = y, e[y] = x, t[v] = w, e[w] = p;
        for (let g = 0, S = o; g !== S; ++g) {
          const M = s[g], T = M[w];
          let U = M[y];
          M[y] = T, U === void 0 && (U = new Wt(p, i[g], r[g])), M[w] = U;
        }
      } else
        e[y] !== a && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = f;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, i = this._bindings, r = i.length;
    let s = this.nCachedObjects_;
    for (let o = 0, a = arguments.length; o !== a; ++o) {
      const c = arguments[o], f = c.uuid, h = t[f];
      if (h !== void 0 && h >= s) {
        const d = s++, p = e[d];
        t[p.uuid] = h, e[h] = p, t[f] = d, e[d] = c;
        for (let v = 0, y = r; v !== y; ++v) {
          const w = i[v], x = w[d], g = w[h];
          w[h] = x, w[d] = g;
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, i = this._bindings, r = i.length;
    let s = this.nCachedObjects_, o = e.length;
    for (let a = 0, c = arguments.length; a !== c; ++a) {
      const f = arguments[a], h = f.uuid, d = t[h];
      if (d !== void 0)
        if (delete t[h], d < s) {
          const p = --s, v = e[p], y = --o, w = e[y];
          t[v.uuid] = d, e[d] = v, t[w.uuid] = p, e[p] = w, e.pop();
          for (let x = 0, g = r; x !== g; ++x) {
            const S = i[x], M = S[p], T = S[y];
            S[d] = M, S[p] = T, S.pop();
          }
        } else {
          const p = --o, v = e[p];
          p > 0 && (t[v.uuid] = d), e[d] = v, e.pop();
          for (let y = 0, w = r; y !== w; ++y) {
            const x = i[y];
            x[d] = x[p], x.pop();
          }
        }
    }
    this.nCachedObjects_ = s;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const i = this._bindingsIndicesByPath;
    let r = i[e];
    const s = this._bindings;
    if (r !== void 0)
      return s[r];
    const o = this._paths, a = this._parsedPaths, c = this._objects, f = c.length, h = this.nCachedObjects_, d = new Array(f);
    r = s.length, i[e] = r, o.push(e), a.push(t), s.push(d);
    for (let p = h, v = c.length; p !== v; ++p) {
      const y = c[p];
      d[p] = new Wt(y, e, t);
    }
    return d;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, i = t[e];
    if (i !== void 0) {
      const r = this._paths, s = this._parsedPaths, o = this._bindings, a = o.length - 1, c = o[a], f = e[a];
      t[f] = i, o[i] = c, o.pop(), s[i] = s[a], s.pop(), r[i] = r[a], r.pop();
    }
  }
}
class Ub {
  constructor(e, t, i = null, r = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = i, this.blendMode = r;
    const s = t.tracks, o = s.length, a = new Array(o), c = {
      endingStart: ba,
      endingEnd: ba
    };
    for (let f = 0; f !== o; ++f) {
      const h = s[f].createInterpolant(null);
      a[f] = h, h.settings = c;
    }
    this._interpolantSettings = c, this._interpolants = a, this._propertyBindings = new Array(o), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = y2, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, i) {
    if (e.fadeOut(t), this.fadeIn(t), i) {
      const r = this._clip.duration, s = e._clip.duration, o = s / r, a = r / s;
      e.warp(1, o, t), this.warp(a, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, i) {
    return e.crossFadeFrom(this, t, i);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, i) {
    const r = this._mixer, s = r.time, o = this.timeScale;
    let a = this._timeScaleInterpolant;
    a === null && (a = r._lendControlInterpolant(), this._timeScaleInterpolant = a);
    const c = a.parameterPositions, f = a.sampleValues;
    return c[0] = s, c[1] = s + i, f[0] = e / o, f[1] = t / o, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, i, r) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const s = this._startTime;
    if (s !== null) {
      const c = (e - s) * i;
      c < 0 || i === 0 ? t = 0 : (this._startTime = null, t = i * c);
    }
    t *= this._updateTimeScale(e);
    const o = this._updateTime(t), a = this._updateWeight(e);
    if (a > 0) {
      const c = this._interpolants, f = this._propertyBindings;
      switch (this.blendMode) {
        case r1:
          for (let h = 0, d = c.length; h !== d; ++h)
            c[h].evaluate(o), f[h].accumulateAdditive(a);
          break;
        case Cg:
        default:
          for (let h = 0, d = c.length; h !== d; ++h)
            c[h].evaluate(o), f[h].accumulate(r, a);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const i = this._weightInterpolant;
      if (i !== null) {
        const r = i.evaluate(e)[0];
        t *= r, e > i.parameterPositions[1] && (this.stopFading(), r === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const i = this._timeScaleInterpolant;
      if (i !== null) {
        const r = i.evaluate(e)[0];
        t *= r, e > i.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, i = this.loop;
    let r = this.time + e, s = this._loopCount;
    const o = i === _2;
    if (e === 0)
      return s === -1 ? r : o && (s & 1) === 1 ? t - r : r;
    if (i === v2) {
      s === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (r >= t)
          r = t;
        else if (r < 0)
          r = 0;
        else {
          this.time = r;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = r, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (s === -1 && (e >= 0 ? (s = 0, this._setEndings(!0, this.repetitions === 0, o)) : this._setEndings(this.repetitions === 0, !0, o)), r >= t || r < 0) {
        const a = Math.floor(r / t);
        r -= t * a, s += Math.abs(a);
        const c = this.repetitions - s;
        if (c <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, r = e > 0 ? t : 0, this.time = r, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (c === 1) {
            const f = e < 0;
            this._setEndings(f, !f, o);
          } else
            this._setEndings(!1, !1, o);
          this._loopCount = s, this.time = r, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: a
          });
        }
      } else
        this.time = r;
      if (o && (s & 1) === 1)
        return t - r;
    }
    return r;
  }
  _setEndings(e, t, i) {
    const r = this._interpolantSettings;
    i ? (r.endingStart = Pa, r.endingEnd = Pa) : (e ? r.endingStart = this.zeroSlopeAtStart ? Pa : ba : r.endingStart = Df, t ? r.endingEnd = this.zeroSlopeAtEnd ? Pa : ba : r.endingEnd = Df);
  }
  _scheduleFading(e, t, i) {
    const r = this._mixer, s = r.time;
    let o = this._weightInterpolant;
    o === null && (o = r._lendControlInterpolant(), this._weightInterpolant = o);
    const a = o.parameterPositions, c = o.sampleValues;
    return a[0] = s, c[0] = t, a[1] = s + e, c[1] = i, this;
  }
}
const u4 = new Float32Array(1);
class c4 extends _s {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const i = e._localRoot || this._root, r = e._clip.tracks, s = r.length, o = e._propertyBindings, a = e._interpolants, c = i.uuid, f = this._bindingsByRootAndName;
    let h = f[c];
    h === void 0 && (h = {}, f[c] = h);
    for (let d = 0; d !== s; ++d) {
      const p = r[d], v = p.name;
      let y = h[v];
      if (y !== void 0)
        ++y.referenceCount, o[d] = y;
      else {
        if (y = o[d], y !== void 0) {
          y._cacheIndex === null && (++y.referenceCount, this._addInactiveBinding(y, c, v));
          continue;
        }
        const w = t && t._propertyBindings[d].binding.parsedPath;
        y = new Nb(
          Wt.create(i, v, w),
          p.ValueTypeName,
          p.getValueSize()
        ), ++y.referenceCount, this._addInactiveBinding(y, c, v), o[d] = y;
      }
      a[d].resultBuffer = y.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const i = (e._localRoot || this._root).uuid, r = e._clip.uuid, s = this._actionsByClip[r];
        this._bindAction(
          e,
          s && s.knownActions[0]
        ), this._addInactiveAction(e, r, i);
      }
      const t = e._propertyBindings;
      for (let i = 0, r = t.length; i !== r; ++i) {
        const s = t[i];
        s.useCount++ === 0 && (this._lendBinding(s), s.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let i = 0, r = t.length; i !== r; ++i) {
        const s = t[i];
        --s.useCount === 0 && (s.restoreOriginalState(), this._takeBackBinding(s));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, i) {
    const r = this._actions, s = this._actionsByClip;
    let o = s[t];
    if (o === void 0)
      o = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, s[t] = o;
    else {
      const a = o.knownActions;
      e._byClipCacheIndex = a.length, a.push(e);
    }
    e._cacheIndex = r.length, r.push(e), o.actionByRoot[i] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, i = t[t.length - 1], r = e._cacheIndex;
    i._cacheIndex = r, t[r] = i, t.pop(), e._cacheIndex = null;
    const s = e._clip.uuid, o = this._actionsByClip, a = o[s], c = a.knownActions, f = c[c.length - 1], h = e._byClipCacheIndex;
    f._byClipCacheIndex = h, c[h] = f, c.pop(), e._byClipCacheIndex = null;
    const d = a.actionByRoot, p = (e._localRoot || this._root).uuid;
    delete d[p], c.length === 0 && delete o[s], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let i = 0, r = t.length; i !== r; ++i) {
      const s = t[i];
      --s.referenceCount === 0 && this._removeInactiveBinding(s);
    }
  }
  _lendAction(e) {
    const t = this._actions, i = e._cacheIndex, r = this._nActiveActions++, s = t[r];
    e._cacheIndex = r, t[r] = e, s._cacheIndex = i, t[i] = s;
  }
  _takeBackAction(e) {
    const t = this._actions, i = e._cacheIndex, r = --this._nActiveActions, s = t[r];
    e._cacheIndex = r, t[r] = e, s._cacheIndex = i, t[i] = s;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, i) {
    const r = this._bindingsByRootAndName, s = this._bindings;
    let o = r[t];
    o === void 0 && (o = {}, r[t] = o), o[i] = e, e._cacheIndex = s.length, s.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, i = e.binding, r = i.rootNode.uuid, s = i.path, o = this._bindingsByRootAndName, a = o[r], c = t[t.length - 1], f = e._cacheIndex;
    c._cacheIndex = f, t[f] = c, t.pop(), delete a[s], Object.keys(a).length === 0 && delete o[r];
  }
  _lendBinding(e) {
    const t = this._bindings, i = e._cacheIndex, r = this._nActiveBindings++, s = t[r];
    e._cacheIndex = r, t[r] = e, s._cacheIndex = i, t[i] = s;
  }
  _takeBackBinding(e) {
    const t = this._bindings, i = e._cacheIndex, r = --this._nActiveBindings, s = t[r];
    e._cacheIndex = r, t[r] = e, s._cacheIndex = i, t[i] = s;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let i = e[t];
    return i === void 0 && (i = new R1(
      new Float32Array(2),
      new Float32Array(2),
      1,
      u4
    ), i.__cacheIndex = t, e[t] = i), i;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, i = e.__cacheIndex, r = --this._nActiveControlInterpolants, s = t[r];
    e.__cacheIndex = r, t[r] = e, s.__cacheIndex = i, t[i] = s;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, i) {
    const r = t || this._root, s = r.uuid;
    let o = typeof e == "string" ? Yf.findByName(r, e) : e;
    const a = o !== null ? o.uuid : e, c = this._actionsByClip[a];
    let f = null;
    if (i === void 0 && (o !== null ? i = o.blendMode : i = Cg), c !== void 0) {
      const d = c.actionByRoot[s];
      if (d !== void 0 && d.blendMode === i)
        return d;
      f = c.knownActions[0], o === null && (o = f._clip);
    }
    if (o === null)
      return null;
    const h = new Ub(this, o, t, i);
    return this._bindAction(h, f), this._addInactiveAction(h, a, s), h;
  }
  // get an existing action
  existingAction(e, t) {
    const i = t || this._root, r = i.uuid, s = typeof e == "string" ? Yf.findByName(i, e) : e, o = s ? s.uuid : e, a = this._actionsByClip[o];
    return a !== void 0 && a.actionByRoot[r] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let i = t - 1; i >= 0; --i)
      e[i].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, i = this._nActiveActions, r = this.time += e, s = Math.sign(e), o = this._accuIndex ^= 1;
    for (let f = 0; f !== i; ++f)
      t[f]._update(r, e, s, o);
    const a = this._bindings, c = this._nActiveBindings;
    for (let f = 0; f !== c; ++f)
      a[f].apply(o);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, i = e.uuid, r = this._actionsByClip, s = r[i];
    if (s !== void 0) {
      const o = s.knownActions;
      for (let a = 0, c = o.length; a !== c; ++a) {
        const f = o[a];
        this._deactivateAction(f);
        const h = f._cacheIndex, d = t[t.length - 1];
        f._cacheIndex = null, f._byClipCacheIndex = null, d._cacheIndex = h, t[h] = d, t.pop(), this._removeInactiveBindingsForAction(f);
      }
      delete r[i];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, i = this._actionsByClip;
    for (const o in i) {
      const a = i[o].actionByRoot, c = a[t];
      c !== void 0 && (this._deactivateAction(c), this._removeInactiveAction(c));
    }
    const r = this._bindingsByRootAndName, s = r[t];
    if (s !== void 0)
      for (const o in s) {
        const a = s[o];
        a.restoreOriginalState(), this._removeInactiveBinding(a);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const i = this.existingAction(e, t);
    i !== null && (this._deactivateAction(i), this._removeInactiveAction(i));
  }
}
class O1 {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new O1(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let f4 = 0;
class h4 extends _s {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: f4++ }), this.name = "", this.usage = Ff, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let i = 0, r = t.length; i < r; i++) {
      const s = Array.isArray(t[i]) ? t[i] : [t[i]];
      for (let o = 0; o < s.length; o++)
        this.uniforms.push(s[o].clone());
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class d4 extends Ng {
  constructor(e, t, i = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = i;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class p4 {
  constructor(e, t, i, r, s) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = i, this.elementSize = r, this.count = s, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
const iT = /* @__PURE__ */ new yt();
class F1 {
  constructor(e, t, i = 0, r = 1 / 0) {
    this.ray = new el(e, t), this.near = i, this.far = r, this.camera = null, this.layers = new Ba(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  setFromXRController(e) {
    return iT.identity().extractRotation(e.matrixWorld), this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(iT), this;
  }
  intersectObject(e, t = !0, i = []) {
    return V_(e, this, i, t), i.sort(rT), i;
  }
  intersectObjects(e, t = !0, i = []) {
    for (let r = 0, s = e.length; r < s; r++)
      V_(e[r], this, i, t);
    return i.sort(rT), i;
  }
}
function rT(n, e) {
  return n.distance - e.distance;
}
function V_(n, e, t, i) {
  let r = !0;
  if (n.layers.test(e.layers) && n.raycast(e, t) === !1 && (r = !1), r === !0 && i === !0) {
    const s = n.children;
    for (let o = 0, a = s.length; o < a; o++)
      V_(s[o], e, t, !0);
  }
}
class tg {
  constructor(e = 1, t = 0, i = 0) {
    return this.radius = e, this.phi = t, this.theta = i, this;
  }
  set(e, t, i) {
    return this.radius = e, this.phi = t, this.theta = i, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, i) {
    return this.radius = Math.sqrt(e * e + t * t + i * i), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, i), this.phi = Math.acos(Cn(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class m4 {
  constructor(e = 1, t = 0, i = 0) {
    return this.radius = e, this.theta = t, this.y = i, this;
  }
  set(e, t, i) {
    return this.radius = e, this.theta = t, this.y = i, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, i) {
    return this.radius = Math.sqrt(e * e + i * i), this.theta = Math.atan2(e, i), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const sT = /* @__PURE__ */ new _e();
class g4 {
  constructor(e = new _e(1 / 0, 1 / 0), t = new _e(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, i = e.length; t < i; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const i = sT.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, sT).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const oT = /* @__PURE__ */ new B(), vp = /* @__PURE__ */ new B();
class v4 {
  constructor(e = new B(), t = new B()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    oT.subVectors(e, this.start), vp.subVectors(this.end, this.start);
    const i = vp.dot(vp);
    let s = vp.dot(oT) / i;
    return t && (s = Cn(s, 0, 1)), s;
  }
  closestPointToPoint(e, t, i) {
    const r = this.closestPointToPointParameter(e, t);
    return this.delta(i).multiplyScalar(r).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const aT = /* @__PURE__ */ new B();
class y4 extends Yt {
  constructor(e, t) {
    super(), this.light = e, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const i = new Dt(), r = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let o = 0, a = 1, c = 32; o < c; o++, a++) {
      const f = o / c * Math.PI * 2, h = a / c * Math.PI * 2;
      r.push(
        Math.cos(f),
        Math.sin(f),
        1,
        Math.cos(h),
        Math.sin(h),
        1
      );
    }
    i.setAttribute("position", new rt(r, 3));
    const s = new Li({ fog: !1, toneMapped: !1 });
    this.cone = new xs(i, s), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), this.parent ? (this.parent.updateWorldMatrix(!0), this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)) : this.matrix.copy(this.light.matrixWorld), this.matrixWorld.copy(this.light.matrixWorld);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), aT.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(aT), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const po = /* @__PURE__ */ new B(), yp = /* @__PURE__ */ new yt(), dy = /* @__PURE__ */ new yt();
class _4 extends xs {
  constructor(e) {
    const t = Ob(e), i = new Dt(), r = [], s = [], o = new Qe(0, 0, 1), a = new Qe(0, 1, 0);
    for (let f = 0; f < t.length; f++) {
      const h = t[f];
      h.parent && h.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), s.push(o.r, o.g, o.b), s.push(a.r, a.g, a.b));
    }
    i.setAttribute("position", new rt(r, 3)), i.setAttribute("color", new rt(s, 3));
    const c = new Li({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(i, c), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, i = this.geometry, r = i.getAttribute("position");
    dy.copy(this.root.matrixWorld).invert();
    for (let s = 0, o = 0; s < t.length; s++) {
      const a = t[s];
      a.parent && a.parent.isBone && (yp.multiplyMatrices(dy, a.matrixWorld), po.setFromMatrixPosition(yp), r.setXYZ(o, po.x, po.y, po.z), yp.multiplyMatrices(dy, a.parent.matrixWorld), po.setFromMatrixPosition(yp), r.setXYZ(o + 1, po.x, po.y, po.z), o += 2);
    }
    i.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function Ob(n) {
  const e = [];
  n.isBone === !0 && e.push(n);
  for (let t = 0; t < n.children.length; t++)
    e.push.apply(e, Ob(n.children[t]));
  return e;
}
class x4 extends Sn {
  constructor(e, t, i) {
    const r = new mh(t, 4, 2), s = new Ti({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(r, s), this.light = e, this.color = i, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const S4 = /* @__PURE__ */ new B(), lT = /* @__PURE__ */ new Qe(), uT = /* @__PURE__ */ new Qe();
class M4 extends Yt {
  constructor(e, t, i) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "HemisphereLightHelper";
    const r = new ph(t);
    r.rotateY(Math.PI * 0.5), this.material = new Ti({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const s = r.getAttribute("position"), o = new Float32Array(s.count * 3);
    r.setAttribute("color", new nn(o, 3)), this.add(new Sn(r, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      lT.copy(this.light.color), uT.copy(this.light.groundColor);
      for (let i = 0, r = t.count; i < r; i++) {
        const s = i < r / 2 ? lT : uT;
        t.setXYZ(i, s.r, s.g, s.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(S4.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class w4 extends xs {
  constructor(e = 10, t = 10, i = 4473924, r = 8947848) {
    i = new Qe(i), r = new Qe(r);
    const s = t / 2, o = e / t, a = e / 2, c = [], f = [];
    for (let p = 0, v = 0, y = -a; p <= t; p++, y += o) {
      c.push(-a, 0, y, a, 0, y), c.push(y, 0, -a, y, 0, a);
      const w = p === s ? i : r;
      w.toArray(f, v), v += 3, w.toArray(f, v), v += 3, w.toArray(f, v), v += 3, w.toArray(f, v), v += 3;
    }
    const h = new Dt();
    h.setAttribute("position", new rt(c, 3)), h.setAttribute("color", new rt(f, 3));
    const d = new Li({ vertexColors: !0, toneMapped: !1 });
    super(h, d), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class E4 extends xs {
  constructor(e = 10, t = 16, i = 8, r = 64, s = 4473924, o = 8947848) {
    s = new Qe(s), o = new Qe(o);
    const a = [], c = [];
    if (t > 1)
      for (let d = 0; d < t; d++) {
        const p = d / t * (Math.PI * 2), v = Math.sin(p) * e, y = Math.cos(p) * e;
        a.push(0, 0, 0), a.push(v, 0, y);
        const w = d & 1 ? s : o;
        c.push(w.r, w.g, w.b), c.push(w.r, w.g, w.b);
      }
    for (let d = 0; d < i; d++) {
      const p = d & 1 ? s : o, v = e - e / i * d;
      for (let y = 0; y < r; y++) {
        let w = y / r * (Math.PI * 2), x = Math.sin(w) * v, g = Math.cos(w) * v;
        a.push(x, 0, g), c.push(p.r, p.g, p.b), w = (y + 1) / r * (Math.PI * 2), x = Math.sin(w) * v, g = Math.cos(w) * v, a.push(x, 0, g), c.push(p.r, p.g, p.b);
      }
    }
    const f = new Dt();
    f.setAttribute("position", new rt(a, 3)), f.setAttribute("color", new rt(c, 3));
    const h = new Li({ vertexColors: !0, toneMapped: !1 });
    super(f, h), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const cT = /* @__PURE__ */ new B(), _p = /* @__PURE__ */ new B(), fT = /* @__PURE__ */ new B();
class T4 extends Yt {
  constructor(e, t, i) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let r = new Dt();
    r.setAttribute("position", new rt([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const s = new Li({ fog: !1, toneMapped: !1 });
    this.lightPlane = new zo(r, s), this.add(this.lightPlane), r = new Dt(), r.setAttribute("position", new rt([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new zo(r, s), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), cT.setFromMatrixPosition(this.light.matrixWorld), _p.setFromMatrixPosition(this.light.target.matrixWorld), fT.subVectors(_p, cT), this.lightPlane.lookAt(_p), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(_p), this.targetLine.scale.z = fT.length();
  }
}
const xp = /* @__PURE__ */ new B(), Tn = /* @__PURE__ */ new lh();
class A4 extends xs {
  constructor(e) {
    const t = new Dt(), i = new Li({ color: 16777215, vertexColors: !0, toneMapped: !1 }), r = [], s = [], o = {};
    a("n1", "n2"), a("n2", "n4"), a("n4", "n3"), a("n3", "n1"), a("f1", "f2"), a("f2", "f4"), a("f4", "f3"), a("f3", "f1"), a("n1", "f1"), a("n2", "f2"), a("n3", "f3"), a("n4", "f4"), a("p", "n1"), a("p", "n2"), a("p", "n3"), a("p", "n4"), a("u1", "u2"), a("u2", "u3"), a("u3", "u1"), a("c", "t"), a("p", "c"), a("cn1", "cn2"), a("cn3", "cn4"), a("cf1", "cf2"), a("cf3", "cf4");
    function a(y, w) {
      c(y), c(w);
    }
    function c(y) {
      r.push(0, 0, 0), s.push(0, 0, 0), o[y] === void 0 && (o[y] = []), o[y].push(r.length / 3 - 1);
    }
    t.setAttribute("position", new rt(r, 3)), t.setAttribute("color", new rt(s, 3)), super(t, i), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = o, this.update();
    const f = new Qe(16755200), h = new Qe(16711680), d = new Qe(43775), p = new Qe(16777215), v = new Qe(3355443);
    this.setColors(f, h, d, p, v);
  }
  setColors(e, t, i, r, s) {
    const a = this.geometry.getAttribute("color");
    a.setXYZ(0, e.r, e.g, e.b), a.setXYZ(1, e.r, e.g, e.b), a.setXYZ(2, e.r, e.g, e.b), a.setXYZ(3, e.r, e.g, e.b), a.setXYZ(4, e.r, e.g, e.b), a.setXYZ(5, e.r, e.g, e.b), a.setXYZ(6, e.r, e.g, e.b), a.setXYZ(7, e.r, e.g, e.b), a.setXYZ(8, e.r, e.g, e.b), a.setXYZ(9, e.r, e.g, e.b), a.setXYZ(10, e.r, e.g, e.b), a.setXYZ(11, e.r, e.g, e.b), a.setXYZ(12, e.r, e.g, e.b), a.setXYZ(13, e.r, e.g, e.b), a.setXYZ(14, e.r, e.g, e.b), a.setXYZ(15, e.r, e.g, e.b), a.setXYZ(16, e.r, e.g, e.b), a.setXYZ(17, e.r, e.g, e.b), a.setXYZ(18, e.r, e.g, e.b), a.setXYZ(19, e.r, e.g, e.b), a.setXYZ(20, e.r, e.g, e.b), a.setXYZ(21, e.r, e.g, e.b), a.setXYZ(22, e.r, e.g, e.b), a.setXYZ(23, e.r, e.g, e.b), a.setXYZ(24, t.r, t.g, t.b), a.setXYZ(25, t.r, t.g, t.b), a.setXYZ(26, t.r, t.g, t.b), a.setXYZ(27, t.r, t.g, t.b), a.setXYZ(28, t.r, t.g, t.b), a.setXYZ(29, t.r, t.g, t.b), a.setXYZ(30, t.r, t.g, t.b), a.setXYZ(31, t.r, t.g, t.b), a.setXYZ(32, i.r, i.g, i.b), a.setXYZ(33, i.r, i.g, i.b), a.setXYZ(34, i.r, i.g, i.b), a.setXYZ(35, i.r, i.g, i.b), a.setXYZ(36, i.r, i.g, i.b), a.setXYZ(37, i.r, i.g, i.b), a.setXYZ(38, r.r, r.g, r.b), a.setXYZ(39, r.r, r.g, r.b), a.setXYZ(40, s.r, s.g, s.b), a.setXYZ(41, s.r, s.g, s.b), a.setXYZ(42, s.r, s.g, s.b), a.setXYZ(43, s.r, s.g, s.b), a.setXYZ(44, s.r, s.g, s.b), a.setXYZ(45, s.r, s.g, s.b), a.setXYZ(46, s.r, s.g, s.b), a.setXYZ(47, s.r, s.g, s.b), a.setXYZ(48, s.r, s.g, s.b), a.setXYZ(49, s.r, s.g, s.b), a.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, i = 1, r = 1;
    Tn.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), Pn("c", t, e, Tn, 0, 0, -1), Pn("t", t, e, Tn, 0, 0, 1), Pn("n1", t, e, Tn, -i, -r, -1), Pn("n2", t, e, Tn, i, -r, -1), Pn("n3", t, e, Tn, -i, r, -1), Pn("n4", t, e, Tn, i, r, -1), Pn("f1", t, e, Tn, -i, -r, 1), Pn("f2", t, e, Tn, i, -r, 1), Pn("f3", t, e, Tn, -i, r, 1), Pn("f4", t, e, Tn, i, r, 1), Pn("u1", t, e, Tn, i * 0.7, r * 1.1, -1), Pn("u2", t, e, Tn, -i * 0.7, r * 1.1, -1), Pn("u3", t, e, Tn, 0, r * 2, -1), Pn("cf1", t, e, Tn, -i, 0, 1), Pn("cf2", t, e, Tn, i, 0, 1), Pn("cf3", t, e, Tn, 0, -r, 1), Pn("cf4", t, e, Tn, 0, r, 1), Pn("cn1", t, e, Tn, -i, 0, -1), Pn("cn2", t, e, Tn, i, 0, -1), Pn("cn3", t, e, Tn, 0, -r, -1), Pn("cn4", t, e, Tn, 0, r, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function Pn(n, e, t, i, r, s, o) {
  xp.set(r, s, o).unproject(i);
  const a = e[n];
  if (a !== void 0) {
    const c = t.getAttribute("position");
    for (let f = 0, h = a.length; f < h; f++)
      c.setXYZ(a[f], xp.x, xp.y, xp.z);
  }
}
const Sp = /* @__PURE__ */ new Ri();
class C4 extends xs {
  constructor(e, t = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = new Float32Array(8 * 3), s = new Dt();
    s.setIndex(new nn(i, 1)), s.setAttribute("position", new nn(r, 3)), super(s, new Li({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && Sp.setFromObject(this.object), Sp.isEmpty())
      return;
    const t = Sp.min, i = Sp.max, r = this.geometry.attributes.position, s = r.array;
    s[0] = i.x, s[1] = i.y, s[2] = i.z, s[3] = t.x, s[4] = i.y, s[5] = i.z, s[6] = t.x, s[7] = t.y, s[8] = i.z, s[9] = i.x, s[10] = t.y, s[11] = i.z, s[12] = i.x, s[13] = i.y, s[14] = t.z, s[15] = t.x, s[16] = i.y, s[17] = t.z, s[18] = t.x, s[19] = t.y, s[20] = t.z, s[21] = i.x, s[22] = t.y, s[23] = t.z, r.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class R4 extends xs {
  constructor(e, t = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], s = new Dt();
    s.setIndex(new nn(i, 1)), s.setAttribute("position", new rt(r, 3)), super(s, new Li({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class b4 extends zo {
  constructor(e, t = 1, i = 16776960) {
    const r = i, s = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], o = new Dt();
    o.setAttribute("position", new rt(s, 3)), o.computeBoundingSphere(), super(o, new Li({ color: r, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const a = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], c = new Dt();
    c.setAttribute("position", new rt(a, 3)), c.computeBoundingSphere(), this.add(new Sn(c, new Ti({ color: r, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const hT = /* @__PURE__ */ new B();
let Mp, py;
class P4 extends Yt {
  // dir is assumed to be normalized
  constructor(e = new B(0, 0, 1), t = new B(0, 0, 0), i = 1, r = 16776960, s = i * 0.2, o = s * 0.2) {
    super(), this.type = "ArrowHelper", Mp === void 0 && (Mp = new Dt(), Mp.setAttribute("position", new rt([0, 0, 0, 0, 1, 0], 3)), py = new Fu(0, 0.5, 1, 5, 1), py.translate(0, -0.5, 0)), this.position.copy(t), this.line = new zo(Mp, new Li({ color: r, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Sn(py, new Ti({ color: r, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(i, s, o);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      hT.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(hT, t);
    }
  }
  setLength(e, t = e * 0.2, i = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(i, t, i), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class I4 extends xs {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], i = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], r = new Dt();
    r.setAttribute("position", new rt(t, 3)), r.setAttribute("color", new rt(i, 3));
    const s = new Li({ vertexColors: !0, toneMapped: !1 });
    super(r, s), this.type = "AxesHelper";
  }
  setColors(e, t, i) {
    const r = new Qe(), s = this.geometry.attributes.color.array;
    return r.set(e), r.toArray(s, 0), r.toArray(s, 3), r.set(t), r.toArray(s, 6), r.toArray(s, 9), r.set(i), r.toArray(s, 12), r.toArray(s, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class L4 {
  constructor() {
    this.type = "ShapePath", this.color = new Qe(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new Bf(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, i, r) {
    return this.currentPath.quadraticCurveTo(e, t, i, r), this;
  }
  bezierCurveTo(e, t, i, r, s, o) {
    return this.currentPath.bezierCurveTo(e, t, i, r, s, o), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(g) {
      const S = [];
      for (let M = 0, T = g.length; M < T; M++) {
        const U = g[M], P = new Ha();
        P.curves = U.curves, S.push(P);
      }
      return S;
    }
    function i(g, S) {
      const M = S.length;
      let T = !1;
      for (let U = M - 1, P = 0; P < M; U = P++) {
        let D = S[U], R = S[P], C = R.x - D.x, A = R.y - D.y;
        if (Math.abs(A) > Number.EPSILON) {
          if (A < 0 && (D = S[P], C = -C, R = S[U], A = -A), g.y < D.y || g.y > R.y)
            continue;
          if (g.y === D.y) {
            if (g.x === D.x)
              return !0;
          } else {
            const N = A * (g.x - D.x) - C * (g.y - D.y);
            if (N === 0)
              return !0;
            if (N < 0)
              continue;
            T = !T;
          }
        } else {
          if (g.y !== D.y)
            continue;
          if (R.x <= g.x && g.x <= D.x || D.x <= g.x && g.x <= R.x)
            return !0;
        }
      }
      return T;
    }
    const r = gs.isClockWise, s = this.subPaths;
    if (s.length === 0)
      return [];
    let o, a, c;
    const f = [];
    if (s.length === 1)
      return a = s[0], c = new Ha(), c.curves = a.curves, f.push(c), f;
    let h = !r(s[0].getPoints());
    h = e ? !h : h;
    const d = [], p = [];
    let v = [], y = 0, w;
    p[y] = void 0, v[y] = [];
    for (let g = 0, S = s.length; g < S; g++)
      a = s[g], w = a.getPoints(), o = r(w), o = e ? !o : o, o ? (!h && p[y] && y++, p[y] = { s: new Ha(), p: w }, p[y].s.curves = a.curves, h && y++, v[y] = []) : v[y].push({ h: a, p: w[0] });
    if (!p[0])
      return t(s);
    if (p.length > 1) {
      let g = !1, S = 0;
      for (let M = 0, T = p.length; M < T; M++)
        d[M] = [];
      for (let M = 0, T = p.length; M < T; M++) {
        const U = v[M];
        for (let P = 0; P < U.length; P++) {
          const D = U[P];
          let R = !0;
          for (let C = 0; C < p.length; C++)
            i(D.p, p[C].p) && (M !== C && S++, R ? (R = !1, d[C].push(D)) : g = !0);
          R && d[M].push(D);
        }
      }
      S > 0 && g === !1 && (v = d);
    }
    let x;
    for (let g = 0, S = p.length; g < S; g++) {
      c = p[g].s, f.push(c), x = v[g];
      for (let M = 0, T = x.length; M < T; M++)
        c.holes.push(x[M].h);
    }
    return f;
  }
}
class D4 extends ar {
  // @deprecated, r162
  constructor(e = 1, t = 1, i = 1, r = {}) {
    console.warn('THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.'), super(e, t, { ...r, count: i }), this.isWebGLMultipleRenderTargets = !0;
  }
  get texture() {
    return this.textures;
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: nh
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = nh);
const N4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: Zx,
  AddEquation: So,
  AddOperation: u2,
  AdditiveAnimationBlendMode: r1,
  AdditiveBlending: C_,
  AgXToneMapping: p2,
  AlphaFormat: Qx,
  AlwaysCompare: b2,
  AlwaysDepth: n2,
  AlwaysStencilFunc: L_,
  AmbientLight: Cb,
  AnimationAction: Ub,
  AnimationClip: Yf,
  AnimationLoader: kz,
  AnimationMixer: c4,
  AnimationObjectGroup: l4,
  AnimationUtils: Nz,
  ArcCurve: Q2,
  ArrayCamera: W2,
  ArrowHelper: P4,
  AttachedBindMode: P_,
  Audio: Db,
  AudioAnalyser: Qz,
  AudioContext: L1,
  AudioListener: Zz,
  AudioLoader: Yz,
  AxesHelper: I4,
  BackSide: Ci,
  BasicDepthPacking: x2,
  BasicShadowMap: OR,
  BatchedMesh: Z2,
  Bone: Ug,
  BooleanKeyframeTrack: tl,
  Box2: g4,
  Box3: Ri,
  Box3Helper: R4,
  BoxGeometry: Wo,
  BoxHelper: C4,
  BufferAttribute: nn,
  BufferGeometry: Dt,
  BufferGeometryLoader: Lb,
  ByteType: Sg,
  Cache: Vs,
  Camera: lh,
  CameraHelper: A4,
  CanvasTexture: rz,
  CapsuleGeometry: kg,
  CatmullRomCurve3: $2,
  CineonToneMapping: h2,
  CircleGeometry: zg,
  ClampToEdgeWrapping: Bn,
  Clock: D1,
  Color: Qe,
  ColorKeyframeTrack: b1,
  ColorManagement: Jt,
  CompressedArrayTexture: nz,
  CompressedCubeTexture: iz,
  CompressedTexture: Og,
  CompressedTextureLoader: zz,
  ConeGeometry: Bg,
  ConstantAlphaFactor: $R,
  ConstantColorFactor: JR,
  CubeCamera: F2,
  CubeReflectionMapping: vs,
  CubeRefractionMapping: ko,
  CubeTexture: uh,
  CubeTextureLoader: Mb,
  CubeUVReflectionMapping: Uu,
  CubicBezierCurve: S1,
  CubicBezierCurve3: eb,
  CubicInterpolant: _b,
  CullFaceBack: A_,
  CullFaceFront: UR,
  CullFaceFrontBack: zL,
  CullFaceNone: NR,
  Curve: Zr,
  CurvePath: nb,
  CustomBlending: FR,
  CustomToneMapping: d2,
  CylinderGeometry: Fu,
  Cylindrical: m4,
  Data3DTexture: u1,
  DataArrayTexture: bg,
  DataTexture: qr,
  DataTextureLoader: P1,
  DataUtils: La,
  DecrementStencilOp: KL,
  DecrementWrapStencilOp: QL,
  DefaultLoadingManager: uu,
  DepthFormat: ka,
  DepthStencilFormat: ja,
  DepthTexture: d1,
  DetachedBindMode: g2,
  DirectionalLight: Ab,
  DirectionalLightHelper: T4,
  DiscreteInterpolant: xb,
  DisplayP3ColorSpace: Rg,
  DodecahedronGeometry: Hg,
  DoubleSide: Wr,
  DstAlphaFactor: YR,
  DstColorFactor: jR,
  DynamicCopyUsage: dD,
  DynamicDrawUsage: aD,
  DynamicReadUsage: cD,
  EdgesGeometry: ib,
  EllipseCurve: Fg,
  EqualCompare: T2,
  EqualDepth: r2,
  EqualStencilFunc: nD,
  EquirectangularReflectionMapping: Tu,
  EquirectangularRefractionMapping: bf,
  Euler: bi,
  EventDispatcher: _s,
  ExtrudeGeometry: Gg,
  FileLoader: sr,
  Float16BufferAttribute: $D,
  Float32BufferAttribute: rt,
  FloatType: xn,
  Fog: Dg,
  FogExp2: Lg,
  FramebufferTexture: tz,
  FrontSide: js,
  Frustum: ch,
  GLBufferAttribute: p4,
  GLSL1: mD,
  GLSL3: D_,
  GreaterCompare: A2,
  GreaterDepth: o2,
  GreaterEqualCompare: R2,
  GreaterEqualDepth: s2,
  GreaterEqualStencilFunc: oD,
  GreaterStencilFunc: rD,
  GridHelper: w4,
  Group: au,
  HalfFloatType: $n,
  HemisphereLight: wb,
  HemisphereLightHelper: M4,
  IcosahedronGeometry: dh,
  ImageBitmapLoader: Xz,
  ImageLoader: qf,
  ImageUtils: L2,
  IncrementStencilOp: ZL,
  IncrementWrapStencilOp: JL,
  InstancedBufferAttribute: Pu,
  InstancedBufferGeometry: Ib,
  InstancedInterleavedBuffer: d4,
  InstancedMesh: j2,
  Int16BufferAttribute: JD,
  Int32BufferAttribute: QD,
  Int8BufferAttribute: jD,
  IntType: rh,
  InterleavedBuffer: Ng,
  InterleavedBufferAttribute: Za,
  Interpolant: gh,
  InterpolateDiscrete: Lf,
  InterpolateLinear: Jm,
  InterpolateSmooth: qp,
  InvertStencilOp: $L,
  KeepStencilOp: wa,
  KeyframeTrack: Kr,
  LOD: q2,
  LatheGeometry: hh,
  Layers: Ba,
  LessCompare: E2,
  LessDepth: i2,
  LessEqualCompare: s1,
  LessEqualDepth: Rf,
  LessEqualStencilFunc: iD,
  LessStencilFunc: tD,
  Light: qo,
  LightProbe: Pb,
  Line: zo,
  Line3: v4,
  LineBasicMaterial: Li,
  LineCurve: M1,
  LineCurve3: tb,
  LineDashedMaterial: gb,
  LineLoop: K2,
  LineSegments: xs,
  LinearDisplayP3ColorSpace: ah,
  LinearFilter: $t,
  LinearInterpolant: R1,
  LinearMipMapLinearFilter: I_,
  LinearMipMapNearestFilter: VL,
  LinearMipmapLinearFilter: us,
  LinearMipmapNearestFilter: Qc,
  LinearSRGBColorSpace: br,
  LinearToneMapping: c2,
  LinearTransfer: Nf,
  Loader: Di,
  LoaderUtils: H_,
  LoadingManager: Kg,
  LoopOnce: v2,
  LoopPingPong: _2,
  LoopRepeat: y2,
  LuminanceAlphaFormat: t1,
  LuminanceFormat: e1,
  MOUSE: Sa,
  Material: si,
  MaterialLoader: Qg,
  MathUtils: a1,
  Matrix3: bt,
  Matrix4: yt,
  MaxEquation: HR,
  Mesh: Sn,
  MeshBasicMaterial: Ti,
  MeshDepthMaterial: p1,
  MeshDistanceMaterial: m1,
  MeshLambertMaterial: pb,
  MeshMatcapMaterial: mb,
  MeshNormalMaterial: db,
  MeshPhongMaterial: fb,
  MeshPhysicalMaterial: cb,
  MeshStandardMaterial: A1,
  MeshToonMaterial: hb,
  MinEquation: BR,
  MirroredRepeatWrapping: If,
  MixOperation: l2,
  MultiplyBlending: b_,
  MultiplyOperation: ih,
  NearestFilter: Qn,
  NearestMipMapLinearFilter: HL,
  NearestMipMapNearestFilter: BL,
  NearestMipmapLinearFilter: ru,
  NearestMipmapNearestFilter: Kx,
  NeutralToneMapping: m2,
  NeverCompare: w2,
  NeverDepth: t2,
  NeverStencilFunc: eD,
  NoBlending: ps,
  NoColorSpace: ks,
  NoToneMapping: ms,
  NormalAnimationBlendMode: Cg,
  NormalBlending: Fa,
  NotEqualCompare: C2,
  NotEqualDepth: a2,
  NotEqualStencilFunc: sD,
  NumberKeyframeTrack: Wf,
  Object3D: Yt,
  ObjectLoader: Gz,
  ObjectSpaceNormalMap: M2,
  OctahedronGeometry: ph,
  OneFactor: GR,
  OneMinusConstantAlphaFactor: e2,
  OneMinusConstantColorFactor: QR,
  OneMinusDstAlphaFactor: qR,
  OneMinusDstColorFactor: ZR,
  OneMinusSrcAlphaFactor: Em,
  OneMinusSrcColorFactor: XR,
  OrthographicCamera: fs,
  P3Primaries: Of,
  PCFShadowMap: xg,
  PCFSoftShadowMap: Jc,
  PMREMGenerator: N_,
  Path: Bf,
  PerspectiveCamera: Rn,
  Plane: Fs,
  PlaneGeometry: Xo,
  PlaneHelper: b4,
  PointLight: Tb,
  PointLightHelper: x4,
  Points: J2,
  PointsMaterial: _1,
  PolarGridHelper: E4,
  PolyhedronGeometry: Yo,
  PositionalAudio: Jz,
  PropertyBinding: Wt,
  PropertyMixer: Nb,
  QuadraticBezierCurve: w1,
  QuadraticBezierCurve3: E1,
  Quaternion: Dn,
  QuaternionKeyframeTrack: vh,
  QuaternionLinearInterpolant: Sb,
  RED_GREEN_RGTC2_Format: Zm,
  RED_RGTC1_Format: i1,
  REVISION: nh,
  RGBADepthPacking: S2,
  RGBAFormat: Ln,
  RGBAIntegerFormat: Ag,
  RGBA_ASTC_10x10_Format: Gm,
  RGBA_ASTC_10x5_Format: Bm,
  RGBA_ASTC_10x6_Format: Hm,
  RGBA_ASTC_10x8_Format: Vm,
  RGBA_ASTC_12x10_Format: Wm,
  RGBA_ASTC_12x12_Format: Xm,
  RGBA_ASTC_4x4_Format: Lm,
  RGBA_ASTC_5x4_Format: Dm,
  RGBA_ASTC_5x5_Format: Nm,
  RGBA_ASTC_6x5_Format: Um,
  RGBA_ASTC_6x6_Format: Om,
  RGBA_ASTC_8x5_Format: Fm,
  RGBA_ASTC_8x6_Format: km,
  RGBA_ASTC_8x8_Format: zm,
  RGBA_BPTC_Format: rf,
  RGBA_ETC2_EAC_Format: Im,
  RGBA_PVRTC_2BPPV1_Format: Rm,
  RGBA_PVRTC_4BPPV1_Format: Cm,
  RGBA_S3TC_DXT1_Format: ef,
  RGBA_S3TC_DXT3_Format: tf,
  RGBA_S3TC_DXT5_Format: nf,
  RGBFormat: $x,
  RGBIntegerFormat: GL,
  RGB_BPTC_SIGNED_Format: Ym,
  RGB_BPTC_UNSIGNED_Format: qm,
  RGB_ETC1_Format: bm,
  RGB_ETC2_Format: Pm,
  RGB_PVRTC_2BPPV1_Format: Am,
  RGB_PVRTC_4BPPV1_Format: Tm,
  RGB_S3TC_DXT1_Format: $c,
  RGFormat: n1,
  RGIntegerFormat: Tg,
  RawShaderMaterial: ub,
  Ray: el,
  Raycaster: F1,
  Rec709Primaries: Uf,
  RectAreaLight: Rb,
  RedFormat: sh,
  RedIntegerFormat: oh,
  ReinhardToneMapping: f2,
  RenderTarget: D2,
  RepeatWrapping: Pf,
  ReplaceStencilOp: jL,
  ReverseSubtractEquation: zR,
  RingGeometry: Wg,
  SIGNED_RED_GREEN_RGTC2_Format: Km,
  SIGNED_RED_RGTC1_Format: jm,
  SRGBColorSpace: Bi,
  SRGBTransfer: an,
  Scene: bu,
  ShaderChunk: Lt,
  ShaderLib: Gr,
  ShaderMaterial: qi,
  ShadowMaterial: lb,
  Shape: Ha,
  ShapeGeometry: Xg,
  ShapePath: L4,
  ShapeUtils: gs,
  ShortType: Mg,
  Skeleton: fh,
  SkeletonHelper: _4,
  SkinnedMesh: y1,
  Source: Ia,
  Sphere: gi,
  SphereGeometry: mh,
  Spherical: tg,
  SphericalHarmonics3: bb,
  SplineCurve: T1,
  SpotLight: Eb,
  SpotLightHelper: y4,
  Sprite: Y2,
  SpriteMaterial: v1,
  SrcAlphaFactor: wm,
  SrcAlphaSaturateFactor: KR,
  SrcColorFactor: WR,
  StaticCopyUsage: hD,
  StaticDrawUsage: Ff,
  StaticReadUsage: uD,
  StereoCamera: qz,
  StreamCopyUsage: pD,
  StreamDrawUsage: lD,
  StreamReadUsage: fD,
  StringKeyframeTrack: nl,
  SubtractEquation: kR,
  SubtractiveBlending: R_,
  TOUCH: Ma,
  TangentSpaceNormalMap: Go,
  TetrahedronGeometry: Yg,
  Texture: Kt,
  TextureLoader: Jg,
  TextureUtils: Nk,
  TorusGeometry: qg,
  TorusKnotGeometry: jg,
  Triangle: tr,
  TriangleFanDrawMode: YL,
  TriangleStripDrawMode: XL,
  TrianglesDrawMode: WL,
  TubeGeometry: Zg,
  UVMapping: Fo,
  Uint16BufferAttribute: Pg,
  Uint32BufferAttribute: c1,
  Uint8BufferAttribute: ZD,
  Uint8ClampedBufferAttribute: KD,
  Uniform: O1,
  UniformsGroup: h4,
  UniformsLib: qe,
  UniformsUtils: O2,
  UnsignedByteType: Yi,
  UnsignedInt248Type: qa,
  UnsignedInt5999Type: Jx,
  UnsignedIntType: ys,
  UnsignedShort4444Type: wg,
  UnsignedShort5551Type: Eg,
  UnsignedShortType: Au,
  VSMShadowMap: Br,
  Vector2: _e,
  Vector3: B,
  Vector4: Vt,
  VectorKeyframeTrack: Xf,
  VideoTexture: ez,
  WebGL3DRenderTarget: kD,
  WebGLArrayRenderTarget: FD,
  WebGLCoordinateSystem: cs,
  WebGLCubeRenderTarget: f1,
  WebGLMultipleRenderTargets: D4,
  WebGLRenderTarget: ar,
  WebGLRenderer: g1,
  WebGLUtils: G2,
  WebGPUCoordinateSystem: kf,
  WireframeGeometry: ab,
  WrapAroundEnding: Df,
  ZeroCurvatureEnding: ba,
  ZeroFactor: VR,
  ZeroSlopeEnding: Pa,
  ZeroStencilOp: qL,
  createCanvasElement: I2
}, Symbol.toStringTag, { value: "Module" }));
var To = {}, U4 = {
  get exports() {
    return To;
  },
  set exports(n) {
    To = n;
  }
}, il = {};
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
il.ConcurrentRoot = 1;
il.ContinuousEventPriority = 4;
il.DefaultEventPriority = 16;
il.DiscreteEventPriority = 1;
il.IdleEventPriority = 536870912;
il.LegacyRoot = 0;
(function(n) {
  n.exports = il;
})(U4);
function O4(n) {
  let e;
  const t = /* @__PURE__ */ new Set(), i = (f, h) => {
    const d = typeof f == "function" ? f(e) : f;
    if (d !== e) {
      const p = e;
      e = h ? d : Object.assign({}, e, d), t.forEach((v) => v(e, p));
    }
  }, r = () => e, s = (f, h = r, d = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let p = h(e);
    function v() {
      const y = h(e);
      if (!d(p, y)) {
        const w = p;
        f(p = y, w);
      }
    }
    return t.add(v), () => t.delete(v);
  }, c = { setState: i, getState: r, subscribe: (f, h, d) => h || d ? s(f, h, d) : (t.add(f), () => t.delete(f)), destroy: () => t.clear() };
  return e = n(i, r, c), c;
}
const F4 = typeof window > "u" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent), dT = F4 ? ge.useEffect : ge.useLayoutEffect;
function k1(n) {
  const e = typeof n == "function" ? O4(n) : n, t = (i = e.getState, r = Object.is) => {
    const [, s] = ge.useReducer((x) => x + 1, 0), o = e.getState(), a = ge.useRef(o), c = ge.useRef(i), f = ge.useRef(r), h = ge.useRef(!1), d = ge.useRef();
    d.current === void 0 && (d.current = i(o));
    let p, v = !1;
    (a.current !== o || c.current !== i || f.current !== r || h.current) && (p = i(o), v = !r(d.current, p)), dT(() => {
      v && (d.current = p), a.current = o, c.current = i, f.current = r, h.current = !1;
    });
    const y = ge.useRef(o);
    dT(() => {
      const x = () => {
        try {
          const S = e.getState(), M = c.current(S);
          f.current(d.current, M) || (a.current = S, d.current = M, s());
        } catch {
          h.current = !0, s();
        }
      }, g = e.subscribe(x);
      return e.getState() !== y.current && x(), g;
    }, []);
    const w = v ? p : d.current;
    return ge.useDebugValue(w), w;
  };
  return Object.assign(t, e), t[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const i = [t, e];
    return {
      next() {
        const r = i.length <= 0;
        return { value: i.shift(), done: r };
      }
    };
  }, t;
}
var G_ = {}, k4 = {
  get exports() {
    return G_;
  },
  set exports(n) {
    G_ = n;
  }
}, jf = {}, z4 = {
  get exports() {
    return jf;
  },
  set exports(n) {
    jf = n;
  }
}, Fb = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(n) {
  function e(z, te) {
    var ne = z.length;
    z.push(te);
    e:
      for (; 0 < ne; ) {
        var he = ne - 1 >>> 1, Se = z[he];
        if (0 < r(Se, te))
          z[he] = te, z[ne] = Se, ne = he;
        else
          break e;
      }
  }
  function t(z) {
    return z.length === 0 ? null : z[0];
  }
  function i(z) {
    if (z.length === 0)
      return null;
    var te = z[0], ne = z.pop();
    if (ne !== te) {
      z[0] = ne;
      e:
        for (var he = 0, Se = z.length, ke = Se >>> 1; he < ke; ) {
          var ce = 2 * (he + 1) - 1, we = z[ce], Ee = ce + 1, De = z[Ee];
          if (0 > r(we, ne))
            Ee < Se && 0 > r(De, we) ? (z[he] = De, z[Ee] = ne, he = Ee) : (z[he] = we, z[ce] = ne, he = ce);
          else if (Ee < Se && 0 > r(De, ne))
            z[he] = De, z[Ee] = ne, he = Ee;
          else
            break e;
        }
    }
    return te;
  }
  function r(z, te) {
    var ne = z.sortIndex - te.sortIndex;
    return ne !== 0 ? ne : z.id - te.id;
  }
  if (typeof performance == "object" && typeof performance.now == "function") {
    var s = performance;
    n.unstable_now = function() {
      return s.now();
    };
  } else {
    var o = Date, a = o.now();
    n.unstable_now = function() {
      return o.now() - a;
    };
  }
  var c = [], f = [], h = 1, d = null, p = 3, v = !1, y = !1, w = !1, x = typeof setTimeout == "function" ? setTimeout : null, g = typeof clearTimeout == "function" ? clearTimeout : null, S = typeof setImmediate < "u" ? setImmediate : null;
  typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function M(z) {
    for (var te = t(f); te !== null; ) {
      if (te.callback === null)
        i(f);
      else if (te.startTime <= z)
        i(f), te.sortIndex = te.expirationTime, e(c, te);
      else
        break;
      te = t(f);
    }
  }
  function T(z) {
    if (w = !1, M(z), !y)
      if (t(c) !== null)
        y = !0, J(U);
      else {
        var te = t(f);
        te !== null && oe(T, te.startTime - z);
      }
  }
  function U(z, te) {
    y = !1, w && (w = !1, g(R), R = -1), v = !0;
    var ne = p;
    try {
      for (M(te), d = t(c); d !== null && (!(d.expirationTime > te) || z && !N()); ) {
        var he = d.callback;
        if (typeof he == "function") {
          d.callback = null, p = d.priorityLevel;
          var Se = he(d.expirationTime <= te);
          te = n.unstable_now(), typeof Se == "function" ? d.callback = Se : d === t(c) && i(c), M(te);
        } else
          i(c);
        d = t(c);
      }
      if (d !== null)
        var ke = !0;
      else {
        var ce = t(f);
        ce !== null && oe(T, ce.startTime - te), ke = !1;
      }
      return ke;
    } finally {
      d = null, p = ne, v = !1;
    }
  }
  var P = !1, D = null, R = -1, C = 5, A = -1;
  function N() {
    return !(n.unstable_now() - A < C);
  }
  function G() {
    if (D !== null) {
      var z = n.unstable_now();
      A = z;
      var te = !0;
      try {
        te = D(!0, z);
      } finally {
        te ? W() : (P = !1, D = null);
      }
    } else
      P = !1;
  }
  var W;
  if (typeof S == "function")
    W = function() {
      S(G);
    };
  else if (typeof MessageChannel < "u") {
    var j = new MessageChannel(), Q = j.port2;
    j.port1.onmessage = G, W = function() {
      Q.postMessage(null);
    };
  } else
    W = function() {
      x(G, 0);
    };
  function J(z) {
    D = z, P || (P = !0, W());
  }
  function oe(z, te) {
    R = x(function() {
      z(n.unstable_now());
    }, te);
  }
  n.unstable_IdlePriority = 5, n.unstable_ImmediatePriority = 1, n.unstable_LowPriority = 4, n.unstable_NormalPriority = 3, n.unstable_Profiling = null, n.unstable_UserBlockingPriority = 2, n.unstable_cancelCallback = function(z) {
    z.callback = null;
  }, n.unstable_continueExecution = function() {
    y || v || (y = !0, J(U));
  }, n.unstable_forceFrameRate = function(z) {
    0 > z || 125 < z ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : C = 0 < z ? Math.floor(1e3 / z) : 5;
  }, n.unstable_getCurrentPriorityLevel = function() {
    return p;
  }, n.unstable_getFirstCallbackNode = function() {
    return t(c);
  }, n.unstable_next = function(z) {
    switch (p) {
      case 1:
      case 2:
      case 3:
        var te = 3;
        break;
      default:
        te = p;
    }
    var ne = p;
    p = te;
    try {
      return z();
    } finally {
      p = ne;
    }
  }, n.unstable_pauseExecution = function() {
  }, n.unstable_requestPaint = function() {
  }, n.unstable_runWithPriority = function(z, te) {
    switch (z) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        z = 3;
    }
    var ne = p;
    p = z;
    try {
      return te();
    } finally {
      p = ne;
    }
  }, n.unstable_scheduleCallback = function(z, te, ne) {
    var he = n.unstable_now();
    switch (typeof ne == "object" && ne !== null ? (ne = ne.delay, ne = typeof ne == "number" && 0 < ne ? he + ne : he) : ne = he, z) {
      case 1:
        var Se = -1;
        break;
      case 2:
        Se = 250;
        break;
      case 5:
        Se = 1073741823;
        break;
      case 4:
        Se = 1e4;
        break;
      default:
        Se = 5e3;
    }
    return Se = ne + Se, z = { id: h++, callback: te, priorityLevel: z, startTime: ne, expirationTime: Se, sortIndex: -1 }, ne > he ? (z.sortIndex = ne, e(f, z), t(c) === null && z === t(f) && (w ? (g(R), R = -1) : w = !0, oe(T, ne - he))) : (z.sortIndex = Se, e(c, z), y || v || (y = !0, J(U))), z;
  }, n.unstable_shouldYield = N, n.unstable_wrapCallback = function(z) {
    var te = p;
    return function() {
      var ne = p;
      p = te;
      try {
        return z.apply(this, arguments);
      } finally {
        p = ne;
      }
    };
  };
})(Fb);
(function(n) {
  n.exports = Fb;
})(z4);
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var B4 = function(e) {
  var t = {}, i = ge, r = jf, s = Object.assign;
  function o(l) {
    for (var u = "https://reactjs.org/docs/error-decoder.html?invariant=" + l, m = 1; m < arguments.length; m++)
      u += "&args[]=" + encodeURIComponent(arguments[m]);
    return "Minified React error #" + l + "; visit " + u + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var a = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, c = Symbol.for("react.element"), f = Symbol.for("react.portal"), h = Symbol.for("react.fragment"), d = Symbol.for("react.strict_mode"), p = Symbol.for("react.profiler"), v = Symbol.for("react.provider"), y = Symbol.for("react.context"), w = Symbol.for("react.forward_ref"), x = Symbol.for("react.suspense"), g = Symbol.for("react.suspense_list"), S = Symbol.for("react.memo"), M = Symbol.for("react.lazy"), T = Symbol.for("react.offscreen"), U = Symbol.iterator;
  function P(l) {
    return l === null || typeof l != "object" ? null : (l = U && l[U] || l["@@iterator"], typeof l == "function" ? l : null);
  }
  function D(l) {
    if (l == null)
      return null;
    if (typeof l == "function")
      return l.displayName || l.name || null;
    if (typeof l == "string")
      return l;
    switch (l) {
      case h:
        return "Fragment";
      case f:
        return "Portal";
      case p:
        return "Profiler";
      case d:
        return "StrictMode";
      case x:
        return "Suspense";
      case g:
        return "SuspenseList";
    }
    if (typeof l == "object")
      switch (l.$$typeof) {
        case y:
          return (l.displayName || "Context") + ".Consumer";
        case v:
          return (l._context.displayName || "Context") + ".Provider";
        case w:
          var u = l.render;
          return l = l.displayName, l || (l = u.displayName || u.name || "", l = l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef"), l;
        case S:
          return u = l.displayName || null, u !== null ? u : D(l.type) || "Memo";
        case M:
          u = l._payload, l = l._init;
          try {
            return D(l(u));
          } catch {
          }
      }
    return null;
  }
  function R(l) {
    var u = l.type;
    switch (l.tag) {
      case 24:
        return "Cache";
      case 9:
        return (u.displayName || "Context") + ".Consumer";
      case 10:
        return (u._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return l = u.render, l = l.displayName || l.name || "", u.displayName || (l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return u;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return D(u);
      case 8:
        return u === d ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof u == "function")
          return u.displayName || u.name || null;
        if (typeof u == "string")
          return u;
    }
    return null;
  }
  function C(l) {
    var u = l, m = l;
    if (l.alternate)
      for (; u.return; )
        u = u.return;
    else {
      l = u;
      do
        u = l, u.flags & 4098 && (m = u.return), l = u.return;
      while (l);
    }
    return u.tag === 3 ? m : null;
  }
  function A(l) {
    if (C(l) !== l)
      throw Error(o(188));
  }
  function N(l) {
    var u = l.alternate;
    if (!u) {
      if (u = C(l), u === null)
        throw Error(o(188));
      return u !== l ? null : l;
    }
    for (var m = l, _ = u; ; ) {
      var E = m.return;
      if (E === null)
        break;
      var b = E.alternate;
      if (b === null) {
        if (_ = E.return, _ !== null) {
          m = _;
          continue;
        }
        break;
      }
      if (E.child === b.child) {
        for (b = E.child; b; ) {
          if (b === m)
            return A(E), l;
          if (b === _)
            return A(E), u;
          b = b.sibling;
        }
        throw Error(o(188));
      }
      if (m.return !== _.return)
        m = E, _ = b;
      else {
        for (var Y = !1, re = E.child; re; ) {
          if (re === m) {
            Y = !0, m = E, _ = b;
            break;
          }
          if (re === _) {
            Y = !0, _ = E, m = b;
            break;
          }
          re = re.sibling;
        }
        if (!Y) {
          for (re = b.child; re; ) {
            if (re === m) {
              Y = !0, m = b, _ = E;
              break;
            }
            if (re === _) {
              Y = !0, _ = b, m = E;
              break;
            }
            re = re.sibling;
          }
          if (!Y)
            throw Error(o(189));
        }
      }
      if (m.alternate !== _)
        throw Error(o(190));
    }
    if (m.tag !== 3)
      throw Error(o(188));
    return m.stateNode.current === m ? l : u;
  }
  function G(l) {
    return l = N(l), l !== null ? W(l) : null;
  }
  function W(l) {
    if (l.tag === 5 || l.tag === 6)
      return l;
    for (l = l.child; l !== null; ) {
      var u = W(l);
      if (u !== null)
        return u;
      l = l.sibling;
    }
    return null;
  }
  function j(l) {
    if (l.tag === 5 || l.tag === 6)
      return l;
    for (l = l.child; l !== null; ) {
      if (l.tag !== 4) {
        var u = j(l);
        if (u !== null)
          return u;
      }
      l = l.sibling;
    }
    return null;
  }
  var Q = Array.isArray, J = e.getPublicInstance, oe = e.getRootHostContext, z = e.getChildHostContext, te = e.prepareForCommit, ne = e.resetAfterCommit, he = e.createInstance, Se = e.appendInitialChild, ke = e.finalizeInitialChildren, ce = e.prepareUpdate, we = e.shouldSetTextContent, Ee = e.createTextInstance, De = e.scheduleTimeout, st = e.cancelTimeout, Mt = e.noTimeout, dt = e.isPrimaryRenderer, xt = e.supportsMutation, H = e.supportsPersistence, Ie = e.supportsHydration, Le = e.getInstanceFromNode, Ge = e.preparePortalMount, Me = e.getCurrentEventPriority, at = e.detachDeletedInstance, We = e.supportsMicrotasks, et = e.scheduleMicrotask, q = e.supportsTestSelectors, O = e.findFiberRoot, ue = e.getBoundingRect, Te = e.getTextContent, Ae = e.isHiddenSubtree, Ce = e.matchAccessibilityRole, ot = e.setFocusIfFocusable, Ve = e.setupIntersectionObserver, Je = e.appendChild, _t = e.appendChildToContainer, Ue = e.commitTextUpdate, Ze = e.commitMount, Nt = e.commitUpdate, ht = e.insertBefore, Be = e.insertInContainerBefore, ee = e.removeChild, ye = e.removeChildFromContainer, ze = e.resetTextContent, K = e.hideInstance, be = e.hideTextInstance, ie = e.unhideInstance, xe = e.unhideTextInstance, He = e.clearContainer, pt = e.cloneInstance, wt = e.createContainerChildSet, Ht = e.appendChildToContainerChildSet, rn = e.finalizeContainerChildren, It = e.replaceContainerChildren, Nn = e.cloneHiddenInstance, Un = e.cloneHiddenTextInstance, rl = e.canHydrateInstance, Pr = e.canHydrateTextInstance, jo = e.canHydrateSuspenseInstance, Jr = e.isSuspenseInstancePending, Ks = e.isSuspenseInstanceFallback, cr = e.registerSuspenseInstanceRetry, Ni = e.getNextHydratableSibling, Ct = e.getFirstHydratableChild, Zo = e.getFirstHydratableChildWithinContainer, sl = e.getFirstHydratableChildWithinSuspenseInstance, L = e.hydrateInstance, F = e.hydrateTextInstance, $ = e.hydrateSuspenseInstance, I = e.getNextHydratableInstanceAfterSuspenseInstance, k = e.commitHydratedContainer, V = e.commitHydratedSuspenseInstance, Z = e.clearSuspenseBoundary, X = e.clearSuspenseBoundaryFromContainer, ae = e.shouldDeleteUnhydratedTailInstances, le = e.didNotMatchHydratedContainerTextInstance, pe = e.didNotMatchHydratedTextInstance, de;
  function Xe(l) {
    if (de === void 0)
      try {
        throw Error();
      } catch (m) {
        var u = m.stack.trim().match(/\n( *(at )?)/);
        de = u && u[1] || "";
      }
    return `
` + de + l;
  }
  var Pe = !1;
  function Re(l, u) {
    if (!l || Pe)
      return "";
    Pe = !0;
    var m = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (u)
        if (u = function() {
          throw Error();
        }, Object.defineProperty(u.prototype, "props", { set: function() {
          throw Error();
        } }), typeof Reflect == "object" && Reflect.construct) {
          try {
            Reflect.construct(u, []);
          } catch (Fe) {
            var _ = Fe;
          }
          Reflect.construct(l, [], u);
        } else {
          try {
            u.call();
          } catch (Fe) {
            _ = Fe;
          }
          l.call(u.prototype);
        }
      else {
        try {
          throw Error();
        } catch (Fe) {
          _ = Fe;
        }
        l();
      }
    } catch (Fe) {
      if (Fe && _ && typeof Fe.stack == "string") {
        for (var E = Fe.stack.split(`
`), b = _.stack.split(`
`), Y = E.length - 1, re = b.length - 1; 1 <= Y && 0 <= re && E[Y] !== b[re]; )
          re--;
        for (; 1 <= Y && 0 <= re; Y--, re--)
          if (E[Y] !== b[re]) {
            if (Y !== 1 || re !== 1)
              do
                if (Y--, re--, 0 > re || E[Y] !== b[re]) {
                  var ve = `
` + E[Y].replace(" at new ", " at ");
                  return l.displayName && ve.includes("<anonymous>") && (ve = ve.replace("<anonymous>", l.displayName)), ve;
                }
              while (1 <= Y && 0 <= re);
            break;
          }
      }
    } finally {
      Pe = !1, Error.prepareStackTrace = m;
    }
    return (l = l ? l.displayName || l.name : "") ? Xe(l) : "";
  }
  var je = Object.prototype.hasOwnProperty, nt = [], ct = -1;
  function St(l) {
    return { current: l };
  }
  function Ye(l) {
    0 > ct || (l.current = nt[ct], nt[ct] = null, ct--);
  }
  function Ne(l, u) {
    ct++, nt[ct] = l.current, l.current = u;
  }
  var mt = {}, lt = St(mt), gt = St(!1), Gt = mt;
  function Qt(l, u) {
    var m = l.type.contextTypes;
    if (!m)
      return mt;
    var _ = l.stateNode;
    if (_ && _.__reactInternalMemoizedUnmaskedChildContext === u)
      return _.__reactInternalMemoizedMaskedChildContext;
    var E = {}, b;
    for (b in m)
      E[b] = u[b];
    return _ && (l = l.stateNode, l.__reactInternalMemoizedUnmaskedChildContext = u, l.__reactInternalMemoizedMaskedChildContext = E), E;
  }
  function dn(l) {
    return l = l.childContextTypes, l != null;
  }
  function kt() {
    Ye(gt), Ye(lt);
  }
  function Ot(l, u, m) {
    if (lt.current !== mt)
      throw Error(o(168));
    Ne(lt, u), Ne(gt, m);
  }
  function gn(l, u, m) {
    var _ = l.stateNode;
    if (u = u.childContextTypes, typeof _.getChildContext != "function")
      return m;
    _ = _.getChildContext();
    for (var E in _)
      if (!(E in u))
        throw Error(o(108, R(l) || "Unknown", E));
    return s({}, m, _);
  }
  function Rt(l) {
    return l = (l = l.stateNode) && l.__reactInternalMemoizedMergedChildContext || mt, Gt = lt.current, Ne(lt, l), Ne(gt, gt.current), !0;
  }
  function zt(l, u, m) {
    var _ = l.stateNode;
    if (!_)
      throw Error(o(169));
    m ? (l = gn(l, u, Gt), _.__reactInternalMemoizedMergedChildContext = l, Ye(gt), Ye(lt), Ne(lt, l)) : Ye(gt), Ne(gt, m);
  }
  var on = Math.clz32 ? Math.clz32 : Qr, fr = Math.log, yi = Math.LN2;
  function Qr(l) {
    return l >>>= 0, l === 0 ? 32 : 31 - (fr(l) / yi | 0) | 0;
  }
  var Mh = 64, wh = 4194304;
  function zu(l) {
    switch (l & -l) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return l & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return l & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return l;
    }
  }
  function Eh(l, u) {
    var m = l.pendingLanes;
    if (m === 0)
      return 0;
    var _ = 0, E = l.suspendedLanes, b = l.pingedLanes, Y = m & 268435455;
    if (Y !== 0) {
      var re = Y & ~E;
      re !== 0 ? _ = zu(re) : (b &= Y, b !== 0 && (_ = zu(b)));
    } else
      Y = m & ~E, Y !== 0 ? _ = zu(Y) : b !== 0 && (_ = zu(b));
    if (_ === 0)
      return 0;
    if (u !== 0 && u !== _ && !(u & E) && (E = _ & -_, b = u & -u, E >= b || E === 16 && (b & 4194240) !== 0))
      return u;
    if (_ & 4 && (_ |= m & 16), u = l.entangledLanes, u !== 0)
      for (l = l.entanglements, u &= _; 0 < u; )
        m = 31 - on(u), E = 1 << m, _ |= l[m], u &= ~E;
    return _;
  }
  function wP(l, u) {
    switch (l) {
      case 1:
      case 2:
      case 4:
        return u + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return u + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function EP(l, u) {
    for (var m = l.suspendedLanes, _ = l.pingedLanes, E = l.expirationTimes, b = l.pendingLanes; 0 < b; ) {
      var Y = 31 - on(b), re = 1 << Y, ve = E[Y];
      ve === -1 ? (!(re & m) || re & _) && (E[Y] = wP(re, u)) : ve <= u && (l.expiredLanes |= re), b &= ~re;
    }
  }
  function $g(l) {
    return l = l.pendingLanes & -1073741825, l !== 0 ? l : l & 1073741824 ? 1073741824 : 0;
  }
  function e0(l) {
    for (var u = [], m = 0; 31 > m; m++)
      u.push(l);
    return u;
  }
  function Bu(l, u, m) {
    l.pendingLanes |= u, u !== 536870912 && (l.suspendedLanes = 0, l.pingedLanes = 0), l = l.eventTimes, u = 31 - on(u), l[u] = m;
  }
  function TP(l, u) {
    var m = l.pendingLanes & ~u;
    l.pendingLanes = u, l.suspendedLanes = 0, l.pingedLanes = 0, l.expiredLanes &= u, l.mutableReadLanes &= u, l.entangledLanes &= u, u = l.entanglements;
    var _ = l.eventTimes;
    for (l = l.expirationTimes; 0 < m; ) {
      var E = 31 - on(m), b = 1 << E;
      u[E] = 0, _[E] = -1, l[E] = -1, m &= ~b;
    }
  }
  function t0(l, u) {
    var m = l.entangledLanes |= u;
    for (l = l.entanglements; m; ) {
      var _ = 31 - on(m), E = 1 << _;
      E & u | l[_] & u && (l[_] |= u), m &= ~E;
    }
  }
  var qt = 0;
  function j1(l) {
    return l &= -l, 1 < l ? 4 < l ? l & 268435455 ? 16 : 536870912 : 4 : 1;
  }
  var n0 = r.unstable_scheduleCallback, Z1 = r.unstable_cancelCallback, AP = r.unstable_shouldYield, CP = r.unstable_requestPaint, qn = r.unstable_now, i0 = r.unstable_ImmediatePriority, RP = r.unstable_UserBlockingPriority, r0 = r.unstable_NormalPriority, bP = r.unstable_IdlePriority, Th = null, $r = null;
  function PP(l) {
    if ($r && typeof $r.onCommitFiberRoot == "function")
      try {
        $r.onCommitFiberRoot(Th, l, void 0, (l.current.flags & 128) === 128);
      } catch {
      }
  }
  function IP(l, u) {
    return l === u && (l !== 0 || 1 / l === 1 / u) || l !== l && u !== u;
  }
  var es = typeof Object.is == "function" ? Object.is : IP, Ss = null, Ah = !1, s0 = !1;
  function K1(l) {
    Ss === null ? Ss = [l] : Ss.push(l);
  }
  function LP(l) {
    Ah = !0, K1(l);
  }
  function ts() {
    if (!s0 && Ss !== null) {
      s0 = !0;
      var l = 0, u = qt;
      try {
        var m = Ss;
        for (qt = 1; l < m.length; l++) {
          var _ = m[l];
          do
            _ = _(!0);
          while (_ !== null);
        }
        Ss = null, Ah = !1;
      } catch (E) {
        throw Ss !== null && (Ss = Ss.slice(l + 1)), n0(i0, ts), E;
      } finally {
        qt = u, s0 = !1;
      }
    }
    return null;
  }
  var DP = a.ReactCurrentBatchConfig;
  function Ch(l, u) {
    if (es(l, u))
      return !0;
    if (typeof l != "object" || l === null || typeof u != "object" || u === null)
      return !1;
    var m = Object.keys(l), _ = Object.keys(u);
    if (m.length !== _.length)
      return !1;
    for (_ = 0; _ < m.length; _++) {
      var E = m[_];
      if (!je.call(u, E) || !es(l[E], u[E]))
        return !1;
    }
    return !0;
  }
  function NP(l) {
    switch (l.tag) {
      case 5:
        return Xe(l.type);
      case 16:
        return Xe("Lazy");
      case 13:
        return Xe("Suspense");
      case 19:
        return Xe("SuspenseList");
      case 0:
      case 2:
      case 15:
        return l = Re(l.type, !1), l;
      case 11:
        return l = Re(l.type.render, !1), l;
      case 1:
        return l = Re(l.type, !0), l;
      default:
        return "";
    }
  }
  function Ir(l, u) {
    if (l && l.defaultProps) {
      u = s({}, u), l = l.defaultProps;
      for (var m in l)
        u[m] === void 0 && (u[m] = l[m]);
      return u;
    }
    return u;
  }
  var Rh = St(null), bh = null, ol = null, o0 = null;
  function a0() {
    o0 = ol = bh = null;
  }
  function J1(l, u, m) {
    dt ? (Ne(Rh, u._currentValue), u._currentValue = m) : (Ne(Rh, u._currentValue2), u._currentValue2 = m);
  }
  function l0(l) {
    var u = Rh.current;
    Ye(Rh), dt ? l._currentValue = u : l._currentValue2 = u;
  }
  function u0(l, u, m) {
    for (; l !== null; ) {
      var _ = l.alternate;
      if ((l.childLanes & u) !== u ? (l.childLanes |= u, _ !== null && (_.childLanes |= u)) : _ !== null && (_.childLanes & u) !== u && (_.childLanes |= u), l === m)
        break;
      l = l.return;
    }
  }
  function al(l, u) {
    bh = l, o0 = ol = null, l = l.dependencies, l !== null && l.firstContext !== null && (l.lanes & u && (Ki = !0), l.firstContext = null);
  }
  function hr(l) {
    var u = dt ? l._currentValue : l._currentValue2;
    if (o0 !== l)
      if (l = { context: l, memoizedValue: u, next: null }, ol === null) {
        if (bh === null)
          throw Error(o(308));
        ol = l, bh.dependencies = { lanes: 0, firstContext: l };
      } else
        ol = ol.next = l;
    return u;
  }
  var ns = null, Js = !1;
  function c0(l) {
    l.updateQueue = { baseState: l.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function Q1(l, u) {
    l = l.updateQueue, u.updateQueue === l && (u.updateQueue = { baseState: l.baseState, firstBaseUpdate: l.firstBaseUpdate, lastBaseUpdate: l.lastBaseUpdate, shared: l.shared, effects: l.effects });
  }
  function Ms(l, u) {
    return { eventTime: l, lane: u, tag: 0, payload: null, callback: null, next: null };
  }
  function Qs(l, u) {
    var m = l.updateQueue;
    m !== null && (m = m.shared, On !== null && l.mode & 1 && !(Ft & 2) ? (l = m.interleaved, l === null ? (u.next = u, ns === null ? ns = [m] : ns.push(m)) : (u.next = l.next, l.next = u), m.interleaved = u) : (l = m.pending, l === null ? u.next = u : (u.next = l.next, l.next = u), m.pending = u));
  }
  function Ph(l, u, m) {
    if (u = u.updateQueue, u !== null && (u = u.shared, (m & 4194240) !== 0)) {
      var _ = u.lanes;
      _ &= l.pendingLanes, m |= _, u.lanes = m, t0(l, m);
    }
  }
  function $1(l, u) {
    var m = l.updateQueue, _ = l.alternate;
    if (_ !== null && (_ = _.updateQueue, m === _)) {
      var E = null, b = null;
      if (m = m.firstBaseUpdate, m !== null) {
        do {
          var Y = { eventTime: m.eventTime, lane: m.lane, tag: m.tag, payload: m.payload, callback: m.callback, next: null };
          b === null ? E = b = Y : b = b.next = Y, m = m.next;
        } while (m !== null);
        b === null ? E = b = u : b = b.next = u;
      } else
        E = b = u;
      m = { baseState: _.baseState, firstBaseUpdate: E, lastBaseUpdate: b, shared: _.shared, effects: _.effects }, l.updateQueue = m;
      return;
    }
    l = m.lastBaseUpdate, l === null ? m.firstBaseUpdate = u : l.next = u, m.lastBaseUpdate = u;
  }
  function Ih(l, u, m, _) {
    var E = l.updateQueue;
    Js = !1;
    var b = E.firstBaseUpdate, Y = E.lastBaseUpdate, re = E.shared.pending;
    if (re !== null) {
      E.shared.pending = null;
      var ve = re, Fe = ve.next;
      ve.next = null, Y === null ? b = Fe : Y.next = Fe, Y = ve;
      var it = l.alternate;
      it !== null && (it = it.updateQueue, re = it.lastBaseUpdate, re !== Y && (re === null ? it.firstBaseUpdate = Fe : re.next = Fe, it.lastBaseUpdate = ve));
    }
    if (b !== null) {
      var Tt = E.baseState;
      Y = 0, it = Fe = ve = null, re = b;
      do {
        var vt = re.lane, sn = re.eventTime;
        if ((_ & vt) === vt) {
          it !== null && (it = it.next = {
            eventTime: sn,
            lane: 0,
            tag: re.tag,
            payload: re.payload,
            callback: re.callback,
            next: null
          });
          e: {
            var ft = l, ui = re;
            switch (vt = u, sn = m, ui.tag) {
              case 1:
                if (ft = ui.payload, typeof ft == "function") {
                  Tt = ft.call(sn, Tt, vt);
                  break e;
                }
                Tt = ft;
                break e;
              case 3:
                ft.flags = ft.flags & -65537 | 128;
              case 0:
                if (ft = ui.payload, vt = typeof ft == "function" ? ft.call(sn, Tt, vt) : ft, vt == null)
                  break e;
                Tt = s({}, Tt, vt);
                break e;
              case 2:
                Js = !0;
            }
          }
          re.callback !== null && re.lane !== 0 && (l.flags |= 64, vt = E.effects, vt === null ? E.effects = [re] : vt.push(re));
        } else
          sn = { eventTime: sn, lane: vt, tag: re.tag, payload: re.payload, callback: re.callback, next: null }, it === null ? (Fe = it = sn, ve = Tt) : it = it.next = sn, Y |= vt;
        if (re = re.next, re === null) {
          if (re = E.shared.pending, re === null)
            break;
          vt = re, re = vt.next, vt.next = null, E.lastBaseUpdate = vt, E.shared.pending = null;
        }
      } while (1);
      if (it === null && (ve = Tt), E.baseState = ve, E.firstBaseUpdate = Fe, E.lastBaseUpdate = it, u = E.shared.interleaved, u !== null) {
        E = u;
        do
          Y |= E.lane, E = E.next;
        while (E !== u);
      } else
        b === null && (E.shared.lanes = 0);
      gl |= Y, l.lanes = Y, l.memoizedState = Tt;
    }
  }
  function eS(l, u, m) {
    if (l = u.effects, u.effects = null, l !== null)
      for (u = 0; u < l.length; u++) {
        var _ = l[u], E = _.callback;
        if (E !== null) {
          if (_.callback = null, _ = m, typeof E != "function")
            throw Error(o(191, E));
          E.call(_);
        }
      }
  }
  var tS = new i.Component().refs;
  function f0(l, u, m, _) {
    u = l.memoizedState, m = m(_, u), m = m == null ? u : s({}, u, m), l.memoizedState = m, l.lanes === 0 && (l.updateQueue.baseState = m);
  }
  var Lh = { isMounted: function(l) {
    return (l = l._reactInternals) ? C(l) === l : !1;
  }, enqueueSetState: function(l, u, m) {
    l = l._reactInternals;
    var _ = xi(), E = to(l), b = Ms(_, E);
    b.payload = u, m != null && (b.callback = m), Qs(l, b), u = vr(l, E, _), u !== null && Ph(u, l, E);
  }, enqueueReplaceState: function(l, u, m) {
    l = l._reactInternals;
    var _ = xi(), E = to(l), b = Ms(_, E);
    b.tag = 1, b.payload = u, m != null && (b.callback = m), Qs(l, b), u = vr(l, E, _), u !== null && Ph(u, l, E);
  }, enqueueForceUpdate: function(l, u) {
    l = l._reactInternals;
    var m = xi(), _ = to(l), E = Ms(
      m,
      _
    );
    E.tag = 2, u != null && (E.callback = u), Qs(l, E), u = vr(l, _, m), u !== null && Ph(u, l, _);
  } };
  function nS(l, u, m, _, E, b, Y) {
    return l = l.stateNode, typeof l.shouldComponentUpdate == "function" ? l.shouldComponentUpdate(_, b, Y) : u.prototype && u.prototype.isPureReactComponent ? !Ch(m, _) || !Ch(E, b) : !0;
  }
  function iS(l, u, m) {
    var _ = !1, E = mt, b = u.contextType;
    return typeof b == "object" && b !== null ? b = hr(b) : (E = dn(u) ? Gt : lt.current, _ = u.contextTypes, b = (_ = _ != null) ? Qt(l, E) : mt), u = new u(m, b), l.memoizedState = u.state !== null && u.state !== void 0 ? u.state : null, u.updater = Lh, l.stateNode = u, u._reactInternals = l, _ && (l = l.stateNode, l.__reactInternalMemoizedUnmaskedChildContext = E, l.__reactInternalMemoizedMaskedChildContext = b), u;
  }
  function rS(l, u, m, _) {
    l = u.state, typeof u.componentWillReceiveProps == "function" && u.componentWillReceiveProps(m, _), typeof u.UNSAFE_componentWillReceiveProps == "function" && u.UNSAFE_componentWillReceiveProps(m, _), u.state !== l && Lh.enqueueReplaceState(u, u.state, null);
  }
  function h0(l, u, m, _) {
    var E = l.stateNode;
    E.props = m, E.state = l.memoizedState, E.refs = tS, c0(l);
    var b = u.contextType;
    typeof b == "object" && b !== null ? E.context = hr(b) : (b = dn(u) ? Gt : lt.current, E.context = Qt(l, b)), E.state = l.memoizedState, b = u.getDerivedStateFromProps, typeof b == "function" && (f0(l, u, b, m), E.state = l.memoizedState), typeof u.getDerivedStateFromProps == "function" || typeof E.getSnapshotBeforeUpdate == "function" || typeof E.UNSAFE_componentWillMount != "function" && typeof E.componentWillMount != "function" || (u = E.state, typeof E.componentWillMount == "function" && E.componentWillMount(), typeof E.UNSAFE_componentWillMount == "function" && E.UNSAFE_componentWillMount(), u !== E.state && Lh.enqueueReplaceState(E, E.state, null), Ih(l, m, E, _), E.state = l.memoizedState), typeof E.componentDidMount == "function" && (l.flags |= 4194308);
  }
  var ll = [], ul = 0, Dh = null, Nh = 0, dr = [], pr = 0, Ko = null, ws = 1, Es = "";
  function Jo(l, u) {
    ll[ul++] = Nh, ll[ul++] = Dh, Dh = l, Nh = u;
  }
  function sS(l, u, m) {
    dr[pr++] = ws, dr[pr++] = Es, dr[pr++] = Ko, Ko = l;
    var _ = ws;
    l = Es;
    var E = 32 - on(_) - 1;
    _ &= ~(1 << E), m += 1;
    var b = 32 - on(u) + E;
    if (30 < b) {
      var Y = E - E % 5;
      b = (_ & (1 << Y) - 1).toString(32), _ >>= Y, E -= Y, ws = 1 << 32 - on(u) + E | m << E | _, Es = b + l;
    } else
      ws = 1 << b | m << E | _, Es = l;
  }
  function d0(l) {
    l.return !== null && (Jo(l, 1), sS(l, 1, 0));
  }
  function p0(l) {
    for (; l === Dh; )
      Dh = ll[--ul], ll[ul] = null, Nh = ll[--ul], ll[ul] = null;
    for (; l === Ko; )
      Ko = dr[--pr], dr[pr] = null, Es = dr[--pr], dr[pr] = null, ws = dr[--pr], dr[pr] = null;
  }
  var ji = null, Zi = null, pn = !1, Hu = !1, Lr = null;
  function oS(l, u) {
    var m = yr(5, null, null, 0);
    m.elementType = "DELETED", m.stateNode = u, m.return = l, u = l.deletions, u === null ? (l.deletions = [m], l.flags |= 16) : u.push(m);
  }
  function aS(l, u) {
    switch (l.tag) {
      case 5:
        return u = rl(u, l.type, l.pendingProps), u !== null ? (l.stateNode = u, ji = l, Zi = Ct(u), !0) : !1;
      case 6:
        return u = Pr(u, l.pendingProps), u !== null ? (l.stateNode = u, ji = l, Zi = null, !0) : !1;
      case 13:
        if (u = jo(u), u !== null) {
          var m = Ko !== null ? { id: ws, overflow: Es } : null;
          return l.memoizedState = { dehydrated: u, treeContext: m, retryLane: 1073741824 }, m = yr(18, null, null, 0), m.stateNode = u, m.return = l, l.child = m, ji = l, Zi = null, !0;
        }
        return !1;
      default:
        return !1;
    }
  }
  function m0(l) {
    return (l.mode & 1) !== 0 && (l.flags & 128) === 0;
  }
  function g0(l) {
    if (pn) {
      var u = Zi;
      if (u) {
        var m = u;
        if (!aS(l, u)) {
          if (m0(l))
            throw Error(o(418));
          u = Ni(m);
          var _ = ji;
          u && aS(l, u) ? oS(_, m) : (l.flags = l.flags & -4097 | 2, pn = !1, ji = l);
        }
      } else {
        if (m0(l))
          throw Error(o(418));
        l.flags = l.flags & -4097 | 2, pn = !1, ji = l;
      }
    }
  }
  function lS(l) {
    for (l = l.return; l !== null && l.tag !== 5 && l.tag !== 3 && l.tag !== 13; )
      l = l.return;
    ji = l;
  }
  function Vu(l) {
    if (!Ie || l !== ji)
      return !1;
    if (!pn)
      return lS(l), pn = !0, !1;
    if (l.tag !== 3 && (l.tag !== 5 || ae(l.type) && !we(l.type, l.memoizedProps))) {
      var u = Zi;
      if (u) {
        if (m0(l)) {
          for (l = Zi; l; )
            l = Ni(l);
          throw Error(o(418));
        }
        for (; u; )
          oS(l, u), u = Ni(u);
      }
    }
    if (lS(l), l.tag === 13) {
      if (!Ie)
        throw Error(o(316));
      if (l = l.memoizedState, l = l !== null ? l.dehydrated : null, !l)
        throw Error(o(317));
      Zi = I(l);
    } else
      Zi = ji ? Ni(l.stateNode) : null;
    return !0;
  }
  function cl() {
    Ie && (Zi = ji = null, Hu = pn = !1);
  }
  function v0(l) {
    Lr === null ? Lr = [l] : Lr.push(l);
  }
  function Gu(l, u, m) {
    if (l = m.ref, l !== null && typeof l != "function" && typeof l != "object") {
      if (m._owner) {
        if (m = m._owner, m) {
          if (m.tag !== 1)
            throw Error(o(309));
          var _ = m.stateNode;
        }
        if (!_)
          throw Error(o(147, l));
        var E = _, b = "" + l;
        return u !== null && u.ref !== null && typeof u.ref == "function" && u.ref._stringRef === b ? u.ref : (u = function(Y) {
          var re = E.refs;
          re === tS && (re = E.refs = {}), Y === null ? delete re[b] : re[b] = Y;
        }, u._stringRef = b, u);
      }
      if (typeof l != "string")
        throw Error(o(284));
      if (!m._owner)
        throw Error(o(290, l));
    }
    return l;
  }
  function Uh(l, u) {
    throw l = Object.prototype.toString.call(u), Error(o(31, l === "[object Object]" ? "object with keys {" + Object.keys(u).join(", ") + "}" : l));
  }
  function uS(l) {
    var u = l._init;
    return u(l._payload);
  }
  function cS(l) {
    function u(fe, se) {
      if (l) {
        var me = fe.deletions;
        me === null ? (fe.deletions = [se], fe.flags |= 16) : me.push(se);
      }
    }
    function m(fe, se) {
      if (!l)
        return null;
      for (; se !== null; )
        u(fe, se), se = se.sibling;
      return null;
    }
    function _(fe, se) {
      for (fe = /* @__PURE__ */ new Map(); se !== null; )
        se.key !== null ? fe.set(se.key, se) : fe.set(se.index, se), se = se.sibling;
      return fe;
    }
    function E(fe, se) {
      return fe = io(fe, se), fe.index = 0, fe.sibling = null, fe;
    }
    function b(fe, se, me) {
      return fe.index = me, l ? (me = fe.alternate, me !== null ? (me = me.index, me < se ? (fe.flags |= 2, se) : me) : (fe.flags |= 2, se)) : (fe.flags |= 1048576, se);
    }
    function Y(fe) {
      return l && fe.alternate === null && (fe.flags |= 2), fe;
    }
    function re(fe, se, me, $e) {
      return se === null || se.tag !== 6 ? (se = ev(me, fe.mode, $e), se.return = fe, se) : (se = E(se, me), se.return = fe, se);
    }
    function ve(fe, se, me, $e) {
      var ut = me.type;
      return ut === h ? it(fe, se, me.props.children, $e, me.key) : se !== null && (se.elementType === ut || typeof ut == "object" && ut !== null && ut.$$typeof === M && uS(ut) === se.type) ? ($e = E(se, me.props), $e.ref = Gu(fe, se, me), $e.return = fe, $e) : ($e = hd(me.type, me.key, me.props, null, fe.mode, $e), $e.ref = Gu(fe, se, me), $e.return = fe, $e);
    }
    function Fe(fe, se, me, $e) {
      return se === null || se.tag !== 4 || se.stateNode.containerInfo !== me.containerInfo || se.stateNode.implementation !== me.implementation ? (se = tv(me, fe.mode, $e), se.return = fe, se) : (se = E(se, me.children || []), se.return = fe, se);
    }
    function it(fe, se, me, $e, ut) {
      return se === null || se.tag !== 7 ? (se = ra(me, fe.mode, $e, ut), se.return = fe, se) : (se = E(se, me), se.return = fe, se);
    }
    function Tt(fe, se, me) {
      if (typeof se == "string" && se !== "" || typeof se == "number")
        return se = ev("" + se, fe.mode, me), se.return = fe, se;
      if (typeof se == "object" && se !== null) {
        switch (se.$$typeof) {
          case c:
            return me = hd(se.type, se.key, se.props, null, fe.mode, me), me.ref = Gu(fe, null, se), me.return = fe, me;
          case f:
            return se = tv(se, fe.mode, me), se.return = fe, se;
          case M:
            var $e = se._init;
            return Tt(fe, $e(se._payload), me);
        }
        if (Q(se) || P(se))
          return se = ra(se, fe.mode, me, null), se.return = fe, se;
        Uh(fe, se);
      }
      return null;
    }
    function vt(fe, se, me, $e) {
      var ut = se !== null ? se.key : null;
      if (typeof me == "string" && me !== "" || typeof me == "number")
        return ut !== null ? null : re(fe, se, "" + me, $e);
      if (typeof me == "object" && me !== null) {
        switch (me.$$typeof) {
          case c:
            return me.key === ut ? ve(fe, se, me, $e) : null;
          case f:
            return me.key === ut ? Fe(fe, se, me, $e) : null;
          case M:
            return ut = me._init, vt(
              fe,
              se,
              ut(me._payload),
              $e
            );
        }
        if (Q(me) || P(me))
          return ut !== null ? null : it(fe, se, me, $e, null);
        Uh(fe, me);
      }
      return null;
    }
    function sn(fe, se, me, $e, ut) {
      if (typeof $e == "string" && $e !== "" || typeof $e == "number")
        return fe = fe.get(me) || null, re(se, fe, "" + $e, ut);
      if (typeof $e == "object" && $e !== null) {
        switch ($e.$$typeof) {
          case c:
            return fe = fe.get($e.key === null ? me : $e.key) || null, ve(se, fe, $e, ut);
          case f:
            return fe = fe.get($e.key === null ? me : $e.key) || null, Fe(se, fe, $e, ut);
          case M:
            var Ut = $e._init;
            return sn(fe, se, me, Ut($e._payload), ut);
        }
        if (Q($e) || P($e))
          return fe = fe.get(me) || null, it(se, fe, $e, ut, null);
        Uh(se, $e);
      }
      return null;
    }
    function ft(fe, se, me, $e) {
      for (var ut = null, Ut = null, At = se, jt = se = 0, Zn = null; At !== null && jt < me.length; jt++) {
        At.index > jt ? (Zn = At, At = null) : Zn = At.sibling;
        var Zt = vt(fe, At, me[jt], $e);
        if (Zt === null) {
          At === null && (At = Zn);
          break;
        }
        l && At && Zt.alternate === null && u(fe, At), se = b(Zt, se, jt), Ut === null ? ut = Zt : Ut.sibling = Zt, Ut = Zt, At = Zn;
      }
      if (jt === me.length)
        return m(fe, At), pn && Jo(fe, jt), ut;
      if (At === null) {
        for (; jt < me.length; jt++)
          At = Tt(fe, me[jt], $e), At !== null && (se = b(At, se, jt), Ut === null ? ut = At : Ut.sibling = At, Ut = At);
        return pn && Jo(fe, jt), ut;
      }
      for (At = _(fe, At); jt < me.length; jt++)
        Zn = sn(At, fe, jt, me[jt], $e), Zn !== null && (l && Zn.alternate !== null && At.delete(Zn.key === null ? jt : Zn.key), se = b(Zn, se, jt), Ut === null ? ut = Zn : Ut.sibling = Zn, Ut = Zn);
      return l && At.forEach(function(ro) {
        return u(fe, ro);
      }), pn && Jo(fe, jt), ut;
    }
    function ui(fe, se, me, $e) {
      var ut = P(me);
      if (typeof ut != "function")
        throw Error(o(150));
      if (me = ut.call(me), me == null)
        throw Error(o(151));
      for (var Ut = ut = null, At = se, jt = se = 0, Zn = null, Zt = me.next(); At !== null && !Zt.done; jt++, Zt = me.next()) {
        At.index > jt ? (Zn = At, At = null) : Zn = At.sibling;
        var ro = vt(fe, At, Zt.value, $e);
        if (ro === null) {
          At === null && (At = Zn);
          break;
        }
        l && At && ro.alternate === null && u(fe, At), se = b(ro, se, jt), Ut === null ? ut = ro : Ut.sibling = ro, Ut = ro, At = Zn;
      }
      if (Zt.done)
        return m(
          fe,
          At
        ), pn && Jo(fe, jt), ut;
      if (At === null) {
        for (; !Zt.done; jt++, Zt = me.next())
          Zt = Tt(fe, Zt.value, $e), Zt !== null && (se = b(Zt, se, jt), Ut === null ? ut = Zt : Ut.sibling = Zt, Ut = Zt);
        return pn && Jo(fe, jt), ut;
      }
      for (At = _(fe, At); !Zt.done; jt++, Zt = me.next())
        Zt = sn(At, fe, jt, Zt.value, $e), Zt !== null && (l && Zt.alternate !== null && At.delete(Zt.key === null ? jt : Zt.key), se = b(Zt, se, jt), Ut === null ? ut = Zt : Ut.sibling = Zt, Ut = Zt);
      return l && At.forEach(function(c3) {
        return u(fe, c3);
      }), pn && Jo(fe, jt), ut;
    }
    function _r(fe, se, me, $e) {
      if (typeof me == "object" && me !== null && me.type === h && me.key === null && (me = me.props.children), typeof me == "object" && me !== null) {
        switch (me.$$typeof) {
          case c:
            e: {
              for (var ut = me.key, Ut = se; Ut !== null; ) {
                if (Ut.key === ut) {
                  if (ut = me.type, ut === h) {
                    if (Ut.tag === 7) {
                      m(fe, Ut.sibling), se = E(Ut, me.props.children), se.return = fe, fe = se;
                      break e;
                    }
                  } else if (Ut.elementType === ut || typeof ut == "object" && ut !== null && ut.$$typeof === M && uS(ut) === Ut.type) {
                    m(fe, Ut.sibling), se = E(Ut, me.props), se.ref = Gu(fe, Ut, me), se.return = fe, fe = se;
                    break e;
                  }
                  m(fe, Ut);
                  break;
                } else
                  u(fe, Ut);
                Ut = Ut.sibling;
              }
              me.type === h ? (se = ra(me.props.children, fe.mode, $e, me.key), se.return = fe, fe = se) : ($e = hd(me.type, me.key, me.props, null, fe.mode, $e), $e.ref = Gu(fe, se, me), $e.return = fe, fe = $e);
            }
            return Y(fe);
          case f:
            e: {
              for (Ut = me.key; se !== null; ) {
                if (se.key === Ut)
                  if (se.tag === 4 && se.stateNode.containerInfo === me.containerInfo && se.stateNode.implementation === me.implementation) {
                    m(fe, se.sibling), se = E(se, me.children || []), se.return = fe, fe = se;
                    break e;
                  } else {
                    m(fe, se);
                    break;
                  }
                else
                  u(fe, se);
                se = se.sibling;
              }
              se = tv(me, fe.mode, $e), se.return = fe, fe = se;
            }
            return Y(fe);
          case M:
            return Ut = me._init, _r(fe, se, Ut(me._payload), $e);
        }
        if (Q(me))
          return ft(fe, se, me, $e);
        if (P(me))
          return ui(fe, se, me, $e);
        Uh(fe, me);
      }
      return typeof me == "string" && me !== "" || typeof me == "number" ? (me = "" + me, se !== null && se.tag === 6 ? (m(fe, se.sibling), se = E(se, me), se.return = fe, fe = se) : (m(fe, se), se = ev(me, fe.mode, $e), se.return = fe, fe = se), Y(fe)) : m(fe, se);
    }
    return _r;
  }
  var fl = cS(!0), fS = cS(!1), Wu = {}, mr = St(Wu), Xu = St(Wu), hl = St(Wu);
  function is(l) {
    if (l === Wu)
      throw Error(o(174));
    return l;
  }
  function y0(l, u) {
    Ne(hl, u), Ne(Xu, l), Ne(mr, Wu), l = oe(u), Ye(mr), Ne(mr, l);
  }
  function dl() {
    Ye(mr), Ye(Xu), Ye(hl);
  }
  function hS(l) {
    var u = is(hl.current), m = is(mr.current);
    u = z(m, l.type, u), m !== u && (Ne(Xu, l), Ne(mr, u));
  }
  function _0(l) {
    Xu.current === l && (Ye(mr), Ye(Xu));
  }
  var vn = St(0);
  function Oh(l) {
    for (var u = l; u !== null; ) {
      if (u.tag === 13) {
        var m = u.memoizedState;
        if (m !== null && (m = m.dehydrated, m === null || Jr(m) || Ks(m)))
          return u;
      } else if (u.tag === 19 && u.memoizedProps.revealOrder !== void 0) {
        if (u.flags & 128)
          return u;
      } else if (u.child !== null) {
        u.child.return = u, u = u.child;
        continue;
      }
      if (u === l)
        break;
      for (; u.sibling === null; ) {
        if (u.return === null || u.return === l)
          return null;
        u = u.return;
      }
      u.sibling.return = u.return, u = u.sibling;
    }
    return null;
  }
  var x0 = [];
  function S0() {
    for (var l = 0; l < x0.length; l++) {
      var u = x0[l];
      dt ? u._workInProgressVersionPrimary = null : u._workInProgressVersionSecondary = null;
    }
    x0.length = 0;
  }
  var Fh = a.ReactCurrentDispatcher, gr = a.ReactCurrentBatchConfig, pl = 0, En = null, oi = null, jn = null, kh = !1, Yu = !1, qu = 0, UP = 0;
  function ai() {
    throw Error(o(321));
  }
  function M0(l, u) {
    if (u === null)
      return !1;
    for (var m = 0; m < u.length && m < l.length; m++)
      if (!es(l[m], u[m]))
        return !1;
    return !0;
  }
  function w0(l, u, m, _, E, b) {
    if (pl = b, En = u, u.memoizedState = null, u.updateQueue = null, u.lanes = 0, Fh.current = l === null || l.memoizedState === null ? zP : BP, l = m(_, E), Yu) {
      b = 0;
      do {
        if (Yu = !1, qu = 0, 25 <= b)
          throw Error(o(301));
        b += 1, jn = oi = null, u.updateQueue = null, Fh.current = HP, l = m(_, E);
      } while (Yu);
    }
    if (Fh.current = Gh, u = oi !== null && oi.next !== null, pl = 0, jn = oi = En = null, kh = !1, u)
      throw Error(o(300));
    return l;
  }
  function E0() {
    var l = qu !== 0;
    return qu = 0, l;
  }
  function Ts() {
    var l = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    return jn === null ? En.memoizedState = jn = l : jn = jn.next = l, jn;
  }
  function rs() {
    if (oi === null) {
      var l = En.alternate;
      l = l !== null ? l.memoizedState : null;
    } else
      l = oi.next;
    var u = jn === null ? En.memoizedState : jn.next;
    if (u !== null)
      jn = u, oi = l;
    else {
      if (l === null)
        throw Error(o(310));
      oi = l, l = { memoizedState: oi.memoizedState, baseState: oi.baseState, baseQueue: oi.baseQueue, queue: oi.queue, next: null }, jn === null ? En.memoizedState = jn = l : jn = jn.next = l;
    }
    return jn;
  }
  function Qo(l, u) {
    return typeof u == "function" ? u(l) : u;
  }
  function zh(l) {
    var u = rs(), m = u.queue;
    if (m === null)
      throw Error(o(311));
    m.lastRenderedReducer = l;
    var _ = oi, E = _.baseQueue, b = m.pending;
    if (b !== null) {
      if (E !== null) {
        var Y = E.next;
        E.next = b.next, b.next = Y;
      }
      _.baseQueue = E = b, m.pending = null;
    }
    if (E !== null) {
      b = E.next, _ = _.baseState;
      var re = Y = null, ve = null, Fe = b;
      do {
        var it = Fe.lane;
        if ((pl & it) === it)
          ve !== null && (ve = ve.next = { lane: 0, action: Fe.action, hasEagerState: Fe.hasEagerState, eagerState: Fe.eagerState, next: null }), _ = Fe.hasEagerState ? Fe.eagerState : l(_, Fe.action);
        else {
          var Tt = {
            lane: it,
            action: Fe.action,
            hasEagerState: Fe.hasEagerState,
            eagerState: Fe.eagerState,
            next: null
          };
          ve === null ? (re = ve = Tt, Y = _) : ve = ve.next = Tt, En.lanes |= it, gl |= it;
        }
        Fe = Fe.next;
      } while (Fe !== null && Fe !== b);
      ve === null ? Y = _ : ve.next = re, es(_, u.memoizedState) || (Ki = !0), u.memoizedState = _, u.baseState = Y, u.baseQueue = ve, m.lastRenderedState = _;
    }
    if (l = m.interleaved, l !== null) {
      E = l;
      do
        b = E.lane, En.lanes |= b, gl |= b, E = E.next;
      while (E !== l);
    } else
      E === null && (m.lanes = 0);
    return [u.memoizedState, m.dispatch];
  }
  function Bh(l) {
    var u = rs(), m = u.queue;
    if (m === null)
      throw Error(o(311));
    m.lastRenderedReducer = l;
    var _ = m.dispatch, E = m.pending, b = u.memoizedState;
    if (E !== null) {
      m.pending = null;
      var Y = E = E.next;
      do
        b = l(b, Y.action), Y = Y.next;
      while (Y !== E);
      es(b, u.memoizedState) || (Ki = !0), u.memoizedState = b, u.baseQueue === null && (u.baseState = b), m.lastRenderedState = b;
    }
    return [b, _];
  }
  function dS() {
  }
  function pS(l, u) {
    var m = En, _ = rs(), E = u(), b = !es(_.memoizedState, E);
    if (b && (_.memoizedState = E, Ki = !0), _ = _.queue, Zu(vS.bind(null, m, _, l), [l]), _.getSnapshot !== u || b || jn !== null && jn.memoizedState.tag & 1) {
      if (m.flags |= 2048, ju(9, gS.bind(null, m, _, E, u), void 0, null), On === null)
        throw Error(o(349));
      pl & 30 || mS(m, u, E);
    }
    return E;
  }
  function mS(l, u, m) {
    l.flags |= 16384, l = { getSnapshot: u, value: m }, u = En.updateQueue, u === null ? (u = { lastEffect: null, stores: null }, En.updateQueue = u, u.stores = [l]) : (m = u.stores, m === null ? u.stores = [l] : m.push(l));
  }
  function gS(l, u, m, _) {
    u.value = m, u.getSnapshot = _, yS(u) && vr(l, 1, -1);
  }
  function vS(l, u, m) {
    return m(function() {
      yS(u) && vr(l, 1, -1);
    });
  }
  function yS(l) {
    var u = l.getSnapshot;
    l = l.value;
    try {
      var m = u();
      return !es(l, m);
    } catch {
      return !0;
    }
  }
  function T0(l) {
    var u = Ts();
    return typeof l == "function" && (l = l()), u.memoizedState = u.baseState = l, l = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Qo, lastRenderedState: l }, u.queue = l, l = l.dispatch = kP.bind(null, En, l), [u.memoizedState, l];
  }
  function ju(l, u, m, _) {
    return l = { tag: l, create: u, destroy: m, deps: _, next: null }, u = En.updateQueue, u === null ? (u = { lastEffect: null, stores: null }, En.updateQueue = u, u.lastEffect = l.next = l) : (m = u.lastEffect, m === null ? u.lastEffect = l.next = l : (_ = m.next, m.next = l, l.next = _, u.lastEffect = l)), l;
  }
  function _S() {
    return rs().memoizedState;
  }
  function Hh(l, u, m, _) {
    var E = Ts();
    En.flags |= l, E.memoizedState = ju(1 | u, m, void 0, _ === void 0 ? null : _);
  }
  function Vh(l, u, m, _) {
    var E = rs();
    _ = _ === void 0 ? null : _;
    var b = void 0;
    if (oi !== null) {
      var Y = oi.memoizedState;
      if (b = Y.destroy, _ !== null && M0(_, Y.deps)) {
        E.memoizedState = ju(u, m, b, _);
        return;
      }
    }
    En.flags |= l, E.memoizedState = ju(1 | u, m, b, _);
  }
  function A0(l, u) {
    return Hh(8390656, 8, l, u);
  }
  function Zu(l, u) {
    return Vh(2048, 8, l, u);
  }
  function xS(l, u) {
    return Vh(4, 2, l, u);
  }
  function SS(l, u) {
    return Vh(4, 4, l, u);
  }
  function MS(l, u) {
    if (typeof u == "function")
      return l = l(), u(l), function() {
        u(null);
      };
    if (u != null)
      return l = l(), u.current = l, function() {
        u.current = null;
      };
  }
  function wS(l, u, m) {
    return m = m != null ? m.concat([l]) : null, Vh(4, 4, MS.bind(null, u, l), m);
  }
  function C0() {
  }
  function ES(l, u) {
    var m = rs();
    u = u === void 0 ? null : u;
    var _ = m.memoizedState;
    return _ !== null && u !== null && M0(u, _[1]) ? _[0] : (m.memoizedState = [l, u], l);
  }
  function TS(l, u) {
    var m = rs();
    u = u === void 0 ? null : u;
    var _ = m.memoizedState;
    return _ !== null && u !== null && M0(u, _[1]) ? _[0] : (l = l(), m.memoizedState = [l, u], l);
  }
  function OP(l, u) {
    var m = qt;
    qt = m !== 0 && 4 > m ? m : 4, l(!0);
    var _ = gr.transition;
    gr.transition = {};
    try {
      l(!1), u();
    } finally {
      qt = m, gr.transition = _;
    }
  }
  function AS() {
    return rs().memoizedState;
  }
  function FP(l, u, m) {
    var _ = to(l);
    m = { lane: _, action: m, hasEagerState: !1, eagerState: null, next: null }, CS(l) ? RS(u, m) : (bS(l, u, m), m = xi(), l = vr(l, _, m), l !== null && PS(l, u, _));
  }
  function kP(l, u, m) {
    var _ = to(l), E = { lane: _, action: m, hasEagerState: !1, eagerState: null, next: null };
    if (CS(l))
      RS(u, E);
    else {
      bS(l, u, E);
      var b = l.alternate;
      if (l.lanes === 0 && (b === null || b.lanes === 0) && (b = u.lastRenderedReducer, b !== null))
        try {
          var Y = u.lastRenderedState, re = b(Y, m);
          if (E.hasEagerState = !0, E.eagerState = re, es(re, Y))
            return;
        } catch {
        } finally {
        }
      m = xi(), l = vr(l, _, m), l !== null && PS(l, u, _);
    }
  }
  function CS(l) {
    var u = l.alternate;
    return l === En || u !== null && u === En;
  }
  function RS(l, u) {
    Yu = kh = !0;
    var m = l.pending;
    m === null ? u.next = u : (u.next = m.next, m.next = u), l.pending = u;
  }
  function bS(l, u, m) {
    On !== null && l.mode & 1 && !(Ft & 2) ? (l = u.interleaved, l === null ? (m.next = m, ns === null ? ns = [u] : ns.push(u)) : (m.next = l.next, l.next = m), u.interleaved = m) : (l = u.pending, l === null ? m.next = m : (m.next = l.next, l.next = m), u.pending = m);
  }
  function PS(l, u, m) {
    if (m & 4194240) {
      var _ = u.lanes;
      _ &= l.pendingLanes, m |= _, u.lanes = m, t0(l, m);
    }
  }
  var Gh = { readContext: hr, useCallback: ai, useContext: ai, useEffect: ai, useImperativeHandle: ai, useInsertionEffect: ai, useLayoutEffect: ai, useMemo: ai, useReducer: ai, useRef: ai, useState: ai, useDebugValue: ai, useDeferredValue: ai, useTransition: ai, useMutableSource: ai, useSyncExternalStore: ai, useId: ai, unstable_isNewReconciler: !1 }, zP = { readContext: hr, useCallback: function(l, u) {
    return Ts().memoizedState = [l, u === void 0 ? null : u], l;
  }, useContext: hr, useEffect: A0, useImperativeHandle: function(l, u, m) {
    return m = m != null ? m.concat([l]) : null, Hh(
      4194308,
      4,
      MS.bind(null, u, l),
      m
    );
  }, useLayoutEffect: function(l, u) {
    return Hh(4194308, 4, l, u);
  }, useInsertionEffect: function(l, u) {
    return Hh(4, 2, l, u);
  }, useMemo: function(l, u) {
    var m = Ts();
    return u = u === void 0 ? null : u, l = l(), m.memoizedState = [l, u], l;
  }, useReducer: function(l, u, m) {
    var _ = Ts();
    return u = m !== void 0 ? m(u) : u, _.memoizedState = _.baseState = u, l = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: l, lastRenderedState: u }, _.queue = l, l = l.dispatch = FP.bind(null, En, l), [_.memoizedState, l];
  }, useRef: function(l) {
    var u = Ts();
    return l = { current: l }, u.memoizedState = l;
  }, useState: T0, useDebugValue: C0, useDeferredValue: function(l) {
    var u = T0(l), m = u[0], _ = u[1];
    return A0(function() {
      var E = gr.transition;
      gr.transition = {};
      try {
        _(l);
      } finally {
        gr.transition = E;
      }
    }, [l]), m;
  }, useTransition: function() {
    var l = T0(!1), u = l[0];
    return l = OP.bind(null, l[1]), Ts().memoizedState = l, [u, l];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(l, u, m) {
    var _ = En, E = Ts();
    if (pn) {
      if (m === void 0)
        throw Error(o(407));
      m = m();
    } else {
      if (m = u(), On === null)
        throw Error(o(349));
      pl & 30 || mS(_, u, m);
    }
    E.memoizedState = m;
    var b = { value: m, getSnapshot: u };
    return E.queue = b, A0(vS.bind(null, _, b, l), [l]), _.flags |= 2048, ju(9, gS.bind(null, _, b, m, u), void 0, null), m;
  }, useId: function() {
    var l = Ts(), u = On.identifierPrefix;
    if (pn) {
      var m = Es, _ = ws;
      m = (_ & ~(1 << 32 - on(_) - 1)).toString(32) + m, u = ":" + u + "R" + m, m = qu++, 0 < m && (u += "H" + m.toString(32)), u += ":";
    } else
      m = UP++, u = ":" + u + "r" + m.toString(32) + ":";
    return l.memoizedState = u;
  }, unstable_isNewReconciler: !1 }, BP = {
    readContext: hr,
    useCallback: ES,
    useContext: hr,
    useEffect: Zu,
    useImperativeHandle: wS,
    useInsertionEffect: xS,
    useLayoutEffect: SS,
    useMemo: TS,
    useReducer: zh,
    useRef: _S,
    useState: function() {
      return zh(Qo);
    },
    useDebugValue: C0,
    useDeferredValue: function(l) {
      var u = zh(Qo), m = u[0], _ = u[1];
      return Zu(function() {
        var E = gr.transition;
        gr.transition = {};
        try {
          _(l);
        } finally {
          gr.transition = E;
        }
      }, [l]), m;
    },
    useTransition: function() {
      var l = zh(Qo)[0], u = rs().memoizedState;
      return [l, u];
    },
    useMutableSource: dS,
    useSyncExternalStore: pS,
    useId: AS,
    unstable_isNewReconciler: !1
  }, HP = {
    readContext: hr,
    useCallback: ES,
    useContext: hr,
    useEffect: Zu,
    useImperativeHandle: wS,
    useInsertionEffect: xS,
    useLayoutEffect: SS,
    useMemo: TS,
    useReducer: Bh,
    useRef: _S,
    useState: function() {
      return Bh(Qo);
    },
    useDebugValue: C0,
    useDeferredValue: function(l) {
      var u = Bh(Qo), m = u[0], _ = u[1];
      return Zu(function() {
        var E = gr.transition;
        gr.transition = {};
        try {
          _(l);
        } finally {
          gr.transition = E;
        }
      }, [l]), m;
    },
    useTransition: function() {
      var l = Bh(Qo)[0], u = rs().memoizedState;
      return [l, u];
    },
    useMutableSource: dS,
    useSyncExternalStore: pS,
    useId: AS,
    unstable_isNewReconciler: !1
  };
  function R0(l, u) {
    try {
      var m = "", _ = u;
      do
        m += NP(_), _ = _.return;
      while (_);
      var E = m;
    } catch (b) {
      E = `
Error generating stack: ` + b.message + `
` + b.stack;
    }
    return { value: l, source: u, stack: E };
  }
  function b0(l, u) {
    try {
      console.error(u.value);
    } catch (m) {
      setTimeout(function() {
        throw m;
      });
    }
  }
  var VP = typeof WeakMap == "function" ? WeakMap : Map;
  function IS(l, u, m) {
    m = Ms(-1, m), m.tag = 3, m.payload = { element: null };
    var _ = u.value;
    return m.callback = function() {
      sd || (sd = !0, q0 = _), b0(l, u);
    }, m;
  }
  function LS(l, u, m) {
    m = Ms(-1, m), m.tag = 3;
    var _ = l.type.getDerivedStateFromError;
    if (typeof _ == "function") {
      var E = u.value;
      m.payload = function() {
        return _(E);
      }, m.callback = function() {
        b0(l, u);
      };
    }
    var b = l.stateNode;
    return b !== null && typeof b.componentDidCatch == "function" && (m.callback = function() {
      b0(l, u), typeof _ != "function" && ($s === null ? $s = /* @__PURE__ */ new Set([this]) : $s.add(this));
      var Y = u.stack;
      this.componentDidCatch(u.value, { componentStack: Y !== null ? Y : "" });
    }), m;
  }
  function DS(l, u, m) {
    var _ = l.pingCache;
    if (_ === null) {
      _ = l.pingCache = new VP();
      var E = /* @__PURE__ */ new Set();
      _.set(u, E);
    } else
      E = _.get(u), E === void 0 && (E = /* @__PURE__ */ new Set(), _.set(u, E));
    E.has(m) || (E.add(m), l = n3.bind(null, l, u, m), u.then(l, l));
  }
  function NS(l) {
    do {
      var u;
      if ((u = l.tag === 13) && (u = l.memoizedState, u = u !== null ? u.dehydrated !== null : !0), u)
        return l;
      l = l.return;
    } while (l !== null);
    return null;
  }
  function US(l, u, m, _, E) {
    return l.mode & 1 ? (l.flags |= 65536, l.lanes = E, l) : (l === u ? l.flags |= 65536 : (l.flags |= 128, m.flags |= 131072, m.flags &= -52805, m.tag === 1 && (m.alternate === null ? m.tag = 17 : (u = Ms(-1, 1), u.tag = 2, Qs(m, u))), m.lanes |= 1), l);
  }
  function ss(l) {
    l.flags |= 4;
  }
  function OS(l, u) {
    if (l !== null && l.child === u.child)
      return !0;
    if (u.flags & 16)
      return !1;
    for (l = u.child; l !== null; ) {
      if (l.flags & 12854 || l.subtreeFlags & 12854)
        return !1;
      l = l.sibling;
    }
    return !0;
  }
  var Ku, Ju, Wh, Xh;
  if (xt)
    Ku = function(l, u) {
      for (var m = u.child; m !== null; ) {
        if (m.tag === 5 || m.tag === 6)
          Se(l, m.stateNode);
        else if (m.tag !== 4 && m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === u)
          break;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === u)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }, Ju = function() {
    }, Wh = function(l, u, m, _, E) {
      if (l = l.memoizedProps, l !== _) {
        var b = u.stateNode, Y = is(mr.current);
        m = ce(b, m, l, _, E, Y), (u.updateQueue = m) && ss(u);
      }
    }, Xh = function(l, u, m, _) {
      m !== _ && ss(u);
    };
  else if (H) {
    Ku = function(l, u, m, _) {
      for (var E = u.child; E !== null; ) {
        if (E.tag === 5) {
          var b = E.stateNode;
          m && _ && (b = Nn(b, E.type, E.memoizedProps, E)), Se(l, b);
        } else if (E.tag === 6)
          b = E.stateNode, m && _ && (b = Un(b, E.memoizedProps, E)), Se(l, b);
        else if (E.tag !== 4) {
          if (E.tag === 22 && E.memoizedState !== null)
            b = E.child, b !== null && (b.return = E), Ku(l, E, !0, !0);
          else if (E.child !== null) {
            E.child.return = E, E = E.child;
            continue;
          }
        }
        if (E === u)
          break;
        for (; E.sibling === null; ) {
          if (E.return === null || E.return === u)
            return;
          E = E.return;
        }
        E.sibling.return = E.return, E = E.sibling;
      }
    };
    var FS = function(l, u, m, _) {
      for (var E = u.child; E !== null; ) {
        if (E.tag === 5) {
          var b = E.stateNode;
          m && _ && (b = Nn(b, E.type, E.memoizedProps, E)), Ht(l, b);
        } else if (E.tag === 6)
          b = E.stateNode, m && _ && (b = Un(b, E.memoizedProps, E)), Ht(l, b);
        else if (E.tag !== 4) {
          if (E.tag === 22 && E.memoizedState !== null)
            b = E.child, b !== null && (b.return = E), FS(l, E, !0, !0);
          else if (E.child !== null) {
            E.child.return = E, E = E.child;
            continue;
          }
        }
        if (E === u)
          break;
        for (; E.sibling === null; ) {
          if (E.return === null || E.return === u)
            return;
          E = E.return;
        }
        E.sibling.return = E.return, E = E.sibling;
      }
    };
    Ju = function(l, u) {
      var m = u.stateNode;
      if (!OS(l, u)) {
        l = m.containerInfo;
        var _ = wt(l);
        FS(_, u, !1, !1), m.pendingChildren = _, ss(u), rn(l, _);
      }
    }, Wh = function(l, u, m, _, E) {
      var b = l.stateNode, Y = l.memoizedProps;
      if ((l = OS(l, u)) && Y === _)
        u.stateNode = b;
      else {
        var re = u.stateNode, ve = is(mr.current), Fe = null;
        Y !== _ && (Fe = ce(re, m, Y, _, E, ve)), l && Fe === null ? u.stateNode = b : (b = pt(b, Fe, m, Y, _, u, l, re), ke(b, m, _, E, ve) && ss(u), u.stateNode = b, l ? ss(u) : Ku(b, u, !1, !1));
      }
    }, Xh = function(l, u, m, _) {
      m !== _ ? (l = is(hl.current), m = is(mr.current), u.stateNode = Ee(_, l, m, u), ss(u)) : u.stateNode = l.stateNode;
    };
  } else
    Ju = function() {
    }, Wh = function() {
    }, Xh = function() {
    };
  function Qu(l, u) {
    if (!pn)
      switch (l.tailMode) {
        case "hidden":
          u = l.tail;
          for (var m = null; u !== null; )
            u.alternate !== null && (m = u), u = u.sibling;
          m === null ? l.tail = null : m.sibling = null;
          break;
        case "collapsed":
          m = l.tail;
          for (var _ = null; m !== null; )
            m.alternate !== null && (_ = m), m = m.sibling;
          _ === null ? u || l.tail === null ? l.tail = null : l.tail.sibling = null : _.sibling = null;
      }
  }
  function li(l) {
    var u = l.alternate !== null && l.alternate.child === l.child, m = 0, _ = 0;
    if (u)
      for (var E = l.child; E !== null; )
        m |= E.lanes | E.childLanes, _ |= E.subtreeFlags & 14680064, _ |= E.flags & 14680064, E.return = l, E = E.sibling;
    else
      for (E = l.child; E !== null; )
        m |= E.lanes | E.childLanes, _ |= E.subtreeFlags, _ |= E.flags, E.return = l, E = E.sibling;
    return l.subtreeFlags |= _, l.childLanes = m, u;
  }
  function GP(l, u, m) {
    var _ = u.pendingProps;
    switch (p0(u), u.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return li(u), null;
      case 1:
        return dn(u.type) && kt(), li(u), null;
      case 3:
        return _ = u.stateNode, dl(), Ye(gt), Ye(lt), S0(), _.pendingContext && (_.context = _.pendingContext, _.pendingContext = null), (l === null || l.child === null) && (Vu(u) ? ss(u) : l === null || l.memoizedState.isDehydrated && !(u.flags & 256) || (u.flags |= 1024, Lr !== null && (K0(Lr), Lr = null))), Ju(l, u), li(u), null;
      case 5:
        _0(u), m = is(hl.current);
        var E = u.type;
        if (l !== null && u.stateNode != null)
          Wh(l, u, E, _, m), l.ref !== u.ref && (u.flags |= 512, u.flags |= 2097152);
        else {
          if (!_) {
            if (u.stateNode === null)
              throw Error(o(166));
            return li(u), null;
          }
          if (l = is(mr.current), Vu(u)) {
            if (!Ie)
              throw Error(o(175));
            l = L(u.stateNode, u.type, u.memoizedProps, m, l, u, !Hu), u.updateQueue = l, l !== null && ss(u);
          } else {
            var b = he(E, _, m, l, u);
            Ku(b, u, !1, !1), u.stateNode = b, ke(b, E, _, m, l) && ss(u);
          }
          u.ref !== null && (u.flags |= 512, u.flags |= 2097152);
        }
        return li(u), null;
      case 6:
        if (l && u.stateNode != null)
          Xh(l, u, l.memoizedProps, _);
        else {
          if (typeof _ != "string" && u.stateNode === null)
            throw Error(o(166));
          if (l = is(hl.current), m = is(mr.current), Vu(u)) {
            if (!Ie)
              throw Error(o(176));
            if (l = u.stateNode, _ = u.memoizedProps, (m = F(l, _, u, !Hu)) && (E = ji, E !== null))
              switch (b = (E.mode & 1) !== 0, E.tag) {
                case 3:
                  le(E.stateNode.containerInfo, l, _, b);
                  break;
                case 5:
                  pe(E.type, E.memoizedProps, E.stateNode, l, _, b);
              }
            m && ss(u);
          } else
            u.stateNode = Ee(_, l, m, u);
        }
        return li(u), null;
      case 13:
        if (Ye(vn), _ = u.memoizedState, pn && Zi !== null && u.mode & 1 && !(u.flags & 128)) {
          for (l = Zi; l; )
            l = Ni(l);
          return cl(), u.flags |= 98560, u;
        }
        if (_ !== null && _.dehydrated !== null) {
          if (_ = Vu(u), l === null) {
            if (!_)
              throw Error(o(318));
            if (!Ie)
              throw Error(o(344));
            if (l = u.memoizedState, l = l !== null ? l.dehydrated : null, !l)
              throw Error(o(317));
            $(l, u);
          } else
            cl(), !(u.flags & 128) && (u.memoizedState = null), u.flags |= 4;
          return li(u), null;
        }
        return Lr !== null && (K0(Lr), Lr = null), u.flags & 128 ? (u.lanes = m, u) : (_ = _ !== null, m = !1, l === null ? Vu(u) : m = l.memoizedState !== null, _ && !m && (u.child.flags |= 8192, u.mode & 1 && (l === null || vn.current & 1 ? Hn === 0 && (Hn = 3) : Q0())), u.updateQueue !== null && (u.flags |= 4), li(u), null);
      case 4:
        return dl(), Ju(l, u), l === null && Ge(u.stateNode.containerInfo), li(u), null;
      case 10:
        return l0(u.type._context), li(u), null;
      case 17:
        return dn(u.type) && kt(), li(u), null;
      case 19:
        if (Ye(vn), E = u.memoizedState, E === null)
          return li(u), null;
        if (_ = (u.flags & 128) !== 0, b = E.rendering, b === null)
          if (_)
            Qu(E, !1);
          else {
            if (Hn !== 0 || l !== null && l.flags & 128)
              for (l = u.child; l !== null; ) {
                if (b = Oh(l), b !== null) {
                  for (u.flags |= 128, Qu(E, !1), l = b.updateQueue, l !== null && (u.updateQueue = l, u.flags |= 4), u.subtreeFlags = 0, l = m, _ = u.child; _ !== null; )
                    m = _, E = l, m.flags &= 14680066, b = m.alternate, b === null ? (m.childLanes = 0, m.lanes = E, m.child = null, m.subtreeFlags = 0, m.memoizedProps = null, m.memoizedState = null, m.updateQueue = null, m.dependencies = null, m.stateNode = null) : (m.childLanes = b.childLanes, m.lanes = b.lanes, m.child = b.child, m.subtreeFlags = 0, m.deletions = null, m.memoizedProps = b.memoizedProps, m.memoizedState = b.memoizedState, m.updateQueue = b.updateQueue, m.type = b.type, E = b.dependencies, m.dependencies = E === null ? null : { lanes: E.lanes, firstContext: E.firstContext }), _ = _.sibling;
                  return Ne(vn, vn.current & 1 | 2), u.child;
                }
                l = l.sibling;
              }
            E.tail !== null && qn() > Y0 && (u.flags |= 128, _ = !0, Qu(E, !1), u.lanes = 4194304);
          }
        else {
          if (!_)
            if (l = Oh(b), l !== null) {
              if (u.flags |= 128, _ = !0, l = l.updateQueue, l !== null && (u.updateQueue = l, u.flags |= 4), Qu(E, !0), E.tail === null && E.tailMode === "hidden" && !b.alternate && !pn)
                return li(u), null;
            } else
              2 * qn() - E.renderingStartTime > Y0 && m !== 1073741824 && (u.flags |= 128, _ = !0, Qu(E, !1), u.lanes = 4194304);
          E.isBackwards ? (b.sibling = u.child, u.child = b) : (l = E.last, l !== null ? l.sibling = b : u.child = b, E.last = b);
        }
        return E.tail !== null ? (u = E.tail, E.rendering = u, E.tail = u.sibling, E.renderingStartTime = qn(), u.sibling = null, l = vn.current, Ne(vn, _ ? l & 1 | 2 : l & 1), u) : (li(u), null);
      case 22:
      case 23:
        return J0(), _ = u.memoizedState !== null, l !== null && l.memoizedState !== null !== _ && (u.flags |= 8192), _ && u.mode & 1 ? Ji & 1073741824 && (li(u), xt && u.subtreeFlags & 6 && (u.flags |= 8192)) : li(u), null;
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(o(156, u.tag));
  }
  var WP = a.ReactCurrentOwner, Ki = !1;
  function _i(l, u, m, _) {
    u.child = l === null ? fS(u, null, m, _) : fl(u, l.child, m, _);
  }
  function kS(l, u, m, _, E) {
    m = m.render;
    var b = u.ref;
    return al(u, E), _ = w0(l, u, m, _, b, E), m = E0(), l !== null && !Ki ? (u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~E, As(l, u, E)) : (pn && m && d0(u), u.flags |= 1, _i(l, u, _, E), u.child);
  }
  function zS(l, u, m, _, E) {
    if (l === null) {
      var b = m.type;
      return typeof b == "function" && !$0(b) && b.defaultProps === void 0 && m.compare === null && m.defaultProps === void 0 ? (u.tag = 15, u.type = b, BS(l, u, b, _, E)) : (l = hd(m.type, null, _, u, u.mode, E), l.ref = u.ref, l.return = u, u.child = l);
    }
    if (b = l.child, !(l.lanes & E)) {
      var Y = b.memoizedProps;
      if (m = m.compare, m = m !== null ? m : Ch, m(Y, _) && l.ref === u.ref)
        return As(l, u, E);
    }
    return u.flags |= 1, l = io(b, _), l.ref = u.ref, l.return = u, u.child = l;
  }
  function BS(l, u, m, _, E) {
    if (l !== null && Ch(l.memoizedProps, _) && l.ref === u.ref)
      if (Ki = !1, (l.lanes & E) !== 0)
        l.flags & 131072 && (Ki = !0);
      else
        return u.lanes = l.lanes, As(l, u, E);
    return P0(l, u, m, _, E);
  }
  function HS(l, u, m) {
    var _ = u.pendingProps, E = _.children, b = l !== null ? l.memoizedState : null;
    if (_.mode === "hidden")
      if (!(u.mode & 1))
        u.memoizedState = { baseLanes: 0, cachePool: null }, Ne(ml, Ji), Ji |= m;
      else if (m & 1073741824)
        u.memoizedState = { baseLanes: 0, cachePool: null }, _ = b !== null ? b.baseLanes : m, Ne(ml, Ji), Ji |= _;
      else
        return l = b !== null ? b.baseLanes | m : m, u.lanes = u.childLanes = 1073741824, u.memoizedState = { baseLanes: l, cachePool: null }, u.updateQueue = null, Ne(ml, Ji), Ji |= l, null;
    else
      b !== null ? (_ = b.baseLanes | m, u.memoizedState = null) : _ = m, Ne(ml, Ji), Ji |= _;
    return _i(l, u, E, m), u.child;
  }
  function VS(l, u) {
    var m = u.ref;
    (l === null && m !== null || l !== null && l.ref !== m) && (u.flags |= 512, u.flags |= 2097152);
  }
  function P0(l, u, m, _, E) {
    var b = dn(m) ? Gt : lt.current;
    return b = Qt(u, b), al(u, E), m = w0(l, u, m, _, b, E), _ = E0(), l !== null && !Ki ? (u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~E, As(l, u, E)) : (pn && _ && d0(u), u.flags |= 1, _i(l, u, m, E), u.child);
  }
  function GS(l, u, m, _, E) {
    if (dn(m)) {
      var b = !0;
      Rt(u);
    } else
      b = !1;
    if (al(u, E), u.stateNode === null)
      l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), iS(u, m, _), h0(u, m, _, E), _ = !0;
    else if (l === null) {
      var Y = u.stateNode, re = u.memoizedProps;
      Y.props = re;
      var ve = Y.context, Fe = m.contextType;
      typeof Fe == "object" && Fe !== null ? Fe = hr(Fe) : (Fe = dn(m) ? Gt : lt.current, Fe = Qt(u, Fe));
      var it = m.getDerivedStateFromProps, Tt = typeof it == "function" || typeof Y.getSnapshotBeforeUpdate == "function";
      Tt || typeof Y.UNSAFE_componentWillReceiveProps != "function" && typeof Y.componentWillReceiveProps != "function" || (re !== _ || ve !== Fe) && rS(u, Y, _, Fe), Js = !1;
      var vt = u.memoizedState;
      Y.state = vt, Ih(u, _, Y, E), ve = u.memoizedState, re !== _ || vt !== ve || gt.current || Js ? (typeof it == "function" && (f0(u, m, it, _), ve = u.memoizedState), (re = Js || nS(u, m, re, _, vt, ve, Fe)) ? (Tt || typeof Y.UNSAFE_componentWillMount != "function" && typeof Y.componentWillMount != "function" || (typeof Y.componentWillMount == "function" && Y.componentWillMount(), typeof Y.UNSAFE_componentWillMount == "function" && Y.UNSAFE_componentWillMount()), typeof Y.componentDidMount == "function" && (u.flags |= 4194308)) : (typeof Y.componentDidMount == "function" && (u.flags |= 4194308), u.memoizedProps = _, u.memoizedState = ve), Y.props = _, Y.state = ve, Y.context = Fe, _ = re) : (typeof Y.componentDidMount == "function" && (u.flags |= 4194308), _ = !1);
    } else {
      Y = u.stateNode, Q1(l, u), re = u.memoizedProps, Fe = u.type === u.elementType ? re : Ir(u.type, re), Y.props = Fe, Tt = u.pendingProps, vt = Y.context, ve = m.contextType, typeof ve == "object" && ve !== null ? ve = hr(ve) : (ve = dn(m) ? Gt : lt.current, ve = Qt(u, ve));
      var sn = m.getDerivedStateFromProps;
      (it = typeof sn == "function" || typeof Y.getSnapshotBeforeUpdate == "function") || typeof Y.UNSAFE_componentWillReceiveProps != "function" && typeof Y.componentWillReceiveProps != "function" || (re !== Tt || vt !== ve) && rS(u, Y, _, ve), Js = !1, vt = u.memoizedState, Y.state = vt, Ih(u, _, Y, E);
      var ft = u.memoizedState;
      re !== Tt || vt !== ft || gt.current || Js ? (typeof sn == "function" && (f0(u, m, sn, _), ft = u.memoizedState), (Fe = Js || nS(u, m, Fe, _, vt, ft, ve) || !1) ? (it || typeof Y.UNSAFE_componentWillUpdate != "function" && typeof Y.componentWillUpdate != "function" || (typeof Y.componentWillUpdate == "function" && Y.componentWillUpdate(
        _,
        ft,
        ve
      ), typeof Y.UNSAFE_componentWillUpdate == "function" && Y.UNSAFE_componentWillUpdate(_, ft, ve)), typeof Y.componentDidUpdate == "function" && (u.flags |= 4), typeof Y.getSnapshotBeforeUpdate == "function" && (u.flags |= 1024)) : (typeof Y.componentDidUpdate != "function" || re === l.memoizedProps && vt === l.memoizedState || (u.flags |= 4), typeof Y.getSnapshotBeforeUpdate != "function" || re === l.memoizedProps && vt === l.memoizedState || (u.flags |= 1024), u.memoizedProps = _, u.memoizedState = ft), Y.props = _, Y.state = ft, Y.context = ve, _ = Fe) : (typeof Y.componentDidUpdate != "function" || re === l.memoizedProps && vt === l.memoizedState || (u.flags |= 4), typeof Y.getSnapshotBeforeUpdate != "function" || re === l.memoizedProps && vt === l.memoizedState || (u.flags |= 1024), _ = !1);
    }
    return I0(l, u, m, _, b, E);
  }
  function I0(l, u, m, _, E, b) {
    VS(l, u);
    var Y = (u.flags & 128) !== 0;
    if (!_ && !Y)
      return E && zt(u, m, !1), As(l, u, b);
    _ = u.stateNode, WP.current = u;
    var re = Y && typeof m.getDerivedStateFromError != "function" ? null : _.render();
    return u.flags |= 1, l !== null && Y ? (u.child = fl(u, l.child, null, b), u.child = fl(u, null, re, b)) : _i(l, u, re, b), u.memoizedState = _.state, E && zt(u, m, !0), u.child;
  }
  function WS(l) {
    var u = l.stateNode;
    u.pendingContext ? Ot(l, u.pendingContext, u.pendingContext !== u.context) : u.context && Ot(l, u.context, !1), y0(l, u.containerInfo);
  }
  function XS(l, u, m, _, E) {
    return cl(), v0(E), u.flags |= 256, _i(l, u, m, _), u.child;
  }
  var Yh = { dehydrated: null, treeContext: null, retryLane: 0 };
  function qh(l) {
    return { baseLanes: l, cachePool: null };
  }
  function YS(l, u, m) {
    var _ = u.pendingProps, E = vn.current, b = !1, Y = (u.flags & 128) !== 0, re;
    if ((re = Y) || (re = l !== null && l.memoizedState === null ? !1 : (E & 2) !== 0), re ? (b = !0, u.flags &= -129) : (l === null || l.memoizedState !== null) && (E |= 1), Ne(vn, E & 1), l === null)
      return g0(u), l = u.memoizedState, l !== null && (l = l.dehydrated, l !== null) ? (u.mode & 1 ? Ks(l) ? u.lanes = 8 : u.lanes = 1073741824 : u.lanes = 1, null) : (E = _.children, l = _.fallback, b ? (_ = u.mode, b = u.child, E = { mode: "hidden", children: E }, !(_ & 1) && b !== null ? (b.childLanes = 0, b.pendingProps = E) : b = dd(E, _, 0, null), l = ra(l, _, m, null), b.return = u, l.return = u, b.sibling = l, u.child = b, u.child.memoizedState = qh(m), u.memoizedState = Yh, l) : L0(u, E));
    if (E = l.memoizedState, E !== null) {
      if (re = E.dehydrated, re !== null) {
        if (Y)
          return u.flags & 256 ? (u.flags &= -257, jh(l, u, m, Error(o(422)))) : u.memoizedState !== null ? (u.child = l.child, u.flags |= 128, null) : (b = _.fallback, E = u.mode, _ = dd({ mode: "visible", children: _.children }, E, 0, null), b = ra(b, E, m, null), b.flags |= 2, _.return = u, b.return = u, _.sibling = b, u.child = _, u.mode & 1 && fl(
            u,
            l.child,
            null,
            m
          ), u.child.memoizedState = qh(m), u.memoizedState = Yh, b);
        if (!(u.mode & 1))
          u = jh(l, u, m, null);
        else if (Ks(re))
          u = jh(l, u, m, Error(o(419)));
        else if (_ = (m & l.childLanes) !== 0, Ki || _) {
          if (_ = On, _ !== null) {
            switch (m & -m) {
              case 4:
                b = 2;
                break;
              case 16:
                b = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                b = 32;
                break;
              case 536870912:
                b = 268435456;
                break;
              default:
                b = 0;
            }
            _ = b & (_.suspendedLanes | m) ? 0 : b, _ !== 0 && _ !== E.retryLane && (E.retryLane = _, vr(l, _, -1));
          }
          Q0(), u = jh(l, u, m, Error(o(421)));
        } else
          Jr(re) ? (u.flags |= 128, u.child = l.child, u = i3.bind(null, l), cr(re, u), u = null) : (m = E.treeContext, Ie && (Zi = sl(re), ji = u, pn = !0, Lr = null, Hu = !1, m !== null && (dr[pr++] = ws, dr[pr++] = Es, dr[pr++] = Ko, ws = m.id, Es = m.overflow, Ko = u)), u = L0(u, u.pendingProps.children), u.flags |= 4096);
        return u;
      }
      return b ? (_ = jS(l, u, _.children, _.fallback, m), b = u.child, E = l.child.memoizedState, b.memoizedState = E === null ? qh(m) : { baseLanes: E.baseLanes | m, cachePool: null }, b.childLanes = l.childLanes & ~m, u.memoizedState = Yh, _) : (m = qS(l, u, _.children, m), u.memoizedState = null, m);
    }
    return b ? (_ = jS(l, u, _.children, _.fallback, m), b = u.child, E = l.child.memoizedState, b.memoizedState = E === null ? qh(m) : { baseLanes: E.baseLanes | m, cachePool: null }, b.childLanes = l.childLanes & ~m, u.memoizedState = Yh, _) : (m = qS(l, u, _.children, m), u.memoizedState = null, m);
  }
  function L0(l, u) {
    return u = dd({ mode: "visible", children: u }, l.mode, 0, null), u.return = l, l.child = u;
  }
  function qS(l, u, m, _) {
    var E = l.child;
    return l = E.sibling, m = io(E, { mode: "visible", children: m }), !(u.mode & 1) && (m.lanes = _), m.return = u, m.sibling = null, l !== null && (_ = u.deletions, _ === null ? (u.deletions = [l], u.flags |= 16) : _.push(l)), u.child = m;
  }
  function jS(l, u, m, _, E) {
    var b = u.mode;
    l = l.child;
    var Y = l.sibling, re = { mode: "hidden", children: m };
    return !(b & 1) && u.child !== l ? (m = u.child, m.childLanes = 0, m.pendingProps = re, u.deletions = null) : (m = io(l, re), m.subtreeFlags = l.subtreeFlags & 14680064), Y !== null ? _ = io(Y, _) : (_ = ra(_, b, E, null), _.flags |= 2), _.return = u, m.return = u, m.sibling = _, u.child = m, _;
  }
  function jh(l, u, m, _) {
    return _ !== null && v0(_), fl(u, l.child, null, m), l = L0(u, u.pendingProps.children), l.flags |= 2, u.memoizedState = null, l;
  }
  function ZS(l, u, m) {
    l.lanes |= u;
    var _ = l.alternate;
    _ !== null && (_.lanes |= u), u0(l.return, u, m);
  }
  function D0(l, u, m, _, E) {
    var b = l.memoizedState;
    b === null ? l.memoizedState = { isBackwards: u, rendering: null, renderingStartTime: 0, last: _, tail: m, tailMode: E } : (b.isBackwards = u, b.rendering = null, b.renderingStartTime = 0, b.last = _, b.tail = m, b.tailMode = E);
  }
  function KS(l, u, m) {
    var _ = u.pendingProps, E = _.revealOrder, b = _.tail;
    if (_i(l, u, _.children, m), _ = vn.current, _ & 2)
      _ = _ & 1 | 2, u.flags |= 128;
    else {
      if (l !== null && l.flags & 128)
        e:
          for (l = u.child; l !== null; ) {
            if (l.tag === 13)
              l.memoizedState !== null && ZS(l, m, u);
            else if (l.tag === 19)
              ZS(l, m, u);
            else if (l.child !== null) {
              l.child.return = l, l = l.child;
              continue;
            }
            if (l === u)
              break e;
            for (; l.sibling === null; ) {
              if (l.return === null || l.return === u)
                break e;
              l = l.return;
            }
            l.sibling.return = l.return, l = l.sibling;
          }
      _ &= 1;
    }
    if (Ne(vn, _), !(u.mode & 1))
      u.memoizedState = null;
    else
      switch (E) {
        case "forwards":
          for (m = u.child, E = null; m !== null; )
            l = m.alternate, l !== null && Oh(l) === null && (E = m), m = m.sibling;
          m = E, m === null ? (E = u.child, u.child = null) : (E = m.sibling, m.sibling = null), D0(u, !1, E, m, b);
          break;
        case "backwards":
          for (m = null, E = u.child, u.child = null; E !== null; ) {
            if (l = E.alternate, l !== null && Oh(l) === null) {
              u.child = E;
              break;
            }
            l = E.sibling, E.sibling = m, m = E, E = l;
          }
          D0(u, !0, m, null, b);
          break;
        case "together":
          D0(u, !1, null, null, void 0);
          break;
        default:
          u.memoizedState = null;
      }
    return u.child;
  }
  function As(l, u, m) {
    if (l !== null && (u.dependencies = l.dependencies), gl |= u.lanes, !(m & u.childLanes))
      return null;
    if (l !== null && u.child !== l.child)
      throw Error(o(153));
    if (u.child !== null) {
      for (l = u.child, m = io(l, l.pendingProps), u.child = m, m.return = u; l.sibling !== null; )
        l = l.sibling, m = m.sibling = io(l, l.pendingProps), m.return = u;
      m.sibling = null;
    }
    return u.child;
  }
  function XP(l, u, m) {
    switch (u.tag) {
      case 3:
        WS(u), cl();
        break;
      case 5:
        hS(u);
        break;
      case 1:
        dn(u.type) && Rt(u);
        break;
      case 4:
        y0(u, u.stateNode.containerInfo);
        break;
      case 10:
        J1(u, u.type._context, u.memoizedProps.value);
        break;
      case 13:
        var _ = u.memoizedState;
        if (_ !== null)
          return _.dehydrated !== null ? (Ne(vn, vn.current & 1), u.flags |= 128, null) : m & u.child.childLanes ? YS(l, u, m) : (Ne(vn, vn.current & 1), l = As(l, u, m), l !== null ? l.sibling : null);
        Ne(vn, vn.current & 1);
        break;
      case 19:
        if (_ = (m & u.childLanes) !== 0, l.flags & 128) {
          if (_)
            return KS(
              l,
              u,
              m
            );
          u.flags |= 128;
        }
        var E = u.memoizedState;
        if (E !== null && (E.rendering = null, E.tail = null, E.lastEffect = null), Ne(vn, vn.current), _)
          break;
        return null;
      case 22:
      case 23:
        return u.lanes = 0, HS(l, u, m);
    }
    return As(l, u, m);
  }
  function YP(l, u) {
    switch (p0(u), u.tag) {
      case 1:
        return dn(u.type) && kt(), l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
      case 3:
        return dl(), Ye(gt), Ye(lt), S0(), l = u.flags, l & 65536 && !(l & 128) ? (u.flags = l & -65537 | 128, u) : null;
      case 5:
        return _0(u), null;
      case 13:
        if (Ye(vn), l = u.memoizedState, l !== null && l.dehydrated !== null) {
          if (u.alternate === null)
            throw Error(o(340));
          cl();
        }
        return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
      case 19:
        return Ye(vn), null;
      case 4:
        return dl(), null;
      case 10:
        return l0(u.type._context), null;
      case 22:
      case 23:
        return J0(), null;
      case 24:
        return null;
      default:
        return null;
    }
  }
  var Zh = !1, $o = !1, qP = typeof WeakSet == "function" ? WeakSet : Set, Ke = null;
  function Kh(l, u) {
    var m = l.ref;
    if (m !== null)
      if (typeof m == "function")
        try {
          m(null);
        } catch (_) {
          Fi(l, u, _);
        }
      else
        m.current = null;
  }
  function N0(l, u, m) {
    try {
      m();
    } catch (_) {
      Fi(l, u, _);
    }
  }
  var JS = !1;
  function jP(l, u) {
    for (te(l.containerInfo), Ke = u; Ke !== null; )
      if (l = Ke, u = l.child, (l.subtreeFlags & 1028) !== 0 && u !== null)
        u.return = l, Ke = u;
      else
        for (; Ke !== null; ) {
          l = Ke;
          try {
            var m = l.alternate;
            if (l.flags & 1024)
              switch (l.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (m !== null) {
                    var _ = m.memoizedProps, E = m.memoizedState, b = l.stateNode, Y = b.getSnapshotBeforeUpdate(l.elementType === l.type ? _ : Ir(l.type, _), E);
                    b.__reactInternalSnapshotBeforeUpdate = Y;
                  }
                  break;
                case 3:
                  xt && He(l.stateNode.containerInfo);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(o(163));
              }
          } catch (re) {
            Fi(l, l.return, re);
          }
          if (u = l.sibling, u !== null) {
            u.return = l.return, Ke = u;
            break;
          }
          Ke = l.return;
        }
    return m = JS, JS = !1, m;
  }
  function ea(l, u, m) {
    var _ = u.updateQueue;
    if (_ = _ !== null ? _.lastEffect : null, _ !== null) {
      var E = _ = _.next;
      do {
        if ((E.tag & l) === l) {
          var b = E.destroy;
          E.destroy = void 0, b !== void 0 && N0(u, m, b);
        }
        E = E.next;
      } while (E !== _);
    }
  }
  function $u(l, u) {
    if (u = u.updateQueue, u = u !== null ? u.lastEffect : null, u !== null) {
      var m = u = u.next;
      do {
        if ((m.tag & l) === l) {
          var _ = m.create;
          m.destroy = _();
        }
        m = m.next;
      } while (m !== u);
    }
  }
  function U0(l) {
    var u = l.ref;
    if (u !== null) {
      var m = l.stateNode;
      switch (l.tag) {
        case 5:
          l = J(m);
          break;
        default:
          l = m;
      }
      typeof u == "function" ? u(l) : u.current = l;
    }
  }
  function QS(l, u, m) {
    if ($r && typeof $r.onCommitFiberUnmount == "function")
      try {
        $r.onCommitFiberUnmount(Th, u);
      } catch {
      }
    switch (u.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (l = u.updateQueue, l !== null && (l = l.lastEffect, l !== null)) {
          var _ = l = l.next;
          do {
            var E = _, b = E.destroy;
            E = E.tag, b !== void 0 && (E & 2 || E & 4) && N0(u, m, b), _ = _.next;
          } while (_ !== l);
        }
        break;
      case 1:
        if (Kh(u, m), l = u.stateNode, typeof l.componentWillUnmount == "function")
          try {
            l.props = u.memoizedProps, l.state = u.memoizedState, l.componentWillUnmount();
          } catch (Y) {
            Fi(
              u,
              m,
              Y
            );
          }
        break;
      case 5:
        Kh(u, m);
        break;
      case 4:
        xt ? rM(l, u, m) : H && H && (u = u.stateNode.containerInfo, m = wt(u), It(u, m));
    }
  }
  function $S(l, u, m) {
    for (var _ = u; ; )
      if (QS(l, _, m), _.child === null || xt && _.tag === 4) {
        if (_ === u)
          break;
        for (; _.sibling === null; ) {
          if (_.return === null || _.return === u)
            return;
          _ = _.return;
        }
        _.sibling.return = _.return, _ = _.sibling;
      } else
        _.child.return = _, _ = _.child;
  }
  function eM(l) {
    var u = l.alternate;
    u !== null && (l.alternate = null, eM(u)), l.child = null, l.deletions = null, l.sibling = null, l.tag === 5 && (u = l.stateNode, u !== null && at(u)), l.stateNode = null, l.return = null, l.dependencies = null, l.memoizedProps = null, l.memoizedState = null, l.pendingProps = null, l.stateNode = null, l.updateQueue = null;
  }
  function tM(l) {
    return l.tag === 5 || l.tag === 3 || l.tag === 4;
  }
  function nM(l) {
    e:
      for (; ; ) {
        for (; l.sibling === null; ) {
          if (l.return === null || tM(l.return))
            return null;
          l = l.return;
        }
        for (l.sibling.return = l.return, l = l.sibling; l.tag !== 5 && l.tag !== 6 && l.tag !== 18; ) {
          if (l.flags & 2 || l.child === null || l.tag === 4)
            continue e;
          l.child.return = l, l = l.child;
        }
        if (!(l.flags & 2))
          return l.stateNode;
      }
  }
  function iM(l) {
    if (xt) {
      e: {
        for (var u = l.return; u !== null; ) {
          if (tM(u))
            break e;
          u = u.return;
        }
        throw Error(o(160));
      }
      var m = u;
      switch (m.tag) {
        case 5:
          u = m.stateNode, m.flags & 32 && (ze(u), m.flags &= -33), m = nM(l), F0(l, m, u);
          break;
        case 3:
        case 4:
          u = m.stateNode.containerInfo, m = nM(l), O0(l, m, u);
          break;
        default:
          throw Error(o(161));
      }
    }
  }
  function O0(l, u, m) {
    var _ = l.tag;
    if (_ === 5 || _ === 6)
      l = l.stateNode, u ? Be(m, l, u) : _t(m, l);
    else if (_ !== 4 && (l = l.child, l !== null))
      for (O0(l, u, m), l = l.sibling; l !== null; )
        O0(l, u, m), l = l.sibling;
  }
  function F0(l, u, m) {
    var _ = l.tag;
    if (_ === 5 || _ === 6)
      l = l.stateNode, u ? ht(m, l, u) : Je(m, l);
    else if (_ !== 4 && (l = l.child, l !== null))
      for (F0(l, u, m), l = l.sibling; l !== null; )
        F0(l, u, m), l = l.sibling;
  }
  function rM(l, u, m) {
    for (var _ = u, E = !1, b, Y; ; ) {
      if (!E) {
        E = _.return;
        e:
          for (; ; ) {
            if (E === null)
              throw Error(o(160));
            switch (b = E.stateNode, E.tag) {
              case 5:
                Y = !1;
                break e;
              case 3:
                b = b.containerInfo, Y = !0;
                break e;
              case 4:
                b = b.containerInfo, Y = !0;
                break e;
            }
            E = E.return;
          }
        E = !0;
      }
      if (_.tag === 5 || _.tag === 6)
        $S(l, _, m), Y ? ye(b, _.stateNode) : ee(b, _.stateNode);
      else if (_.tag === 18)
        Y ? X(b, _.stateNode) : Z(b, _.stateNode);
      else if (_.tag === 4) {
        if (_.child !== null) {
          b = _.stateNode.containerInfo, Y = !0, _.child.return = _, _ = _.child;
          continue;
        }
      } else if (QS(l, _, m), _.child !== null) {
        _.child.return = _, _ = _.child;
        continue;
      }
      if (_ === u)
        break;
      for (; _.sibling === null; ) {
        if (_.return === null || _.return === u)
          return;
        _ = _.return, _.tag === 4 && (E = !1);
      }
      _.sibling.return = _.return, _ = _.sibling;
    }
  }
  function k0(l, u) {
    if (xt) {
      switch (u.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ea(3, u, u.return), $u(3, u), ea(5, u, u.return);
          return;
        case 1:
          return;
        case 5:
          var m = u.stateNode;
          if (m != null) {
            var _ = u.memoizedProps;
            l = l !== null ? l.memoizedProps : _;
            var E = u.type, b = u.updateQueue;
            u.updateQueue = null, b !== null && Nt(m, b, E, l, _, u);
          }
          return;
        case 6:
          if (u.stateNode === null)
            throw Error(o(162));
          m = u.memoizedProps, Ue(u.stateNode, l !== null ? l.memoizedProps : m, m);
          return;
        case 3:
          Ie && l !== null && l.memoizedState.isDehydrated && k(u.stateNode.containerInfo);
          return;
        case 12:
          return;
        case 13:
          Jh(u);
          return;
        case 19:
          Jh(u);
          return;
        case 17:
          return;
      }
      throw Error(o(163));
    }
    switch (u.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        ea(3, u, u.return), $u(3, u), ea(5, u, u.return);
        return;
      case 12:
        return;
      case 13:
        Jh(u);
        return;
      case 19:
        Jh(u);
        return;
      case 3:
        Ie && l !== null && l.memoizedState.isDehydrated && k(u.stateNode.containerInfo);
        break;
      case 22:
      case 23:
        return;
    }
    e:
      if (H) {
        switch (u.tag) {
          case 1:
          case 5:
          case 6:
            break e;
          case 3:
          case 4:
            u = u.stateNode, It(u.containerInfo, u.pendingChildren);
            break e;
        }
        throw Error(o(163));
      }
  }
  function Jh(l) {
    var u = l.updateQueue;
    if (u !== null) {
      l.updateQueue = null;
      var m = l.stateNode;
      m === null && (m = l.stateNode = new qP()), u.forEach(function(_) {
        var E = r3.bind(null, l, _);
        m.has(_) || (m.add(_), _.then(E, E));
      });
    }
  }
  function ZP(l, u) {
    for (Ke = u; Ke !== null; ) {
      u = Ke;
      var m = u.deletions;
      if (m !== null)
        for (var _ = 0; _ < m.length; _++) {
          var E = m[_];
          try {
            var b = l;
            xt ? rM(b, E, u) : $S(b, E, u);
            var Y = E.alternate;
            Y !== null && (Y.return = null), E.return = null;
          } catch (ut) {
            Fi(E, u, ut);
          }
        }
      if (m = u.child, u.subtreeFlags & 12854 && m !== null)
        m.return = u, Ke = m;
      else
        for (; Ke !== null; ) {
          u = Ke;
          try {
            var re = u.flags;
            if (re & 32 && xt && ze(u.stateNode), re & 512) {
              var ve = u.alternate;
              if (ve !== null) {
                var Fe = ve.ref;
                Fe !== null && (typeof Fe == "function" ? Fe(null) : Fe.current = null);
              }
            }
            if (re & 8192)
              switch (u.tag) {
                case 13:
                  if (u.memoizedState !== null) {
                    var it = u.alternate;
                    (it === null || it.memoizedState === null) && (X0 = qn());
                  }
                  break;
                case 22:
                  var Tt = u.memoizedState !== null, vt = u.alternate, sn = vt !== null && vt.memoizedState !== null;
                  if (m = u, xt) {
                    e:
                      if (_ = m, E = Tt, b = null, xt)
                        for (var ft = _; ; ) {
                          if (ft.tag === 5) {
                            if (b === null) {
                              b = ft;
                              var ui = ft.stateNode;
                              E ? K(ui) : ie(ft.stateNode, ft.memoizedProps);
                            }
                          } else if (ft.tag === 6) {
                            if (b === null) {
                              var _r = ft.stateNode;
                              E ? be(_r) : xe(_r, ft.memoizedProps);
                            }
                          } else if ((ft.tag !== 22 && ft.tag !== 23 || ft.memoizedState === null || ft === _) && ft.child !== null) {
                            ft.child.return = ft, ft = ft.child;
                            continue;
                          }
                          if (ft === _)
                            break;
                          for (; ft.sibling === null; ) {
                            if (ft.return === null || ft.return === _)
                              break e;
                            b === ft && (b = null), ft = ft.return;
                          }
                          b === ft && (b = null), ft.sibling.return = ft.return, ft = ft.sibling;
                        }
                  }
                  if (Tt && !sn && m.mode & 1) {
                    Ke = m;
                    for (var fe = m.child; fe !== null; ) {
                      for (m = Ke = fe; Ke !== null; ) {
                        _ = Ke;
                        var se = _.child;
                        switch (_.tag) {
                          case 0:
                          case 11:
                          case 14:
                          case 15:
                            ea(4, _, _.return);
                            break;
                          case 1:
                            Kh(_, _.return);
                            var me = _.stateNode;
                            if (typeof me.componentWillUnmount == "function") {
                              var $e = _.return;
                              try {
                                me.props = _.memoizedProps, me.state = _.memoizedState, me.componentWillUnmount();
                              } catch (ut) {
                                Fi(
                                  _,
                                  $e,
                                  ut
                                );
                              }
                            }
                            break;
                          case 5:
                            Kh(_, _.return);
                            break;
                          case 22:
                            if (_.memoizedState !== null) {
                              aM(m);
                              continue;
                            }
                        }
                        se !== null ? (se.return = _, Ke = se) : aM(m);
                      }
                      fe = fe.sibling;
                    }
                  }
              }
            switch (re & 4102) {
              case 2:
                iM(u), u.flags &= -3;
                break;
              case 6:
                iM(u), u.flags &= -3, k0(u.alternate, u);
                break;
              case 4096:
                u.flags &= -4097;
                break;
              case 4100:
                u.flags &= -4097, k0(u.alternate, u);
                break;
              case 4:
                k0(u.alternate, u);
            }
          } catch (ut) {
            Fi(u, u.return, ut);
          }
          if (m = u.sibling, m !== null) {
            m.return = u.return, Ke = m;
            break;
          }
          Ke = u.return;
        }
    }
  }
  function KP(l, u, m) {
    Ke = l, sM(l);
  }
  function sM(l, u, m) {
    for (var _ = (l.mode & 1) !== 0; Ke !== null; ) {
      var E = Ke, b = E.child;
      if (E.tag === 22 && _) {
        var Y = E.memoizedState !== null || Zh;
        if (!Y) {
          var re = E.alternate, ve = re !== null && re.memoizedState !== null || $o;
          re = Zh;
          var Fe = $o;
          if (Zh = Y, ($o = ve) && !Fe)
            for (Ke = E; Ke !== null; )
              Y = Ke, ve = Y.child, Y.tag === 22 && Y.memoizedState !== null ? lM(E) : ve !== null ? (ve.return = Y, Ke = ve) : lM(E);
          for (; b !== null; )
            Ke = b, sM(b), b = b.sibling;
          Ke = E, Zh = re, $o = Fe;
        }
        oM(l);
      } else
        E.subtreeFlags & 8772 && b !== null ? (b.return = E, Ke = b) : oM(l);
    }
  }
  function oM(l) {
    for (; Ke !== null; ) {
      var u = Ke;
      if (u.flags & 8772) {
        var m = u.alternate;
        try {
          if (u.flags & 8772)
            switch (u.tag) {
              case 0:
              case 11:
              case 15:
                $o || $u(5, u);
                break;
              case 1:
                var _ = u.stateNode;
                if (u.flags & 4 && !$o)
                  if (m === null)
                    _.componentDidMount();
                  else {
                    var E = u.elementType === u.type ? m.memoizedProps : Ir(u.type, m.memoizedProps);
                    _.componentDidUpdate(E, m.memoizedState, _.__reactInternalSnapshotBeforeUpdate);
                  }
                var b = u.updateQueue;
                b !== null && eS(u, b, _);
                break;
              case 3:
                var Y = u.updateQueue;
                if (Y !== null) {
                  if (m = null, u.child !== null)
                    switch (u.child.tag) {
                      case 5:
                        m = J(u.child.stateNode);
                        break;
                      case 1:
                        m = u.child.stateNode;
                    }
                  eS(u, Y, m);
                }
                break;
              case 5:
                var re = u.stateNode;
                m === null && u.flags & 4 && Ze(re, u.type, u.memoizedProps, u);
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (Ie && u.memoizedState === null) {
                  var ve = u.alternate;
                  if (ve !== null) {
                    var Fe = ve.memoizedState;
                    if (Fe !== null) {
                      var it = Fe.dehydrated;
                      it !== null && V(it);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
                break;
              default:
                throw Error(o(163));
            }
          $o || u.flags & 512 && U0(u);
        } catch (Tt) {
          Fi(u, u.return, Tt);
        }
      }
      if (u === l) {
        Ke = null;
        break;
      }
      if (m = u.sibling, m !== null) {
        m.return = u.return, Ke = m;
        break;
      }
      Ke = u.return;
    }
  }
  function aM(l) {
    for (; Ke !== null; ) {
      var u = Ke;
      if (u === l) {
        Ke = null;
        break;
      }
      var m = u.sibling;
      if (m !== null) {
        m.return = u.return, Ke = m;
        break;
      }
      Ke = u.return;
    }
  }
  function lM(l) {
    for (; Ke !== null; ) {
      var u = Ke;
      try {
        switch (u.tag) {
          case 0:
          case 11:
          case 15:
            var m = u.return;
            try {
              $u(4, u);
            } catch (ve) {
              Fi(u, m, ve);
            }
            break;
          case 1:
            var _ = u.stateNode;
            if (typeof _.componentDidMount == "function") {
              var E = u.return;
              try {
                _.componentDidMount();
              } catch (ve) {
                Fi(u, E, ve);
              }
            }
            var b = u.return;
            try {
              U0(u);
            } catch (ve) {
              Fi(u, b, ve);
            }
            break;
          case 5:
            var Y = u.return;
            try {
              U0(u);
            } catch (ve) {
              Fi(u, Y, ve);
            }
        }
      } catch (ve) {
        Fi(u, u.return, ve);
      }
      if (u === l) {
        Ke = null;
        break;
      }
      var re = u.sibling;
      if (re !== null) {
        re.return = u.return, Ke = re;
        break;
      }
      Ke = u.return;
    }
  }
  var Qh = 0, $h = 1, ed = 2, td = 3, nd = 4;
  if (typeof Symbol == "function" && Symbol.for) {
    var ec = Symbol.for;
    Qh = ec("selector.component"), $h = ec("selector.has_pseudo_class"), ed = ec("selector.role"), td = ec("selector.test_id"), nd = ec("selector.text");
  }
  function z0(l) {
    var u = Le(l);
    if (u != null) {
      if (typeof u.memoizedProps["data-testname"] != "string")
        throw Error(o(364));
      return u;
    }
    if (l = O(l), l === null)
      throw Error(o(362));
    return l.stateNode.current;
  }
  function B0(l, u) {
    switch (u.$$typeof) {
      case Qh:
        if (l.type === u.value)
          return !0;
        break;
      case $h:
        e: {
          u = u.value, l = [l, 0];
          for (var m = 0; m < l.length; ) {
            var _ = l[m++], E = l[m++], b = u[E];
            if (_.tag !== 5 || !Ae(_)) {
              for (; b != null && B0(_, b); )
                E++, b = u[E];
              if (E === u.length) {
                u = !0;
                break e;
              } else
                for (_ = _.child; _ !== null; )
                  l.push(_, E), _ = _.sibling;
            }
          }
          u = !1;
        }
        return u;
      case ed:
        if (l.tag === 5 && Ce(l.stateNode, u.value))
          return !0;
        break;
      case nd:
        if ((l.tag === 5 || l.tag === 6) && (l = Te(l), l !== null && 0 <= l.indexOf(u.value)))
          return !0;
        break;
      case td:
        if (l.tag === 5 && (l = l.memoizedProps["data-testname"], typeof l == "string" && l.toLowerCase() === u.value.toLowerCase()))
          return !0;
        break;
      default:
        throw Error(o(365));
    }
    return !1;
  }
  function H0(l) {
    switch (l.$$typeof) {
      case Qh:
        return "<" + (D(l.value) || "Unknown") + ">";
      case $h:
        return ":has(" + (H0(l) || "") + ")";
      case ed:
        return '[role="' + l.value + '"]';
      case nd:
        return '"' + l.value + '"';
      case td:
        return '[data-testname="' + l.value + '"]';
      default:
        throw Error(o(365));
    }
  }
  function uM(l, u) {
    var m = [];
    l = [l, 0];
    for (var _ = 0; _ < l.length; ) {
      var E = l[_++], b = l[_++], Y = u[b];
      if (E.tag !== 5 || !Ae(E)) {
        for (; Y != null && B0(E, Y); )
          b++, Y = u[b];
        if (b === u.length)
          m.push(E);
        else
          for (E = E.child; E !== null; )
            l.push(E, b), E = E.sibling;
      }
    }
    return m;
  }
  function V0(l, u) {
    if (!q)
      throw Error(o(363));
    l = z0(l), l = uM(l, u), u = [], l = Array.from(l);
    for (var m = 0; m < l.length; ) {
      var _ = l[m++];
      if (_.tag === 5)
        Ae(_) || u.push(_.stateNode);
      else
        for (_ = _.child; _ !== null; )
          l.push(_), _ = _.sibling;
    }
    return u;
  }
  var JP = Math.ceil, id = a.ReactCurrentDispatcher, G0 = a.ReactCurrentOwner, bn = a.ReactCurrentBatchConfig, Ft = 0, On = null, Fn = null, ti = 0, Ji = 0, ml = St(0), Hn = 0, tc = null, gl = 0, rd = 0, W0 = 0, nc = null, Ui = null, X0 = 0, Y0 = 1 / 0;
  function vl() {
    Y0 = qn() + 500;
  }
  var sd = !1, q0 = null, $s = null, od = !1, eo = null, ad = 0, ic = 0, j0 = null, ld = -1, ud = 0;
  function xi() {
    return Ft & 6 ? qn() : ld !== -1 ? ld : ld = qn();
  }
  function to(l) {
    return l.mode & 1 ? Ft & 2 && ti !== 0 ? ti & -ti : DP.transition !== null ? (ud === 0 && (l = Mh, Mh <<= 1, !(Mh & 4194240) && (Mh = 64), ud = l), ud) : (l = qt, l !== 0 ? l : Me()) : 1;
  }
  function vr(l, u, m) {
    if (50 < ic)
      throw ic = 0, j0 = null, Error(o(185));
    var _ = cd(l, u);
    return _ === null ? null : (Bu(_, u, m), (!(Ft & 2) || _ !== On) && (_ === On && (!(Ft & 2) && (rd |= u), Hn === 4 && no(_, ti)), Oi(_, m), u === 1 && Ft === 0 && !(l.mode & 1) && (vl(), Ah && ts())), _);
  }
  function cd(l, u) {
    l.lanes |= u;
    var m = l.alternate;
    for (m !== null && (m.lanes |= u), m = l, l = l.return; l !== null; )
      l.childLanes |= u, m = l.alternate, m !== null && (m.childLanes |= u), m = l, l = l.return;
    return m.tag === 3 ? m.stateNode : null;
  }
  function Oi(l, u) {
    var m = l.callbackNode;
    EP(l, u);
    var _ = Eh(l, l === On ? ti : 0);
    if (_ === 0)
      m !== null && Z1(m), l.callbackNode = null, l.callbackPriority = 0;
    else if (u = _ & -_, l.callbackPriority !== u) {
      if (m != null && Z1(m), u === 1)
        l.tag === 0 ? LP(fM.bind(null, l)) : K1(fM.bind(null, l)), We ? et(function() {
          Ft === 0 && ts();
        }) : n0(i0, ts), m = null;
      else {
        switch (j1(_)) {
          case 1:
            m = i0;
            break;
          case 4:
            m = RP;
            break;
          case 16:
            m = r0;
            break;
          case 536870912:
            m = bP;
            break;
          default:
            m = r0;
        }
        m = xM(m, cM.bind(null, l));
      }
      l.callbackPriority = u, l.callbackNode = m;
    }
  }
  function cM(l, u) {
    if (ld = -1, ud = 0, Ft & 6)
      throw Error(o(327));
    var m = l.callbackNode;
    if (ia() && l.callbackNode !== m)
      return null;
    var _ = Eh(l, l === On ? ti : 0);
    if (_ === 0)
      return null;
    if (_ & 30 || _ & l.expiredLanes || u)
      u = fd(l, _);
    else {
      u = _;
      var E = Ft;
      Ft |= 2;
      var b = pM();
      (On !== l || ti !== u) && (vl(), ta(l, u));
      do
        try {
          e3();
          break;
        } catch (re) {
          dM(l, re);
        }
      while (1);
      a0(), id.current = b, Ft = E, Fn !== null ? u = 0 : (On = null, ti = 0, u = Hn);
    }
    if (u !== 0) {
      if (u === 2 && (E = $g(l), E !== 0 && (_ = E, u = Z0(l, E))), u === 1)
        throw m = tc, ta(l, 0), no(l, _), Oi(l, qn()), m;
      if (u === 6)
        no(l, _);
      else {
        if (E = l.current.alternate, !(_ & 30) && !QP(E) && (u = fd(l, _), u === 2 && (b = $g(l), b !== 0 && (_ = b, u = Z0(l, b))), u === 1))
          throw m = tc, ta(l, 0), no(l, _), Oi(l, qn()), m;
        switch (l.finishedWork = E, l.finishedLanes = _, u) {
          case 0:
          case 1:
            throw Error(o(345));
          case 2:
            na(l, Ui);
            break;
          case 3:
            if (no(l, _), (_ & 130023424) === _ && (u = X0 + 500 - qn(), 10 < u)) {
              if (Eh(l, 0) !== 0)
                break;
              if (E = l.suspendedLanes, (E & _) !== _) {
                xi(), l.pingedLanes |= l.suspendedLanes & E;
                break;
              }
              l.timeoutHandle = De(na.bind(null, l, Ui), u);
              break;
            }
            na(l, Ui);
            break;
          case 4:
            if (no(l, _), (_ & 4194240) === _)
              break;
            for (u = l.eventTimes, E = -1; 0 < _; ) {
              var Y = 31 - on(_);
              b = 1 << Y, Y = u[Y], Y > E && (E = Y), _ &= ~b;
            }
            if (_ = E, _ = qn() - _, _ = (120 > _ ? 120 : 480 > _ ? 480 : 1080 > _ ? 1080 : 1920 > _ ? 1920 : 3e3 > _ ? 3e3 : 4320 > _ ? 4320 : 1960 * JP(_ / 1960)) - _, 10 < _) {
              l.timeoutHandle = De(na.bind(null, l, Ui), _);
              break;
            }
            na(l, Ui);
            break;
          case 5:
            na(l, Ui);
            break;
          default:
            throw Error(o(329));
        }
      }
    }
    return Oi(l, qn()), l.callbackNode === m ? cM.bind(null, l) : null;
  }
  function Z0(l, u) {
    var m = nc;
    return l.current.memoizedState.isDehydrated && (ta(l, u).flags |= 256), l = fd(l, u), l !== 2 && (u = Ui, Ui = m, u !== null && K0(u)), l;
  }
  function K0(l) {
    Ui === null ? Ui = l : Ui.push.apply(Ui, l);
  }
  function QP(l) {
    for (var u = l; ; ) {
      if (u.flags & 16384) {
        var m = u.updateQueue;
        if (m !== null && (m = m.stores, m !== null))
          for (var _ = 0; _ < m.length; _++) {
            var E = m[_], b = E.getSnapshot;
            E = E.value;
            try {
              if (!es(b(), E))
                return !1;
            } catch {
              return !1;
            }
          }
      }
      if (m = u.child, u.subtreeFlags & 16384 && m !== null)
        m.return = u, u = m;
      else {
        if (u === l)
          break;
        for (; u.sibling === null; ) {
          if (u.return === null || u.return === l)
            return !0;
          u = u.return;
        }
        u.sibling.return = u.return, u = u.sibling;
      }
    }
    return !0;
  }
  function no(l, u) {
    for (u &= ~W0, u &= ~rd, l.suspendedLanes |= u, l.pingedLanes &= ~u, l = l.expirationTimes; 0 < u; ) {
      var m = 31 - on(u), _ = 1 << m;
      l[m] = -1, u &= ~_;
    }
  }
  function fM(l) {
    if (Ft & 6)
      throw Error(o(327));
    ia();
    var u = Eh(l, 0);
    if (!(u & 1))
      return Oi(l, qn()), null;
    var m = fd(l, u);
    if (l.tag !== 0 && m === 2) {
      var _ = $g(l);
      _ !== 0 && (u = _, m = Z0(l, _));
    }
    if (m === 1)
      throw m = tc, ta(l, 0), no(l, u), Oi(l, qn()), m;
    if (m === 6)
      throw Error(o(345));
    return l.finishedWork = l.current.alternate, l.finishedLanes = u, na(l, Ui), Oi(l, qn()), null;
  }
  function hM(l) {
    eo !== null && eo.tag === 0 && !(Ft & 6) && ia();
    var u = Ft;
    Ft |= 1;
    var m = bn.transition, _ = qt;
    try {
      if (bn.transition = null, qt = 1, l)
        return l();
    } finally {
      qt = _, bn.transition = m, Ft = u, !(Ft & 6) && ts();
    }
  }
  function J0() {
    Ji = ml.current, Ye(ml);
  }
  function ta(l, u) {
    l.finishedWork = null, l.finishedLanes = 0;
    var m = l.timeoutHandle;
    if (m !== Mt && (l.timeoutHandle = Mt, st(m)), Fn !== null)
      for (m = Fn.return; m !== null; ) {
        var _ = m;
        switch (p0(_), _.tag) {
          case 1:
            _ = _.type.childContextTypes, _ != null && kt();
            break;
          case 3:
            dl(), Ye(gt), Ye(lt), S0();
            break;
          case 5:
            _0(_);
            break;
          case 4:
            dl();
            break;
          case 13:
            Ye(vn);
            break;
          case 19:
            Ye(vn);
            break;
          case 10:
            l0(_.type._context);
            break;
          case 22:
          case 23:
            J0();
        }
        m = m.return;
      }
    if (On = l, Fn = l = io(l.current, null), ti = Ji = u, Hn = 0, tc = null, W0 = rd = gl = 0, Ui = nc = null, ns !== null) {
      for (u = 0; u < ns.length; u++)
        if (m = ns[u], _ = m.interleaved, _ !== null) {
          m.interleaved = null;
          var E = _.next, b = m.pending;
          if (b !== null) {
            var Y = b.next;
            b.next = E, _.next = Y;
          }
          m.pending = _;
        }
      ns = null;
    }
    return l;
  }
  function dM(l, u) {
    do {
      var m = Fn;
      try {
        if (a0(), Fh.current = Gh, kh) {
          for (var _ = En.memoizedState; _ !== null; ) {
            var E = _.queue;
            E !== null && (E.pending = null), _ = _.next;
          }
          kh = !1;
        }
        if (pl = 0, jn = oi = En = null, Yu = !1, qu = 0, G0.current = null, m === null || m.return === null) {
          Hn = 1, tc = u, Fn = null;
          break;
        }
        e: {
          var b = l, Y = m.return, re = m, ve = u;
          if (u = ti, re.flags |= 32768, ve !== null && typeof ve == "object" && typeof ve.then == "function") {
            var Fe = ve, it = re, Tt = it.tag;
            if (!(it.mode & 1) && (Tt === 0 || Tt === 11 || Tt === 15)) {
              var vt = it.alternate;
              vt ? (it.updateQueue = vt.updateQueue, it.memoizedState = vt.memoizedState, it.lanes = vt.lanes) : (it.updateQueue = null, it.memoizedState = null);
            }
            var sn = NS(Y);
            if (sn !== null) {
              sn.flags &= -257, US(sn, Y, re, b, u), sn.mode & 1 && DS(b, Fe, u), u = sn, ve = Fe;
              var ft = u.updateQueue;
              if (ft === null) {
                var ui = /* @__PURE__ */ new Set();
                ui.add(ve), u.updateQueue = ui;
              } else
                ft.add(ve);
              break e;
            } else {
              if (!(u & 1)) {
                DS(b, Fe, u), Q0();
                break e;
              }
              ve = Error(o(426));
            }
          } else if (pn && re.mode & 1) {
            var _r = NS(Y);
            if (_r !== null) {
              !(_r.flags & 65536) && (_r.flags |= 256), US(_r, Y, re, b, u), v0(ve);
              break e;
            }
          }
          b = ve, Hn !== 4 && (Hn = 2), nc === null ? nc = [b] : nc.push(b), ve = R0(ve, re), re = Y;
          do {
            switch (re.tag) {
              case 3:
                re.flags |= 65536, u &= -u, re.lanes |= u;
                var fe = IS(re, ve, u);
                $1(re, fe);
                break e;
              case 1:
                b = ve;
                var se = re.type, me = re.stateNode;
                if (!(re.flags & 128) && (typeof se.getDerivedStateFromError == "function" || me !== null && typeof me.componentDidCatch == "function" && ($s === null || !$s.has(me)))) {
                  re.flags |= 65536, u &= -u, re.lanes |= u;
                  var $e = LS(re, b, u);
                  $1(re, $e);
                  break e;
                }
            }
            re = re.return;
          } while (re !== null);
        }
        gM(m);
      } catch (ut) {
        u = ut, Fn === m && m !== null && (Fn = m = m.return);
        continue;
      }
      break;
    } while (1);
  }
  function pM() {
    var l = id.current;
    return id.current = Gh, l === null ? Gh : l;
  }
  function Q0() {
    (Hn === 0 || Hn === 3 || Hn === 2) && (Hn = 4), On === null || !(gl & 268435455) && !(rd & 268435455) || no(On, ti);
  }
  function fd(l, u) {
    var m = Ft;
    Ft |= 2;
    var _ = pM();
    On === l && ti === u || ta(l, u);
    do
      try {
        $P();
        break;
      } catch (E) {
        dM(l, E);
      }
    while (1);
    if (a0(), Ft = m, id.current = _, Fn !== null)
      throw Error(o(261));
    return On = null, ti = 0, Hn;
  }
  function $P() {
    for (; Fn !== null; )
      mM(Fn);
  }
  function e3() {
    for (; Fn !== null && !AP(); )
      mM(Fn);
  }
  function mM(l) {
    var u = _M(l.alternate, l, Ji);
    l.memoizedProps = l.pendingProps, u === null ? gM(l) : Fn = u, G0.current = null;
  }
  function gM(l) {
    var u = l;
    do {
      var m = u.alternate;
      if (l = u.return, u.flags & 32768) {
        if (m = YP(m, u), m !== null) {
          m.flags &= 32767, Fn = m;
          return;
        }
        if (l !== null)
          l.flags |= 32768, l.subtreeFlags = 0, l.deletions = null;
        else {
          Hn = 6, Fn = null;
          return;
        }
      } else if (m = GP(m, u, Ji), m !== null) {
        Fn = m;
        return;
      }
      if (u = u.sibling, u !== null) {
        Fn = u;
        return;
      }
      Fn = u = l;
    } while (u !== null);
    Hn === 0 && (Hn = 5);
  }
  function na(l, u) {
    var m = qt, _ = bn.transition;
    try {
      bn.transition = null, qt = 1, t3(l, u, m);
    } finally {
      bn.transition = _, qt = m;
    }
    return null;
  }
  function t3(l, u, m) {
    do
      ia();
    while (eo !== null);
    if (Ft & 6)
      throw Error(o(327));
    var _ = l.finishedWork, E = l.finishedLanes;
    if (_ === null)
      return null;
    if (l.finishedWork = null, l.finishedLanes = 0, _ === l.current)
      throw Error(o(177));
    l.callbackNode = null, l.callbackPriority = 0;
    var b = _.lanes | _.childLanes;
    if (TP(l, b), l === On && (Fn = On = null, ti = 0), !(_.subtreeFlags & 2064) && !(_.flags & 2064) || od || (od = !0, xM(r0, function() {
      return ia(), null;
    })), b = (_.flags & 15990) !== 0, _.subtreeFlags & 15990 || b) {
      b = bn.transition, bn.transition = null;
      var Y = qt;
      qt = 1;
      var re = Ft;
      Ft |= 4, G0.current = null, jP(l, _), ZP(l, _), ne(l.containerInfo), l.current = _, KP(_), CP(), Ft = re, qt = Y, bn.transition = b;
    } else
      l.current = _;
    if (od && (od = !1, eo = l, ad = E), b = l.pendingLanes, b === 0 && ($s = null), PP(_.stateNode), Oi(l, qn()), u !== null)
      for (m = l.onRecoverableError, _ = 0; _ < u.length; _++)
        m(u[_]);
    if (sd)
      throw sd = !1, l = q0, q0 = null, l;
    return ad & 1 && l.tag !== 0 && ia(), b = l.pendingLanes, b & 1 ? l === j0 ? ic++ : (ic = 0, j0 = l) : ic = 0, ts(), null;
  }
  function ia() {
    if (eo !== null) {
      var l = j1(ad), u = bn.transition, m = qt;
      try {
        if (bn.transition = null, qt = 16 > l ? 16 : l, eo === null)
          var _ = !1;
        else {
          if (l = eo, eo = null, ad = 0, Ft & 6)
            throw Error(o(331));
          var E = Ft;
          for (Ft |= 4, Ke = l.current; Ke !== null; ) {
            var b = Ke, Y = b.child;
            if (Ke.flags & 16) {
              var re = b.deletions;
              if (re !== null) {
                for (var ve = 0; ve < re.length; ve++) {
                  var Fe = re[ve];
                  for (Ke = Fe; Ke !== null; ) {
                    var it = Ke;
                    switch (it.tag) {
                      case 0:
                      case 11:
                      case 15:
                        ea(8, it, b);
                    }
                    var Tt = it.child;
                    if (Tt !== null)
                      Tt.return = it, Ke = Tt;
                    else
                      for (; Ke !== null; ) {
                        it = Ke;
                        var vt = it.sibling, sn = it.return;
                        if (eM(it), it === Fe) {
                          Ke = null;
                          break;
                        }
                        if (vt !== null) {
                          vt.return = sn, Ke = vt;
                          break;
                        }
                        Ke = sn;
                      }
                  }
                }
                var ft = b.alternate;
                if (ft !== null) {
                  var ui = ft.child;
                  if (ui !== null) {
                    ft.child = null;
                    do {
                      var _r = ui.sibling;
                      ui.sibling = null, ui = _r;
                    } while (ui !== null);
                  }
                }
                Ke = b;
              }
            }
            if (b.subtreeFlags & 2064 && Y !== null)
              Y.return = b, Ke = Y;
            else
              e:
                for (; Ke !== null; ) {
                  if (b = Ke, b.flags & 2048)
                    switch (b.tag) {
                      case 0:
                      case 11:
                      case 15:
                        ea(9, b, b.return);
                    }
                  var fe = b.sibling;
                  if (fe !== null) {
                    fe.return = b.return, Ke = fe;
                    break e;
                  }
                  Ke = b.return;
                }
          }
          var se = l.current;
          for (Ke = se; Ke !== null; ) {
            Y = Ke;
            var me = Y.child;
            if (Y.subtreeFlags & 2064 && me !== null)
              me.return = Y, Ke = me;
            else
              e:
                for (Y = se; Ke !== null; ) {
                  if (re = Ke, re.flags & 2048)
                    try {
                      switch (re.tag) {
                        case 0:
                        case 11:
                        case 15:
                          $u(9, re);
                      }
                    } catch (ut) {
                      Fi(re, re.return, ut);
                    }
                  if (re === Y) {
                    Ke = null;
                    break e;
                  }
                  var $e = re.sibling;
                  if ($e !== null) {
                    $e.return = re.return, Ke = $e;
                    break e;
                  }
                  Ke = re.return;
                }
          }
          if (Ft = E, ts(), $r && typeof $r.onPostCommitFiberRoot == "function")
            try {
              $r.onPostCommitFiberRoot(Th, l);
            } catch {
            }
          _ = !0;
        }
        return _;
      } finally {
        qt = m, bn.transition = u;
      }
    }
    return !1;
  }
  function vM(l, u, m) {
    u = R0(m, u), u = IS(l, u, 1), Qs(l, u), u = xi(), l = cd(l, 1), l !== null && (Bu(l, 1, u), Oi(l, u));
  }
  function Fi(l, u, m) {
    if (l.tag === 3)
      vM(l, l, m);
    else
      for (; u !== null; ) {
        if (u.tag === 3) {
          vM(u, l, m);
          break;
        } else if (u.tag === 1) {
          var _ = u.stateNode;
          if (typeof u.type.getDerivedStateFromError == "function" || typeof _.componentDidCatch == "function" && ($s === null || !$s.has(_))) {
            l = R0(m, l), l = LS(u, l, 1), Qs(u, l), l = xi(), u = cd(u, 1), u !== null && (Bu(u, 1, l), Oi(u, l));
            break;
          }
        }
        u = u.return;
      }
  }
  function n3(l, u, m) {
    var _ = l.pingCache;
    _ !== null && _.delete(u), u = xi(), l.pingedLanes |= l.suspendedLanes & m, On === l && (ti & m) === m && (Hn === 4 || Hn === 3 && (ti & 130023424) === ti && 500 > qn() - X0 ? ta(l, 0) : W0 |= m), Oi(l, u);
  }
  function yM(l, u) {
    u === 0 && (l.mode & 1 ? (u = wh, wh <<= 1, !(wh & 130023424) && (wh = 4194304)) : u = 1);
    var m = xi();
    l = cd(l, u), l !== null && (Bu(l, u, m), Oi(l, m));
  }
  function i3(l) {
    var u = l.memoizedState, m = 0;
    u !== null && (m = u.retryLane), yM(l, m);
  }
  function r3(l, u) {
    var m = 0;
    switch (l.tag) {
      case 13:
        var _ = l.stateNode, E = l.memoizedState;
        E !== null && (m = E.retryLane);
        break;
      case 19:
        _ = l.stateNode;
        break;
      default:
        throw Error(o(314));
    }
    _ !== null && _.delete(u), yM(l, m);
  }
  var _M;
  _M = function(l, u, m) {
    if (l !== null)
      if (l.memoizedProps !== u.pendingProps || gt.current)
        Ki = !0;
      else {
        if (!(l.lanes & m) && !(u.flags & 128))
          return Ki = !1, XP(l, u, m);
        Ki = !!(l.flags & 131072);
      }
    else
      Ki = !1, pn && u.flags & 1048576 && sS(u, Nh, u.index);
    switch (u.lanes = 0, u.tag) {
      case 2:
        var _ = u.type;
        l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), l = u.pendingProps;
        var E = Qt(u, lt.current);
        al(u, m), E = w0(null, u, _, l, E, m);
        var b = E0();
        return u.flags |= 1, typeof E == "object" && E !== null && typeof E.render == "function" && E.$$typeof === void 0 ? (u.tag = 1, u.memoizedState = null, u.updateQueue = null, dn(_) ? (b = !0, Rt(u)) : b = !1, u.memoizedState = E.state !== null && E.state !== void 0 ? E.state : null, c0(u), E.updater = Lh, u.stateNode = E, E._reactInternals = u, h0(u, _, l, m), u = I0(null, u, _, !0, b, m)) : (u.tag = 0, pn && b && d0(u), _i(null, u, E, m), u = u.child), u;
      case 16:
        _ = u.elementType;
        e: {
          switch (l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), l = u.pendingProps, E = _._init, _ = E(_._payload), u.type = _, E = u.tag = o3(_), l = Ir(_, l), E) {
            case 0:
              u = P0(null, u, _, l, m);
              break e;
            case 1:
              u = GS(
                null,
                u,
                _,
                l,
                m
              );
              break e;
            case 11:
              u = kS(null, u, _, l, m);
              break e;
            case 14:
              u = zS(null, u, _, Ir(_.type, l), m);
              break e;
          }
          throw Error(o(306, _, ""));
        }
        return u;
      case 0:
        return _ = u.type, E = u.pendingProps, E = u.elementType === _ ? E : Ir(_, E), P0(l, u, _, E, m);
      case 1:
        return _ = u.type, E = u.pendingProps, E = u.elementType === _ ? E : Ir(_, E), GS(l, u, _, E, m);
      case 3:
        e: {
          if (WS(u), l === null)
            throw Error(o(387));
          _ = u.pendingProps, b = u.memoizedState, E = b.element, Q1(l, u), Ih(u, _, null, m);
          var Y = u.memoizedState;
          if (_ = Y.element, Ie && b.isDehydrated)
            if (b = {
              element: _,
              isDehydrated: !1,
              cache: Y.cache,
              transitions: Y.transitions
            }, u.updateQueue.baseState = b, u.memoizedState = b, u.flags & 256) {
              E = Error(o(423)), u = XS(l, u, _, m, E);
              break e;
            } else if (_ !== E) {
              E = Error(o(424)), u = XS(l, u, _, m, E);
              break e;
            } else
              for (Ie && (Zi = Zo(u.stateNode.containerInfo), ji = u, pn = !0, Lr = null, Hu = !1), m = fS(u, null, _, m), u.child = m; m; )
                m.flags = m.flags & -3 | 4096, m = m.sibling;
          else {
            if (cl(), _ === E) {
              u = As(l, u, m);
              break e;
            }
            _i(l, u, _, m);
          }
          u = u.child;
        }
        return u;
      case 5:
        return hS(u), l === null && g0(u), _ = u.type, E = u.pendingProps, b = l !== null ? l.memoizedProps : null, Y = E.children, we(_, E) ? Y = null : b !== null && we(_, b) && (u.flags |= 32), VS(l, u), _i(l, u, Y, m), u.child;
      case 6:
        return l === null && g0(u), null;
      case 13:
        return YS(l, u, m);
      case 4:
        return y0(u, u.stateNode.containerInfo), _ = u.pendingProps, l === null ? u.child = fl(u, null, _, m) : _i(l, u, _, m), u.child;
      case 11:
        return _ = u.type, E = u.pendingProps, E = u.elementType === _ ? E : Ir(_, E), kS(l, u, _, E, m);
      case 7:
        return _i(l, u, u.pendingProps, m), u.child;
      case 8:
        return _i(l, u, u.pendingProps.children, m), u.child;
      case 12:
        return _i(l, u, u.pendingProps.children, m), u.child;
      case 10:
        e: {
          if (_ = u.type._context, E = u.pendingProps, b = u.memoizedProps, Y = E.value, J1(u, _, Y), b !== null)
            if (es(b.value, Y)) {
              if (b.children === E.children && !gt.current) {
                u = As(l, u, m);
                break e;
              }
            } else
              for (b = u.child, b !== null && (b.return = u); b !== null; ) {
                var re = b.dependencies;
                if (re !== null) {
                  Y = b.child;
                  for (var ve = re.firstContext; ve !== null; ) {
                    if (ve.context === _) {
                      if (b.tag === 1) {
                        ve = Ms(-1, m & -m), ve.tag = 2;
                        var Fe = b.updateQueue;
                        if (Fe !== null) {
                          Fe = Fe.shared;
                          var it = Fe.pending;
                          it === null ? ve.next = ve : (ve.next = it.next, it.next = ve), Fe.pending = ve;
                        }
                      }
                      b.lanes |= m, ve = b.alternate, ve !== null && (ve.lanes |= m), u0(b.return, m, u), re.lanes |= m;
                      break;
                    }
                    ve = ve.next;
                  }
                } else if (b.tag === 10)
                  Y = b.type === u.type ? null : b.child;
                else if (b.tag === 18) {
                  if (Y = b.return, Y === null)
                    throw Error(o(341));
                  Y.lanes |= m, re = Y.alternate, re !== null && (re.lanes |= m), u0(Y, m, u), Y = b.sibling;
                } else
                  Y = b.child;
                if (Y !== null)
                  Y.return = b;
                else
                  for (Y = b; Y !== null; ) {
                    if (Y === u) {
                      Y = null;
                      break;
                    }
                    if (b = Y.sibling, b !== null) {
                      b.return = Y.return, Y = b;
                      break;
                    }
                    Y = Y.return;
                  }
                b = Y;
              }
          _i(l, u, E.children, m), u = u.child;
        }
        return u;
      case 9:
        return E = u.type, _ = u.pendingProps.children, al(u, m), E = hr(E), _ = _(E), u.flags |= 1, _i(l, u, _, m), u.child;
      case 14:
        return _ = u.type, E = Ir(_, u.pendingProps), E = Ir(_.type, E), zS(l, u, _, E, m);
      case 15:
        return BS(l, u, u.type, u.pendingProps, m);
      case 17:
        return _ = u.type, E = u.pendingProps, E = u.elementType === _ ? E : Ir(_, E), l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), u.tag = 1, dn(_) ? (l = !0, Rt(u)) : l = !1, al(u, m), iS(u, _, E), h0(u, _, E, m), I0(null, u, _, !0, l, m);
      case 19:
        return KS(l, u, m);
      case 22:
        return HS(l, u, m);
    }
    throw Error(o(156, u.tag));
  };
  function xM(l, u) {
    return n0(l, u);
  }
  function s3(l, u, m, _) {
    this.tag = l, this.key = m, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = u, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = _, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function yr(l, u, m, _) {
    return new s3(l, u, m, _);
  }
  function $0(l) {
    return l = l.prototype, !(!l || !l.isReactComponent);
  }
  function o3(l) {
    if (typeof l == "function")
      return $0(l) ? 1 : 0;
    if (l != null) {
      if (l = l.$$typeof, l === w)
        return 11;
      if (l === S)
        return 14;
    }
    return 2;
  }
  function io(l, u) {
    var m = l.alternate;
    return m === null ? (m = yr(l.tag, u, l.key, l.mode), m.elementType = l.elementType, m.type = l.type, m.stateNode = l.stateNode, m.alternate = l, l.alternate = m) : (m.pendingProps = u, m.type = l.type, m.flags = 0, m.subtreeFlags = 0, m.deletions = null), m.flags = l.flags & 14680064, m.childLanes = l.childLanes, m.lanes = l.lanes, m.child = l.child, m.memoizedProps = l.memoizedProps, m.memoizedState = l.memoizedState, m.updateQueue = l.updateQueue, u = l.dependencies, m.dependencies = u === null ? null : { lanes: u.lanes, firstContext: u.firstContext }, m.sibling = l.sibling, m.index = l.index, m.ref = l.ref, m;
  }
  function hd(l, u, m, _, E, b) {
    var Y = 2;
    if (_ = l, typeof l == "function")
      $0(l) && (Y = 1);
    else if (typeof l == "string")
      Y = 5;
    else
      e:
        switch (l) {
          case h:
            return ra(m.children, E, b, u);
          case d:
            Y = 8, E |= 8;
            break;
          case p:
            return l = yr(12, m, u, E | 2), l.elementType = p, l.lanes = b, l;
          case x:
            return l = yr(13, m, u, E), l.elementType = x, l.lanes = b, l;
          case g:
            return l = yr(19, m, u, E), l.elementType = g, l.lanes = b, l;
          case T:
            return dd(m, E, b, u);
          default:
            if (typeof l == "object" && l !== null)
              switch (l.$$typeof) {
                case v:
                  Y = 10;
                  break e;
                case y:
                  Y = 9;
                  break e;
                case w:
                  Y = 11;
                  break e;
                case S:
                  Y = 14;
                  break e;
                case M:
                  Y = 16, _ = null;
                  break e;
              }
            throw Error(o(130, l == null ? l : typeof l, ""));
        }
    return u = yr(Y, m, u, E), u.elementType = l, u.type = _, u.lanes = b, u;
  }
  function ra(l, u, m, _) {
    return l = yr(7, l, _, u), l.lanes = m, l;
  }
  function dd(l, u, m, _) {
    return l = yr(22, l, _, u), l.elementType = T, l.lanes = m, l.stateNode = {}, l;
  }
  function ev(l, u, m) {
    return l = yr(6, l, null, u), l.lanes = m, l;
  }
  function tv(l, u, m) {
    return u = yr(4, l.children !== null ? l.children : [], l.key, u), u.lanes = m, u.stateNode = { containerInfo: l.containerInfo, pendingChildren: null, implementation: l.implementation }, u;
  }
  function a3(l, u, m, _, E) {
    this.tag = u, this.containerInfo = l, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Mt, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = e0(0), this.expirationTimes = e0(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = e0(0), this.identifierPrefix = _, this.onRecoverableError = E, Ie && (this.mutableSourceEagerHydrationData = null);
  }
  function SM(l, u, m, _, E, b, Y, re, ve) {
    return l = new a3(l, u, m, re, ve), u === 1 ? (u = 1, b === !0 && (u |= 8)) : u = 0, b = yr(3, null, null, u), l.current = b, b.stateNode = l, b.memoizedState = { element: _, isDehydrated: m, cache: null, transitions: null }, c0(b), l;
  }
  function MM(l) {
    if (!l)
      return mt;
    l = l._reactInternals;
    e: {
      if (C(l) !== l || l.tag !== 1)
        throw Error(o(170));
      var u = l;
      do {
        switch (u.tag) {
          case 3:
            u = u.stateNode.context;
            break e;
          case 1:
            if (dn(u.type)) {
              u = u.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        u = u.return;
      } while (u !== null);
      throw Error(o(171));
    }
    if (l.tag === 1) {
      var m = l.type;
      if (dn(m))
        return gn(l, m, u);
    }
    return u;
  }
  function wM(l) {
    var u = l._reactInternals;
    if (u === void 0)
      throw typeof l.render == "function" ? Error(o(188)) : (l = Object.keys(l).join(","), Error(o(268, l)));
    return l = G(u), l === null ? null : l.stateNode;
  }
  function EM(l, u) {
    if (l = l.memoizedState, l !== null && l.dehydrated !== null) {
      var m = l.retryLane;
      l.retryLane = m !== 0 && m < u ? m : u;
    }
  }
  function nv(l, u) {
    EM(l, u), (l = l.alternate) && EM(l, u);
  }
  function l3(l) {
    return l = G(l), l === null ? null : l.stateNode;
  }
  function u3() {
    return null;
  }
  return t.attemptContinuousHydration = function(l) {
    if (l.tag === 13) {
      var u = xi();
      vr(l, 134217728, u), nv(l, 134217728);
    }
  }, t.attemptHydrationAtCurrentPriority = function(l) {
    if (l.tag === 13) {
      var u = xi(), m = to(l);
      vr(l, m, u), nv(l, m);
    }
  }, t.attemptSynchronousHydration = function(l) {
    switch (l.tag) {
      case 3:
        var u = l.stateNode;
        if (u.current.memoizedState.isDehydrated) {
          var m = zu(u.pendingLanes);
          m !== 0 && (t0(u, m | 1), Oi(u, qn()), !(Ft & 6) && (vl(), ts()));
        }
        break;
      case 13:
        var _ = xi();
        hM(function() {
          return vr(l, 1, _);
        }), nv(l, 1);
    }
  }, t.batchedUpdates = function(l, u) {
    var m = Ft;
    Ft |= 1;
    try {
      return l(u);
    } finally {
      Ft = m, Ft === 0 && (vl(), Ah && ts());
    }
  }, t.createComponentSelector = function(l) {
    return { $$typeof: Qh, value: l };
  }, t.createContainer = function(l, u, m, _, E, b, Y) {
    return SM(l, u, !1, null, m, _, E, b, Y);
  }, t.createHasPseudoClassSelector = function(l) {
    return { $$typeof: $h, value: l };
  }, t.createHydrationContainer = function(l, u, m, _, E, b, Y, re, ve) {
    return l = SM(m, _, !0, l, E, b, Y, re, ve), l.context = MM(null), m = l.current, _ = xi(), E = to(m), b = Ms(_, E), b.callback = u ?? null, Qs(m, b), l.current.lanes = E, Bu(l, E, _), Oi(l, _), l;
  }, t.createPortal = function(l, u, m) {
    var _ = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return { $$typeof: f, key: _ == null ? null : "" + _, children: l, containerInfo: u, implementation: m };
  }, t.createRoleSelector = function(l) {
    return { $$typeof: ed, value: l };
  }, t.createTestNameSelector = function(l) {
    return { $$typeof: td, value: l };
  }, t.createTextSelector = function(l) {
    return { $$typeof: nd, value: l };
  }, t.deferredUpdates = function(l) {
    var u = qt, m = bn.transition;
    try {
      return bn.transition = null, qt = 16, l();
    } finally {
      qt = u, bn.transition = m;
    }
  }, t.discreteUpdates = function(l, u, m, _, E) {
    var b = qt, Y = bn.transition;
    try {
      return bn.transition = null, qt = 1, l(u, m, _, E);
    } finally {
      qt = b, bn.transition = Y, Ft === 0 && vl();
    }
  }, t.findAllNodes = V0, t.findBoundingRects = function(l, u) {
    if (!q)
      throw Error(o(363));
    u = V0(l, u), l = [];
    for (var m = 0; m < u.length; m++)
      l.push(ue(u[m]));
    for (u = l.length - 1; 0 < u; u--) {
      m = l[u];
      for (var _ = m.x, E = _ + m.width, b = m.y, Y = b + m.height, re = u - 1; 0 <= re; re--)
        if (u !== re) {
          var ve = l[re], Fe = ve.x, it = Fe + ve.width, Tt = ve.y, vt = Tt + ve.height;
          if (_ >= Fe && b >= Tt && E <= it && Y <= vt) {
            l.splice(u, 1);
            break;
          } else if (_ !== Fe || m.width !== ve.width || vt < b || Tt > Y) {
            if (!(b !== Tt || m.height !== ve.height || it < _ || Fe > E)) {
              Fe > _ && (ve.width += Fe - _, ve.x = _), it < E && (ve.width = E - Fe), l.splice(u, 1);
              break;
            }
          } else {
            Tt > b && (ve.height += Tt - b, ve.y = b), vt < Y && (ve.height = Y - Tt), l.splice(u, 1);
            break;
          }
        }
    }
    return l;
  }, t.findHostInstance = wM, t.findHostInstanceWithNoPortals = function(l) {
    return l = N(l), l = l !== null ? j(l) : null, l === null ? null : l.stateNode;
  }, t.findHostInstanceWithWarning = function(l) {
    return wM(l);
  }, t.flushControlled = function(l) {
    var u = Ft;
    Ft |= 1;
    var m = bn.transition, _ = qt;
    try {
      bn.transition = null, qt = 1, l();
    } finally {
      qt = _, bn.transition = m, Ft = u, Ft === 0 && (vl(), ts());
    }
  }, t.flushPassiveEffects = ia, t.flushSync = hM, t.focusWithin = function(l, u) {
    if (!q)
      throw Error(o(363));
    for (l = z0(l), u = uM(l, u), u = Array.from(u), l = 0; l < u.length; ) {
      var m = u[l++];
      if (!Ae(m)) {
        if (m.tag === 5 && ot(m.stateNode))
          return !0;
        for (m = m.child; m !== null; )
          u.push(m), m = m.sibling;
      }
    }
    return !1;
  }, t.getCurrentUpdatePriority = function() {
    return qt;
  }, t.getFindAllNodesFailureDescription = function(l, u) {
    if (!q)
      throw Error(o(363));
    var m = 0, _ = [];
    l = [z0(l), 0];
    for (var E = 0; E < l.length; ) {
      var b = l[E++], Y = l[E++], re = u[Y];
      if ((b.tag !== 5 || !Ae(b)) && (B0(b, re) && (_.push(H0(re)), Y++, Y > m && (m = Y)), Y < u.length))
        for (b = b.child; b !== null; )
          l.push(b, Y), b = b.sibling;
    }
    if (m < u.length) {
      for (l = []; m < u.length; m++)
        l.push(H0(u[m]));
      return `findAllNodes was able to match part of the selector:
  ` + (_.join(" > ") + `

No matching component was found for:
  `) + l.join(" > ");
    }
    return null;
  }, t.getPublicRootInstance = function(l) {
    if (l = l.current, !l.child)
      return null;
    switch (l.child.tag) {
      case 5:
        return J(l.child.stateNode);
      default:
        return l.child.stateNode;
    }
  }, t.injectIntoDevTools = function(l) {
    if (l = { bundleType: l.bundleType, version: l.version, rendererPackageName: l.rendererPackageName, rendererConfig: l.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: a.ReactCurrentDispatcher, findHostInstanceByFiber: l3, findFiberByHostInstance: l.findFiberByHostInstance || u3, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.0.0-fc46dba67-20220329" }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
      l = !1;
    else {
      var u = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (u.isDisabled || !u.supportsFiber)
        l = !0;
      else {
        try {
          Th = u.inject(l), $r = u;
        } catch {
        }
        l = !!u.checkDCE;
      }
    }
    return l;
  }, t.isAlreadyRendering = function() {
    return !1;
  }, t.observeVisibleRects = function(l, u, m, _) {
    if (!q)
      throw Error(o(363));
    l = V0(l, u);
    var E = Ve(l, m, _).disconnect;
    return { disconnect: function() {
      E();
    } };
  }, t.registerMutableSourceForHydration = function(l, u) {
    var m = u._getVersion;
    m = m(u._source), l.mutableSourceEagerHydrationData == null ? l.mutableSourceEagerHydrationData = [u, m] : l.mutableSourceEagerHydrationData.push(u, m);
  }, t.runWithPriority = function(l, u) {
    var m = qt;
    try {
      return qt = l, u();
    } finally {
      qt = m;
    }
  }, t.shouldError = function() {
    return null;
  }, t.shouldSuspend = function() {
    return !1;
  }, t.updateContainer = function(l, u, m, _) {
    var E = u.current, b = xi(), Y = to(E);
    return m = MM(m), u.context === null ? u.context = m : u.pendingContext = m, u = Ms(b, Y), u.payload = { element: l }, _ = _ === void 0 ? null : _, _ !== null && (u.callback = _), Qs(E, u), l = vr(E, Y, b), l !== null && Ph(l, E, Y), Y;
  }, t;
};
(function(n) {
  n.exports = B4;
})(k4);
const H4 = /* @__PURE__ */ Q_(G_), V4 = (n) => typeof n == "object" && typeof n.then == "function", Na = [];
function kb(n, e, t = (i, r) => i === r) {
  if (n === e)
    return !0;
  if (!n || !e)
    return !1;
  const i = n.length;
  if (e.length !== i)
    return !1;
  for (let r = 0; r < i; r++)
    if (!t(n[r], e[r]))
      return !1;
  return !0;
}
function zb(n, e = null, t = !1, i = {}) {
  e === null && (e = [n]);
  for (const s of Na)
    if (kb(e, s.keys, s.equal)) {
      if (t)
        return;
      if (Object.prototype.hasOwnProperty.call(s, "error"))
        throw s.error;
      if (Object.prototype.hasOwnProperty.call(s, "response"))
        return i.lifespan && i.lifespan > 0 && (s.timeout && clearTimeout(s.timeout), s.timeout = setTimeout(s.remove, i.lifespan)), s.response;
      if (!t)
        throw s.promise;
    }
  const r = {
    keys: e,
    equal: i.equal,
    remove: () => {
      const s = Na.indexOf(r);
      s !== -1 && Na.splice(s, 1);
    },
    promise: (
      // Execute the promise
      (V4(n) ? n : n(...e)).then((s) => {
        r.response = s, i.lifespan && i.lifespan > 0 && (r.timeout = setTimeout(r.remove, i.lifespan));
      }).catch((s) => r.error = s)
    )
  };
  if (Na.push(r), !t)
    throw r.promise;
}
const G4 = (n, e, t) => zb(n, e, !1, t), W4 = (n, e, t) => void zb(n, e, !0, t), X4 = (n) => {
  if (n === void 0 || n.length === 0)
    Na.splice(0, Na.length);
  else {
    const e = Na.find((t) => kb(n, t.keys, t.equal));
    e && e.remove();
  }
}, z1 = {}, Bb = (n) => void Object.assign(z1, n);
function Y4(n, e) {
  function t(h, {
    args: d = [],
    attach: p,
    ...v
  }, y) {
    let w = `${h[0].toUpperCase()}${h.slice(1)}`, x;
    if (h === "primitive") {
      if (v.object === void 0)
        throw new Error("R3F: Primitives without 'object' are invalid!");
      const g = v.object;
      x = Wl(g, {
        type: h,
        root: y,
        attach: p,
        primitive: !0
      });
    } else {
      const g = z1[w];
      if (!g)
        throw new Error(`R3F: ${w} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
      if (!Array.isArray(d))
        throw new Error("R3F: The args prop must be an array!");
      x = Wl(new g(...d), {
        type: h,
        root: y,
        attach: p,
        // Save args in case we need to reconstruct later for HMR
        memoizedProps: {
          args: d
        }
      });
    }
    return x.__r3f.attach === void 0 && (x instanceof Dt ? x.__r3f.attach = "geometry" : x instanceof si && (x.__r3f.attach = "material")), w !== "inject" && vy(x, v), x;
  }
  function i(h, d) {
    let p = !1;
    if (d) {
      var v, y;
      (v = d.__r3f) != null && v.attach ? gy(h, d, d.__r3f.attach) : d.isObject3D && h.isObject3D && (h.add(d), p = !0), p || (y = h.__r3f) == null || y.objects.push(d), d.__r3f || Wl(d, {}), d.__r3f.parent = h, X_(d), Xl(d);
    }
  }
  function r(h, d, p) {
    let v = !1;
    if (d) {
      var y, w;
      if ((y = d.__r3f) != null && y.attach)
        gy(h, d, d.__r3f.attach);
      else if (d.isObject3D && h.isObject3D) {
        d.parent = h, d.dispatchEvent({
          type: "added"
        }), h.dispatchEvent({
          type: "childadded",
          child: d
        });
        const x = h.children.filter((S) => S !== d), g = x.indexOf(p);
        h.children = [...x.slice(0, g), d, ...x.slice(g)], v = !0;
      }
      v || (w = h.__r3f) == null || w.objects.push(d), d.__r3f || Wl(d, {}), d.__r3f.parent = h, X_(d), Xl(d);
    }
  }
  function s(h, d, p = !1) {
    h && [...h].forEach((v) => o(d, v, p));
  }
  function o(h, d, p) {
    if (d) {
      var v, y, w;
      if (d.__r3f && (d.__r3f.parent = null), (v = h.__r3f) != null && v.objects && (h.__r3f.objects = h.__r3f.objects.filter((T) => T !== d)), (y = d.__r3f) != null && y.attach)
        yT(h, d, d.__r3f.attach);
      else if (d.isObject3D && h.isObject3D) {
        var x;
        h.remove(d), (x = d.__r3f) != null && x.root && eB(Zp(d), d);
      }
      const S = (w = d.__r3f) == null ? void 0 : w.primitive, M = !S && (p === void 0 ? d.dispose !== null : p);
      if (!S) {
        var g;
        s((g = d.__r3f) == null ? void 0 : g.objects, d, M), s(d.children, d, M);
      }
      if (delete d.__r3f, M && d.dispose && d.type !== "Scene") {
        const T = () => {
          try {
            d.dispose();
          } catch {
          }
        };
        typeof IS_REACT_ACT_ENVIRONMENT > "u" ? jf.unstable_scheduleCallback(jf.unstable_IdlePriority, T) : T();
      }
      Xl(h);
    }
  }
  function a(h, d, p, v) {
    var y;
    const w = (y = h.__r3f) == null ? void 0 : y.parent;
    if (!w)
      return;
    const x = t(d, p, h.__r3f.root);
    if (h.children) {
      for (const g of h.children)
        g.__r3f && i(x, g);
      h.children = h.children.filter((g) => !g.__r3f);
    }
    h.__r3f.objects.forEach((g) => i(x, g)), h.__r3f.objects = [], h.__r3f.autoRemovedBeforeAppend || o(w, h), x.parent && (x.__r3f.autoRemovedBeforeAppend = !0), i(w, x), x.raycast && x.__r3f.eventCount && Zp(x).getState().internal.interaction.push(x), [v, v.alternate].forEach((g) => {
      g !== null && (g.stateNode = x, g.ref && (typeof g.ref == "function" ? g.ref(x) : g.ref.current = x));
    });
  }
  const c = () => console.warn("Text is not allowed in the R3F tree! This could be stray whitespace or characters.");
  return {
    reconciler: H4({
      createInstance: t,
      removeChild: o,
      appendChild: i,
      appendInitialChild: i,
      insertBefore: r,
      supportsMutation: !0,
      isPrimaryRenderer: !1,
      supportsPersistence: !1,
      supportsHydration: !1,
      noTimeout: -1,
      appendChildToContainer: (h, d) => {
        if (!d)
          return;
        const p = h.getState().scene;
        p.__r3f && (p.__r3f.root = h, i(p, d));
      },
      removeChildFromContainer: (h, d) => {
        d && o(h.getState().scene, d);
      },
      insertInContainerBefore: (h, d, p) => {
        if (!d || !p)
          return;
        const v = h.getState().scene;
        v.__r3f && r(v, d, p);
      },
      getRootHostContext: () => null,
      getChildHostContext: (h) => h,
      finalizeInitialChildren(h) {
        var d;
        const p = (d = h?.__r3f) != null ? d : {};
        return Boolean(p.handlers);
      },
      prepareUpdate(h, d, p, v) {
        var y;
        if (((y = h?.__r3f) != null ? y : {}).primitive && v.object && v.object !== h)
          return [!0];
        {
          const {
            args: x = [],
            children: g,
            ...S
          } = v, {
            args: M = [],
            children: T,
            ...U
          } = p;
          if (!Array.isArray(x))
            throw new Error("R3F: the args prop must be an array!");
          if (x.some((D, R) => D !== M[R]))
            return [!0];
          const P = qb(h, S, U, !0);
          return P.changes.length ? [!1, P] : null;
        }
      },
      commitUpdate(h, [d, p], v, y, w, x) {
        d ? a(h, v, w, x) : vy(h, p);
      },
      commitMount(h, d, p, v) {
        var y;
        const w = (y = h.__r3f) != null ? y : {};
        h.raycast && w.handlers && w.eventCount && Zp(h).getState().internal.interaction.push(h);
      },
      getPublicInstance: (h) => h,
      prepareForCommit: () => null,
      preparePortalMount: (h) => Wl(h.getState().scene),
      resetAfterCommit: () => {
      },
      shouldSetTextContent: () => !1,
      clearContainer: () => !1,
      hideInstance(h) {
        var d;
        const {
          attach: p,
          parent: v
        } = (d = h.__r3f) != null ? d : {};
        p && v && yT(v, h, p), h.isObject3D && (h.visible = !1), Xl(h);
      },
      unhideInstance(h, d) {
        var p;
        const {
          attach: v,
          parent: y
        } = (p = h.__r3f) != null ? p : {};
        v && y && gy(y, h, v), (h.isObject3D && d.visible == null || d.visible) && (h.visible = !0), Xl(h);
      },
      createTextInstance: c,
      hideTextInstance: c,
      unhideTextInstance: c,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874
      // @ts-expect-error
      getCurrentEventPriority: () => e ? e() : To.DefaultEventPriority,
      beforeActiveInstanceBlur: () => {
      },
      afterActiveInstanceBlur: () => {
      },
      detachDeletedInstance: () => {
      },
      now: typeof performance < "u" && ln.fun(performance.now) ? performance.now : ln.fun(Date.now) ? Date.now : () => 0,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503
      scheduleTimeout: ln.fun(setTimeout) ? setTimeout : void 0,
      cancelTimeout: ln.fun(clearTimeout) ? clearTimeout : void 0
    }),
    applyProps: vy
  };
}
var pT, mT;
const my = (n) => "colorSpace" in n || "outputColorSpace" in n, Hb = () => {
  var n;
  return (n = z1.ColorManagement) != null ? n : null;
}, Vb = (n) => n && n.isOrthographicCamera, q4 = (n) => n && n.hasOwnProperty("current"), yh = typeof window < "u" && ((pT = window.document) != null && pT.createElement || ((mT = window.navigator) == null ? void 0 : mT.product) === "ReactNative") ? ge.useLayoutEffect : ge.useEffect;
function Gb(n) {
  const e = ge.useRef(n);
  return yh(() => void (e.current = n), [n]), e;
}
function j4({
  set: n
}) {
  return yh(() => (n(new Promise(() => null)), () => n(!1)), [n]), null;
}
class Wb extends ge.Component {
  constructor(...e) {
    super(...e), this.state = {
      error: !1
    };
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
Wb.getDerivedStateFromError = () => ({
  error: !0
});
const Xb = "__default", gT = /* @__PURE__ */ new Map(), Z4 = (n) => n && !!n.memoized && !!n.changes;
function Yb(n) {
  var e;
  const t = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(n) ? Math.min(Math.max(n[0], t), n[1]) : n;
}
const Ec = (n) => {
  var e;
  return (e = n.__r3f) == null ? void 0 : e.root.getState();
};
function Zp(n) {
  let e = n.__r3f.root;
  for (; e.getState().previousRoot; )
    e = e.getState().previousRoot;
  return e;
}
const ln = {
  obj: (n) => n === Object(n) && !ln.arr(n) && typeof n != "function",
  fun: (n) => typeof n == "function",
  str: (n) => typeof n == "string",
  num: (n) => typeof n == "number",
  boo: (n) => typeof n == "boolean",
  und: (n) => n === void 0,
  arr: (n) => Array.isArray(n),
  equ(n, e, {
    arrays: t = "shallow",
    objects: i = "reference",
    strict: r = !0
  } = {}) {
    if (typeof n != typeof e || !!n != !!e)
      return !1;
    if (ln.str(n) || ln.num(n) || ln.boo(n))
      return n === e;
    const s = ln.obj(n);
    if (s && i === "reference")
      return n === e;
    const o = ln.arr(n);
    if (o && t === "reference")
      return n === e;
    if ((o || s) && n === e)
      return !0;
    let a;
    for (a in n)
      if (!(a in e))
        return !1;
    if (s && t === "shallow" && i === "shallow") {
      for (a in r ? e : n)
        if (!ln.equ(n[a], e[a], {
          strict: r,
          objects: "reference"
        }))
          return !1;
    } else
      for (a in r ? e : n)
        if (n[a] !== e[a])
          return !1;
    if (ln.und(a)) {
      if (o && n.length === 0 && e.length === 0 || s && Object.keys(n).length === 0 && Object.keys(e).length === 0)
        return !0;
      if (n !== e)
        return !1;
    }
    return !0;
  }
};
function K4(n) {
  const e = {
    nodes: {},
    materials: {}
  };
  return n && n.traverse((t) => {
    t.name && (e.nodes[t.name] = t), t.material && !e.materials[t.material.name] && (e.materials[t.material.name] = t.material);
  }), e;
}
function J4(n) {
  n.dispose && n.type !== "Scene" && n.dispose();
  for (const e in n)
    e.dispose == null || e.dispose(), delete n[e];
}
function Wl(n, e) {
  const t = n;
  return t.__r3f = {
    type: "",
    root: null,
    previousAttach: null,
    memoizedProps: {},
    eventCount: 0,
    handlers: {},
    objects: [],
    parent: null,
    ...e
  }, n;
}
function W_(n, e) {
  let t = n;
  if (e.includes("-")) {
    const i = e.split("-"), r = i.pop();
    return t = i.reduce((s, o) => s[o], n), {
      target: t,
      key: r
    };
  } else
    return {
      target: t,
      key: e
    };
}
const vT = /-\d+$/;
function gy(n, e, t) {
  if (ln.str(t)) {
    if (vT.test(t)) {
      const s = t.replace(vT, ""), {
        target: o,
        key: a
      } = W_(n, s);
      Array.isArray(o[a]) || (o[a] = []);
    }
    const {
      target: i,
      key: r
    } = W_(n, t);
    e.__r3f.previousAttach = i[r], i[r] = e;
  } else
    e.__r3f.previousAttach = t(n, e);
}
function yT(n, e, t) {
  var i, r;
  if (ln.str(t)) {
    const {
      target: s,
      key: o
    } = W_(n, t), a = e.__r3f.previousAttach;
    a === void 0 ? delete s[o] : s[o] = a;
  } else
    (i = e.__r3f) == null || i.previousAttach == null || i.previousAttach(n, e);
  (r = e.__r3f) == null || delete r.previousAttach;
}
function qb(n, {
  children: e,
  key: t,
  ref: i,
  ...r
}, {
  children: s,
  key: o,
  ref: a,
  ...c
} = {}, f = !1) {
  const h = n.__r3f, d = Object.entries(r), p = [];
  if (f) {
    const y = Object.keys(c);
    for (let w = 0; w < y.length; w++)
      r.hasOwnProperty(y[w]) || d.unshift([y[w], Xb + "remove"]);
  }
  d.forEach(([y, w]) => {
    var x;
    if ((x = n.__r3f) != null && x.primitive && y === "object" || ln.equ(w, c[y]))
      return;
    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(y))
      return p.push([y, w, !0, []]);
    let g = [];
    y.includes("-") && (g = y.split("-")), p.push([y, w, !1, g]);
    for (const S in r) {
      const M = r[S];
      S.startsWith(`${y}-`) && p.push([S, M, !1, S.split("-")]);
    }
  });
  const v = {
    ...r
  };
  return h != null && h.memoizedProps && h != null && h.memoizedProps.args && (v.args = h.memoizedProps.args), h != null && h.memoizedProps && h != null && h.memoizedProps.attach && (v.attach = h.memoizedProps.attach), {
    memoized: v,
    changes: p
  };
}
const Q4 = typeof process < "u" && !1;
function vy(n, e) {
  var t;
  const i = n.__r3f, r = i?.root, s = r == null || r.getState == null ? void 0 : r.getState(), {
    memoized: o,
    changes: a
  } = Z4(e) ? e : qb(n, e), c = i?.eventCount;
  n.__r3f && (n.__r3f.memoizedProps = o);
  for (let h = 0; h < a.length; h++) {
    let [d, p, v, y] = a[h];
    if (my(n)) {
      const S = "srgb", M = "srgb-linear";
      d === "encoding" ? (d = "colorSpace", p = p === 3001 ? S : M) : d === "outputEncoding" && (d = "outputColorSpace", p = p === 3001 ? S : M);
    }
    let w = n, x = w[d];
    if (y.length && (x = y.reduce((g, S) => g[S], n), !(x && x.set))) {
      const [g, ...S] = y.reverse();
      w = S.reverse().reduce((M, T) => M[T], n), d = g;
    }
    if (p === Xb + "remove")
      if (w.constructor) {
        let g = gT.get(w.constructor);
        g || (g = new w.constructor(), gT.set(w.constructor, g)), p = g[d];
      } else
        p = 0;
    if (v && i)
      p ? i.handlers[d] = p : delete i.handlers[d], i.eventCount = Object.keys(i.handlers).length;
    else if (x && x.set && (x.copy || x instanceof Ba)) {
      if (Array.isArray(p))
        x.fromArray ? x.fromArray(p) : x.set(...p);
      else if (x.copy && p && p.constructor && // Some environments may break strict identity checks by duplicating versions of three.js.
      // Loosen to unminified names, ignoring descendents.
      // https://github.com/pmndrs/react-three-fiber/issues/2856
      // TODO: fix upstream and remove in v9
      (Q4 ? x.constructor.name === p.constructor.name : x.constructor === p.constructor))
        x.copy(p);
      else if (p !== void 0) {
        const g = x instanceof Qe;
        !g && x.setScalar ? x.setScalar(p) : x instanceof Ba && p instanceof Ba ? x.mask = p.mask : x.set(p), !Hb() && s && !s.linear && g && x.convertSRGBToLinear();
      }
    } else if (w[d] = p, w[d] instanceof Kt && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
    w[d].format === Ln && w[d].type === Yi && s) {
      const g = w[d];
      my(g) && my(s.gl) ? g.colorSpace = s.gl.outputColorSpace : g.encoding = s.gl.outputEncoding;
    }
    Xl(n);
  }
  if (i && i.parent && n.raycast && c !== i.eventCount) {
    const h = Zp(n).getState().internal, d = h.interaction.indexOf(n);
    d > -1 && h.interaction.splice(d, 1), i.eventCount && h.interaction.push(n);
  }
  return !(a.length === 1 && a[0][0] === "onUpdate") && a.length && (t = n.__r3f) != null && t.parent && X_(n), n;
}
function Xl(n) {
  var e, t;
  const i = (e = n.__r3f) == null || (t = e.root) == null || t.getState == null ? void 0 : t.getState();
  i && i.internal.frames === 0 && i.invalidate();
}
function X_(n) {
  n.onUpdate == null || n.onUpdate(n);
}
function jb(n, e) {
  n.manual || (Vb(n) ? (n.left = e.width / -2, n.right = e.width / 2, n.top = e.height / 2, n.bottom = e.height / -2) : n.aspect = e.width / e.height, n.updateProjectionMatrix(), n.updateMatrixWorld());
}
function wp(n) {
  return (n.eventObject || n.object).uuid + "/" + n.index + n.instanceId;
}
function $4() {
  var n;
  const e = typeof self < "u" && self || typeof window < "u" && window;
  if (!e)
    return To.DefaultEventPriority;
  switch ((n = e.event) == null ? void 0 : n.type) {
    case "click":
    case "contextmenu":
    case "dblclick":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
      return To.DiscreteEventPriority;
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "pointerenter":
    case "pointerleave":
    case "wheel":
      return To.ContinuousEventPriority;
    default:
      return To.DefaultEventPriority;
  }
}
function Zb(n, e, t, i) {
  const r = t.get(e);
  r && (t.delete(e), t.size === 0 && (n.delete(i), r.target.releasePointerCapture(i)));
}
function eB(n, e) {
  const {
    internal: t
  } = n.getState();
  t.interaction = t.interaction.filter((i) => i !== e), t.initialHits = t.initialHits.filter((i) => i !== e), t.hovered.forEach((i, r) => {
    (i.eventObject === e || i.object === e) && t.hovered.delete(r);
  }), t.capturedMap.forEach((i, r) => {
    Zb(t.capturedMap, e, i, r);
  });
}
function tB(n) {
  function e(c) {
    const {
      internal: f
    } = n.getState(), h = c.offsetX - f.initialClick[0], d = c.offsetY - f.initialClick[1];
    return Math.round(Math.sqrt(h * h + d * d));
  }
  function t(c) {
    return c.filter((f) => ["Move", "Over", "Enter", "Out", "Leave"].some((h) => {
      var d;
      return (d = f.__r3f) == null ? void 0 : d.handlers["onPointer" + h];
    }));
  }
  function i(c, f) {
    const h = n.getState(), d = /* @__PURE__ */ new Set(), p = [], v = f ? f(h.internal.interaction) : h.internal.interaction;
    for (let g = 0; g < v.length; g++) {
      const S = Ec(v[g]);
      S && (S.raycaster.camera = void 0);
    }
    h.previousRoot || h.events.compute == null || h.events.compute(c, h);
    function y(g) {
      const S = Ec(g);
      if (!S || !S.events.enabled || S.raycaster.camera === null)
        return [];
      if (S.raycaster.camera === void 0) {
        var M;
        S.events.compute == null || S.events.compute(c, S, (M = S.previousRoot) == null ? void 0 : M.getState()), S.raycaster.camera === void 0 && (S.raycaster.camera = null);
      }
      return S.raycaster.camera ? S.raycaster.intersectObject(g, !0) : [];
    }
    let w = v.flatMap(y).sort((g, S) => {
      const M = Ec(g.object), T = Ec(S.object);
      return !M || !T ? g.distance - S.distance : T.events.priority - M.events.priority || g.distance - S.distance;
    }).filter((g) => {
      const S = wp(g);
      return d.has(S) ? !1 : (d.add(S), !0);
    });
    h.events.filter && (w = h.events.filter(w, h));
    for (const g of w) {
      let S = g.object;
      for (; S; ) {
        var x;
        (x = S.__r3f) != null && x.eventCount && p.push({
          ...g,
          eventObject: S
        }), S = S.parent;
      }
    }
    if ("pointerId" in c && h.internal.capturedMap.has(c.pointerId))
      for (let g of h.internal.capturedMap.get(c.pointerId).values())
        d.has(wp(g.intersection)) || p.push(g.intersection);
    return p;
  }
  function r(c, f, h, d) {
    const p = n.getState();
    if (c.length) {
      const v = {
        stopped: !1
      };
      for (const y of c) {
        const w = Ec(y.object) || p, {
          raycaster: x,
          pointer: g,
          camera: S,
          internal: M
        } = w, T = new B(g.x, g.y, 0).unproject(S), U = (A) => {
          var N, G;
          return (N = (G = M.capturedMap.get(A)) == null ? void 0 : G.has(y.eventObject)) != null ? N : !1;
        }, P = (A) => {
          const N = {
            intersection: y,
            target: f.target
          };
          M.capturedMap.has(A) ? M.capturedMap.get(A).set(y.eventObject, N) : M.capturedMap.set(A, /* @__PURE__ */ new Map([[y.eventObject, N]])), f.target.setPointerCapture(A);
        }, D = (A) => {
          const N = M.capturedMap.get(A);
          N && Zb(M.capturedMap, y.eventObject, N, A);
        };
        let R = {};
        for (let A in f) {
          let N = f[A];
          typeof N != "function" && (R[A] = N);
        }
        let C = {
          ...y,
          ...R,
          pointer: g,
          intersections: c,
          stopped: v.stopped,
          delta: h,
          unprojectedPoint: T,
          ray: x.ray,
          camera: S,
          // Hijack stopPropagation, which just sets a flag
          stopPropagation() {
            const A = "pointerId" in f && M.capturedMap.get(f.pointerId);
            if (
              // ...if this pointer hasn't been captured
              (!A || // ... or if the hit object is capturing the pointer
              A.has(y.eventObject)) && (C.stopped = v.stopped = !0, M.hovered.size && Array.from(M.hovered.values()).find((N) => N.eventObject === y.eventObject))
            ) {
              const N = c.slice(0, c.indexOf(y));
              s([...N, y]);
            }
          },
          // there should be a distinction between target and currentTarget
          target: {
            hasPointerCapture: U,
            setPointerCapture: P,
            releasePointerCapture: D
          },
          currentTarget: {
            hasPointerCapture: U,
            setPointerCapture: P,
            releasePointerCapture: D
          },
          nativeEvent: f
        };
        if (d(C), v.stopped === !0)
          break;
      }
    }
    return c;
  }
  function s(c) {
    const {
      internal: f
    } = n.getState();
    for (const h of f.hovered.values())
      if (!c.length || !c.find((d) => d.object === h.object && d.index === h.index && d.instanceId === h.instanceId)) {
        const p = h.eventObject.__r3f, v = p?.handlers;
        if (f.hovered.delete(wp(h)), p != null && p.eventCount) {
          const y = {
            ...h,
            intersections: c
          };
          v.onPointerOut == null || v.onPointerOut(y), v.onPointerLeave == null || v.onPointerLeave(y);
        }
      }
  }
  function o(c, f) {
    for (let h = 0; h < f.length; h++) {
      const d = f[h].__r3f;
      d == null || d.handlers.onPointerMissed == null || d.handlers.onPointerMissed(c);
    }
  }
  function a(c) {
    switch (c) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => s([]);
      case "onLostPointerCapture":
        return (f) => {
          const {
            internal: h
          } = n.getState();
          "pointerId" in f && h.capturedMap.has(f.pointerId) && requestAnimationFrame(() => {
            h.capturedMap.has(f.pointerId) && (h.capturedMap.delete(f.pointerId), s([]));
          });
        };
    }
    return function(h) {
      const {
        onPointerMissed: d,
        internal: p
      } = n.getState();
      p.lastEvent.current = h;
      const v = c === "onPointerMove", y = c === "onClick" || c === "onContextMenu" || c === "onDoubleClick", x = i(h, v ? t : void 0), g = y ? e(h) : 0;
      c === "onPointerDown" && (p.initialClick = [h.offsetX, h.offsetY], p.initialHits = x.map((M) => M.eventObject)), y && !x.length && g <= 2 && (o(h, p.interaction), d && d(h)), v && s(x);
      function S(M) {
        const T = M.eventObject, U = T.__r3f, P = U?.handlers;
        if (U != null && U.eventCount)
          if (v) {
            if (P.onPointerOver || P.onPointerEnter || P.onPointerOut || P.onPointerLeave) {
              const D = wp(M), R = p.hovered.get(D);
              R ? R.stopped && M.stopPropagation() : (p.hovered.set(D, M), P.onPointerOver == null || P.onPointerOver(M), P.onPointerEnter == null || P.onPointerEnter(M));
            }
            P.onPointerMove == null || P.onPointerMove(M);
          } else {
            const D = P[c];
            D ? (!y || p.initialHits.includes(T)) && (o(h, p.interaction.filter((R) => !p.initialHits.includes(R))), D(M)) : y && p.initialHits.includes(T) && o(h, p.interaction.filter((R) => !p.initialHits.includes(R)));
          }
      }
      r(x, h, g, S);
    };
  }
  return {
    handlePointer: a
  };
}
const nB = ["set", "get", "setSize", "setFrameloop", "setDpr", "events", "invalidate", "advance", "size", "viewport"], Kb = (n) => !!(n != null && n.render), B1 = /* @__PURE__ */ ge.createContext(null), iB = (n, e) => {
  const t = k1((a, c) => {
    const f = new B(), h = new B(), d = new B();
    function p(g = c().camera, S = h, M = c().size) {
      const {
        width: T,
        height: U,
        top: P,
        left: D
      } = M, R = T / U;
      S instanceof B ? d.copy(S) : d.set(...S);
      const C = g.getWorldPosition(f).distanceTo(d);
      if (Vb(g))
        return {
          width: T / g.zoom,
          height: U / g.zoom,
          top: P,
          left: D,
          factor: 1,
          distance: C,
          aspect: R
        };
      {
        const A = g.fov * Math.PI / 180, N = 2 * Math.tan(A / 2) * C, G = N * (T / U);
        return {
          width: G,
          height: N,
          top: P,
          left: D,
          factor: T / G,
          distance: C,
          aspect: R
        };
      }
    }
    let v;
    const y = (g) => a((S) => ({
      performance: {
        ...S.performance,
        current: g
      }
    })), w = new _e();
    return {
      set: a,
      get: c,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      xr: null,
      scene: null,
      invalidate: (g = 1) => n(c(), g),
      advance: (g, S) => e(g, S, c()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new D1(),
      pointer: w,
      mouse: w,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const g = c();
          v && clearTimeout(v), g.performance.current !== g.performance.min && y(g.performance.min), v = setTimeout(() => y(c().performance.max), g.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        updateStyle: !1
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: p
      },
      setEvents: (g) => a((S) => ({
        ...S,
        events: {
          ...S.events,
          ...g
        }
      })),
      setSize: (g, S, M, T, U) => {
        const P = c().camera, D = {
          width: g,
          height: S,
          top: T || 0,
          left: U || 0,
          updateStyle: M
        };
        a((R) => ({
          size: D,
          viewport: {
            ...R.viewport,
            ...p(P, h, D)
          }
        }));
      },
      setDpr: (g) => a((S) => {
        const M = Yb(g);
        return {
          viewport: {
            ...S.viewport,
            dpr: M,
            initialDpr: S.viewport.initialDpr || M
          }
        };
      }),
      setFrameloop: (g = "always") => {
        const S = c().clock;
        S.stop(), S.elapsedTime = 0, g !== "never" && (S.start(), S.elapsedTime = 0), a(() => ({
          frameloop: g
        }));
      },
      previousRoot: void 0,
      internal: {
        active: !1,
        priority: 0,
        frames: 0,
        lastEvent: /* @__PURE__ */ ge.createRef(),
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        subscribe: (g, S, M) => {
          const T = c().internal;
          return T.priority = T.priority + (S > 0 ? 1 : 0), T.subscribers.push({
            ref: g,
            priority: S,
            store: M
          }), T.subscribers = T.subscribers.sort((U, P) => U.priority - P.priority), () => {
            const U = c().internal;
            U != null && U.subscribers && (U.priority = U.priority - (S > 0 ? 1 : 0), U.subscribers = U.subscribers.filter((P) => P.ref !== g));
          };
        }
      }
    };
  }), i = t.getState();
  let r = i.size, s = i.viewport.dpr, o = i.camera;
  return t.subscribe(() => {
    const {
      camera: a,
      size: c,
      viewport: f,
      gl: h,
      set: d
    } = t.getState();
    if (c.width !== r.width || c.height !== r.height || f.dpr !== s) {
      var p;
      r = c, s = f.dpr, jb(a, c), h.setPixelRatio(f.dpr);
      const v = (p = c.updateStyle) != null ? p : typeof HTMLCanvasElement < "u" && h.domElement instanceof HTMLCanvasElement;
      h.setSize(c.width, c.height, v);
    }
    a !== o && (o = a, d((v) => ({
      viewport: {
        ...v.viewport,
        ...v.viewport.getCurrentViewport(a)
      }
    })));
  }), t.subscribe((a) => n(a)), t;
};
let Ep, rB = /* @__PURE__ */ new Set(), sB = /* @__PURE__ */ new Set(), oB = /* @__PURE__ */ new Set();
function yy(n, e) {
  if (n.size)
    for (const {
      callback: t
    } of n.values())
      t(e);
}
function Tc(n, e) {
  switch (n) {
    case "before":
      return yy(rB, e);
    case "after":
      return yy(sB, e);
    case "tail":
      return yy(oB, e);
  }
}
let _y, xy;
function Sy(n, e, t) {
  let i = e.clock.getDelta();
  for (e.frameloop === "never" && typeof n == "number" && (i = n - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = n), _y = e.internal.subscribers, Ep = 0; Ep < _y.length; Ep++)
    xy = _y[Ep], xy.ref.current(xy.store.getState(), i, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
function aB(n) {
  let e = !1, t = !1, i, r, s;
  function o(f) {
    r = requestAnimationFrame(o), e = !0, i = 0, Tc("before", f), t = !0;
    for (const d of n.values()) {
      var h;
      s = d.store.getState(), s.internal.active && (s.frameloop === "always" || s.internal.frames > 0) && !((h = s.gl.xr) != null && h.isPresenting) && (i += Sy(f, s));
    }
    if (t = !1, Tc("after", f), i === 0)
      return Tc("tail", f), e = !1, cancelAnimationFrame(r);
  }
  function a(f, h = 1) {
    var d;
    if (!f)
      return n.forEach((p) => a(p.store.getState(), h));
    (d = f.gl.xr) != null && d.isPresenting || !f.internal.active || f.frameloop === "never" || (h > 1 ? f.internal.frames = Math.min(60, f.internal.frames + h) : t ? f.internal.frames = 2 : f.internal.frames = 1, e || (e = !0, requestAnimationFrame(o)));
  }
  function c(f, h = !0, d, p) {
    if (h && Tc("before", f), d)
      Sy(f, d, p);
    else
      for (const v of n.values())
        Sy(f, v.store.getState());
    h && Tc("after", f);
  }
  return {
    loop: o,
    invalidate: a,
    advance: c
  };
}
function H1() {
  const n = ge.useContext(B1);
  if (!n)
    throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return n;
}
function zi(n = (t) => t, e) {
  return H1()(n, e);
}
function _h(n, e = 0) {
  const t = H1(), i = t.getState().internal.subscribe, r = Gb(n);
  return yh(() => i(r, e, t), [e, i, t]), null;
}
const _T = /* @__PURE__ */ new WeakMap();
function Jb(n, e) {
  return function(t, ...i) {
    let r = _T.get(t);
    return r || (r = new t(), _T.set(t, r)), n && n(r), Promise.all(i.map((s) => new Promise((o, a) => r.load(s, (c) => {
      c.scene && Object.assign(c, K4(c.scene)), o(c);
    }, e, (c) => a(new Error(`Could not load ${s}: ${c?.message}`))))));
  };
}
function ku(n, e, t, i) {
  const r = Array.isArray(e) ? e : [e], s = G4(Jb(t, i), [n, ...r], {
    equal: ln.equ
  });
  return Array.isArray(e) ? s : s[0];
}
ku.preload = function(n, e, t) {
  const i = Array.isArray(e) ? e : [e];
  return W4(Jb(t), [n, ...i]);
};
ku.clear = function(n, e) {
  const t = Array.isArray(e) ? e : [e];
  return X4([n, ...t]);
};
const Iu = /* @__PURE__ */ new Map(), {
  invalidate: xT,
  advance: ST
} = aB(Iu), {
  reconciler: Zf,
  applyProps: yo
} = Y4(Iu, $4), Bl = {
  objects: "shallow",
  strict: !1
}, lB = (n, e) => {
  const t = typeof n == "function" ? n(e) : n;
  return Kb(t) ? t : new g1({
    powerPreference: "high-performance",
    canvas: e,
    antialias: !0,
    alpha: !0,
    ...n
  });
};
function uB(n, e) {
  const t = typeof HTMLCanvasElement < "u" && n instanceof HTMLCanvasElement;
  if (e) {
    const {
      width: i,
      height: r,
      top: s,
      left: o,
      updateStyle: a = t
    } = e;
    return {
      width: i,
      height: r,
      top: s,
      left: o,
      updateStyle: a
    };
  } else if (typeof HTMLCanvasElement < "u" && n instanceof HTMLCanvasElement && n.parentElement) {
    const {
      width: i,
      height: r,
      top: s,
      left: o
    } = n.parentElement.getBoundingClientRect();
    return {
      width: i,
      height: r,
      top: s,
      left: o,
      updateStyle: t
    };
  } else if (typeof OffscreenCanvas < "u" && n instanceof OffscreenCanvas)
    return {
      width: n.width,
      height: n.height,
      top: 0,
      left: 0,
      updateStyle: t
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  };
}
function cB(n) {
  const e = Iu.get(n), t = e?.fiber, i = e?.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const r = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), s = i || iB(xT, ST), o = t || Zf.createContainer(s, To.ConcurrentRoot, null, !1, null, "", r, null);
  e || Iu.set(n, {
    fiber: o,
    store: s
  });
  let a, c = !1, f;
  return {
    configure(h = {}) {
      let {
        gl: d,
        size: p,
        scene: v,
        events: y,
        onCreated: w,
        shadows: x = !1,
        linear: g = !1,
        flat: S = !1,
        legacy: M = !1,
        orthographic: T = !1,
        frameloop: U = "always",
        dpr: P = [1, 2],
        performance: D,
        raycaster: R,
        camera: C,
        onPointerMissed: A
      } = h, N = s.getState(), G = N.gl;
      N.gl || N.set({
        gl: G = lB(d, n)
      });
      let W = N.raycaster;
      W || N.set({
        raycaster: W = new F1()
      });
      const {
        params: j,
        ...Q
      } = R || {};
      if (ln.equ(Q, W, Bl) || yo(W, {
        ...Q
      }), ln.equ(j, W.params, Bl) || yo(W, {
        params: {
          ...W.params,
          ...j
        }
      }), !N.camera || N.camera === f && !ln.equ(f, C, Bl)) {
        f = C;
        const ne = C instanceof lh, he = ne ? C : T ? new fs(0, 0, 0, 0, 0.1, 1e3) : new Rn(75, 0, 0.1, 1e3);
        ne || (he.position.z = 5, C && (yo(he, C), ("aspect" in C || "left" in C || "right" in C || "bottom" in C || "top" in C) && (he.manual = !0, he.updateProjectionMatrix())), !N.camera && !(C != null && C.rotation) && he.lookAt(0, 0, 0)), N.set({
          camera: he
        }), W.camera = he;
      }
      if (!N.scene) {
        let ne;
        v instanceof bu ? ne = v : (ne = new bu(), v && yo(ne, v)), N.set({
          scene: Wl(ne)
        });
      }
      if (!N.xr) {
        var J;
        const ne = (ke, ce) => {
          const we = s.getState();
          we.frameloop !== "never" && ST(ke, !0, we, ce);
        }, he = () => {
          const ke = s.getState();
          ke.gl.xr.enabled = ke.gl.xr.isPresenting, ke.gl.xr.setAnimationLoop(ke.gl.xr.isPresenting ? ne : null), ke.gl.xr.isPresenting || xT(ke);
        }, Se = {
          connect() {
            const ke = s.getState().gl;
            ke.xr.addEventListener("sessionstart", he), ke.xr.addEventListener("sessionend", he);
          },
          disconnect() {
            const ke = s.getState().gl;
            ke.xr.removeEventListener("sessionstart", he), ke.xr.removeEventListener("sessionend", he);
          }
        };
        typeof ((J = G.xr) == null ? void 0 : J.addEventListener) == "function" && Se.connect(), N.set({
          xr: Se
        });
      }
      if (G.shadowMap) {
        const ne = G.shadowMap.enabled, he = G.shadowMap.type;
        if (G.shadowMap.enabled = !!x, ln.boo(x))
          G.shadowMap.type = Jc;
        else if (ln.str(x)) {
          var oe;
          const Se = {
            basic: OR,
            percentage: xg,
            soft: Jc,
            variance: Br
          };
          G.shadowMap.type = (oe = Se[x]) != null ? oe : Jc;
        } else
          ln.obj(x) && Object.assign(G.shadowMap, x);
        (ne !== G.shadowMap.enabled || he !== G.shadowMap.type) && (G.shadowMap.needsUpdate = !0);
      }
      const z = Hb();
      z && ("enabled" in z ? z.enabled = !M : "legacyMode" in z && (z.legacyMode = M)), c || yo(G, {
        outputEncoding: g ? 3e3 : 3001,
        toneMapping: S ? ms : Zx
      }), N.legacy !== M && N.set(() => ({
        legacy: M
      })), N.linear !== g && N.set(() => ({
        linear: g
      })), N.flat !== S && N.set(() => ({
        flat: S
      })), d && !ln.fun(d) && !Kb(d) && !ln.equ(d, G, Bl) && yo(G, d), y && !N.events.handlers && N.set({
        events: y(s)
      });
      const te = uB(n, p);
      return ln.equ(te, N.size, Bl) || N.setSize(te.width, te.height, te.updateStyle, te.top, te.left), P && N.viewport.dpr !== Yb(P) && N.setDpr(P), N.frameloop !== U && N.setFrameloop(U), N.onPointerMissed || N.set({
        onPointerMissed: A
      }), D && !ln.equ(D, N.performance, Bl) && N.set((ne) => ({
        performance: {
          ...ne.performance,
          ...D
        }
      })), a = w, c = !0, this;
    },
    render(h) {
      return c || this.configure(), Zf.updateContainer(/* @__PURE__ */ en(fB, {
        store: s,
        children: h,
        onCreated: a,
        rootElement: n
      }), o, null, () => {
      }), s;
    },
    unmount() {
      Qb(n);
    }
  };
}
function fB({
  store: n,
  children: e,
  onCreated: t,
  rootElement: i
}) {
  return yh(() => {
    const r = n.getState();
    r.set((s) => ({
      internal: {
        ...s.internal,
        active: !0
      }
    })), t && t(r), n.getState().events.connected || r.events.connect == null || r.events.connect(i);
  }, []), /* @__PURE__ */ en(B1.Provider, {
    value: n,
    children: e
  });
}
function Qb(n, e) {
  const t = Iu.get(n), i = t?.fiber;
  if (i) {
    const r = t?.store.getState();
    r && (r.internal.active = !1), Zf.updateContainer(null, i, null, () => {
      r && setTimeout(() => {
        try {
          var s, o, a, c;
          r.events.disconnect == null || r.events.disconnect(), (s = r.gl) == null || (o = s.renderLists) == null || o.dispose == null || o.dispose(), (a = r.gl) == null || a.forceContextLoss == null || a.forceContextLoss(), (c = r.gl) != null && c.xr && r.xr.disconnect(), J4(r), Iu.delete(n), e && e(n);
        } catch {
        }
      }, 500);
    });
  }
}
function hB(n, e, t) {
  return /* @__PURE__ */ en(dB, {
    children: n,
    container: e,
    state: t
  }, e.uuid);
}
function dB({
  state: n = {},
  children: e,
  container: t
}) {
  const {
    events: i,
    size: r,
    ...s
  } = n, o = H1(), [a] = ge.useState(() => new F1()), [c] = ge.useState(() => new _e()), f = ge.useCallback(
    (d, p) => {
      const v = {
        ...d
      };
      Object.keys(d).forEach((w) => {
        // Some props should be off-limits
        (nB.includes(w) || // Otherwise filter out the props that are different and let the inject layer take precedence
        // Unless the inject layer props is undefined, then we keep the root layer
        d[w] !== p[w] && p[w]) && delete v[w];
      });
      let y;
      if (p && r) {
        const w = p.camera;
        y = d.viewport.getCurrentViewport(w, new B(), r), w !== d.camera && jb(w, r);
      }
      return {
        // The intersect consists of the previous root state
        ...v,
        // Portals have their own scene, which forms the root, a raycaster and a pointer
        scene: t,
        raycaster: a,
        pointer: c,
        mouse: c,
        // Their previous root is the layer before it
        previousRoot: o,
        // Events, size and viewport can be overridden by the inject layer
        events: {
          ...d.events,
          ...p?.events,
          ...i
        },
        size: {
          ...d.size,
          ...r
        },
        viewport: {
          ...d.viewport,
          ...y
        },
        ...s
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [n]
  ), [h] = ge.useState(() => {
    const d = o.getState();
    return k1((v, y) => ({
      ...d,
      scene: t,
      raycaster: a,
      pointer: c,
      mouse: c,
      previousRoot: o,
      events: {
        ...d.events,
        ...i
      },
      size: {
        ...d.size,
        ...r
      },
      ...s,
      // Set and get refer to this root-state
      set: v,
      get: y,
      // Layers are allowed to override events
      setEvents: (w) => v((x) => ({
        ...x,
        events: {
          ...x.events,
          ...w
        }
      }))
    }));
  });
  return ge.useEffect(() => {
    const d = o.subscribe((p) => h.setState((v) => f(p, v)));
    return () => {
      d();
    };
  }, [f]), ge.useEffect(() => {
    h.setState((d) => f(o.getState(), d));
  }, [f]), ge.useEffect(() => () => {
    h.destroy();
  }, []), /* @__PURE__ */ en(rx, {
    children: Zf.createPortal(/* @__PURE__ */ en(B1.Provider, {
      value: h,
      children: e
    }), h, null)
  });
}
Zf.injectIntoDevTools({
  bundleType: 0,
  rendererPackageName: "@react-three/fiber",
  version: ge.version
});
function Y_(n, e, t) {
  var i, r, s, o, a;
  e == null && (e = 100);
  function c() {
    var h = Date.now() - o;
    h < e && h >= 0 ? i = setTimeout(c, e - h) : (i = null, t || (a = n.apply(s, r), s = r = null));
  }
  var f = function() {
    s = this, r = arguments, o = Date.now();
    var h = t && !i;
    return i || (i = setTimeout(c, e)), h && (a = n.apply(s, r), s = r = null), a;
  };
  return f.clear = function() {
    i && (clearTimeout(i), i = null);
  }, f.flush = function() {
    i && (a = n.apply(s, r), s = r = null, clearTimeout(i), i = null);
  }, f;
}
Y_.debounce = Y_;
var MT = Y_;
function pB(n) {
  let {
    debounce: e,
    scroll: t,
    polyfill: i,
    offsetSize: r
  } = n === void 0 ? {
    debounce: 0,
    scroll: !1,
    offsetSize: !1
  } : n;
  const s = i || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!s)
    throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [o, a] = ge.useState({
    left: 0,
    top: 0,
    width: 0,
    height: 0,
    bottom: 0,
    right: 0,
    x: 0,
    y: 0
  }), c = ge.useRef({
    element: null,
    scrollContainers: null,
    resizeObserver: null,
    lastBounds: o
  }), f = e ? typeof e == "number" ? e : e.scroll : null, h = e ? typeof e == "number" ? e : e.resize : null, d = ge.useRef(!1);
  ge.useEffect(() => (d.current = !0, () => void (d.current = !1)));
  const [p, v, y] = ge.useMemo(() => {
    const S = () => {
      if (!c.current.element)
        return;
      const {
        left: M,
        top: T,
        width: U,
        height: P,
        bottom: D,
        right: R,
        x: C,
        y: A
      } = c.current.element.getBoundingClientRect(), N = {
        left: M,
        top: T,
        width: U,
        height: P,
        bottom: D,
        right: R,
        x: C,
        y: A
      };
      c.current.element instanceof HTMLElement && r && (N.height = c.current.element.offsetHeight, N.width = c.current.element.offsetWidth), Object.freeze(N), d.current && !yB(c.current.lastBounds, N) && a(c.current.lastBounds = N);
    };
    return [S, h ? MT(S, h) : S, f ? MT(S, f) : S];
  }, [a, r, f, h]);
  function w() {
    c.current.scrollContainers && (c.current.scrollContainers.forEach((S) => S.removeEventListener("scroll", y, !0)), c.current.scrollContainers = null), c.current.resizeObserver && (c.current.resizeObserver.disconnect(), c.current.resizeObserver = null);
  }
  function x() {
    c.current.element && (c.current.resizeObserver = new s(y), c.current.resizeObserver.observe(c.current.element), t && c.current.scrollContainers && c.current.scrollContainers.forEach((S) => S.addEventListener("scroll", y, {
      capture: !0,
      passive: !0
    })));
  }
  const g = (S) => {
    !S || S === c.current.element || (w(), c.current.element = S, c.current.scrollContainers = $b(S), x());
  };
  return gB(y, Boolean(t)), mB(v), ge.useEffect(() => {
    w(), x();
  }, [t, y, v]), ge.useEffect(() => w, []), [g, o, p];
}
function mB(n) {
  ge.useEffect(() => {
    const e = n;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [n]);
}
function gB(n, e) {
  ge.useEffect(() => {
    if (e) {
      const t = n;
      return window.addEventListener("scroll", t, {
        capture: !0,
        passive: !0
      }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [n, e]);
}
function $b(n) {
  const e = [];
  if (!n || n === document.body)
    return e;
  const {
    overflow: t,
    overflowX: i,
    overflowY: r
  } = window.getComputedStyle(n);
  return [t, i, r].some((s) => s === "auto" || s === "scroll") && e.push(n), [...e, ...$b(n.parentElement)];
}
const vB = ["x", "y", "top", "bottom", "left", "right", "width", "height"], yB = (n, e) => vB.every((t) => n[t] === e[t]);
var _B = Object.defineProperty, xB = Object.defineProperties, SB = Object.getOwnPropertyDescriptors, wT = Object.getOwnPropertySymbols, MB = Object.prototype.hasOwnProperty, wB = Object.prototype.propertyIsEnumerable, ET = (n, e, t) => e in n ? _B(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, TT = (n, e) => {
  for (var t in e || (e = {}))
    MB.call(e, t) && ET(n, t, e[t]);
  if (wT)
    for (var t of wT(e))
      wB.call(e, t) && ET(n, t, e[t]);
  return n;
}, EB = (n, e) => xB(n, SB(e)), AT, CT;
typeof window < "u" && ((AT = window.document) != null && AT.createElement || ((CT = window.navigator) == null ? void 0 : CT.product) === "ReactNative") ? ge.useLayoutEffect : ge.useEffect;
function eP(n, e, t) {
  if (!n)
    return;
  if (t(n) === !0)
    return n;
  let i = e ? n.return : n.child;
  for (; i; ) {
    const r = eP(i, e, t);
    if (r)
      return r;
    i = e ? null : i.sibling;
  }
}
function tP(n) {
  try {
    return Object.defineProperties(n, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return n;
  }
}
const RT = console.error;
console.error = function() {
  const n = [...arguments].join("");
  if (n?.startsWith("Warning:") && n.includes("useContext")) {
    console.error = RT;
    return;
  }
  return RT.apply(this, arguments);
};
const V1 = tP(ge.createContext(null));
class nP extends ge.Component {
  render() {
    return /* @__PURE__ */ ge.createElement(V1.Provider, {
      value: this._reactInternals
    }, this.props.children);
  }
}
function TB() {
  const n = ge.useContext(V1);
  if (n === null)
    throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = ge.useId();
  return ge.useMemo(() => {
    for (const i of [n, n?.alternate]) {
      if (!i)
        continue;
      const r = eP(i, !1, (s) => {
        let o = s.memoizedState;
        for (; o; ) {
          if (o.memoizedState === e)
            return !0;
          o = o.next;
        }
      });
      if (r)
        return r;
    }
  }, [n, e]);
}
function AB() {
  const n = TB(), [e] = ge.useState(() => /* @__PURE__ */ new Map());
  e.clear();
  let t = n;
  for (; t; ) {
    if (t.type && typeof t.type == "object") {
      const r = t.type._context === void 0 && t.type.Provider === t.type ? t.type : t.type._context;
      r && r !== V1 && !e.has(r) && e.set(r, ge.useContext(tP(r)));
    }
    t = t.return;
  }
  return e;
}
function CB() {
  const n = AB();
  return ge.useMemo(
    () => Array.from(n.keys()).reduce(
      (e, t) => (i) => /* @__PURE__ */ ge.createElement(e, null, /* @__PURE__ */ ge.createElement(t.Provider, EB(TT({}, i), {
        value: n.get(t)
      }))),
      (e) => /* @__PURE__ */ ge.createElement(nP, TT({}, e))
    ),
    [n]
  );
}
const My = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function RB(n) {
  const {
    handlePointer: e
  } = tB(n);
  return {
    priority: 1,
    enabled: !0,
    compute(t, i, r) {
      i.pointer.set(t.offsetX / i.size.width * 2 - 1, -(t.offsetY / i.size.height) * 2 + 1), i.raycaster.setFromCamera(i.pointer, i.camera);
    },
    connected: void 0,
    handlers: Object.keys(My).reduce((t, i) => ({
      ...t,
      [i]: e(i)
    }), {}),
    update: () => {
      var t;
      const {
        events: i,
        internal: r
      } = n.getState();
      (t = r.lastEvent) != null && t.current && i.handlers && i.handlers.onPointerMove(r.lastEvent.current);
    },
    connect: (t) => {
      var i;
      const {
        set: r,
        events: s
      } = n.getState();
      s.disconnect == null || s.disconnect(), r((o) => ({
        events: {
          ...o.events,
          connected: t
        }
      })), Object.entries((i = s.handlers) != null ? i : []).forEach(([o, a]) => {
        const [c, f] = My[o];
        t.addEventListener(c, a, {
          passive: f
        });
      });
    },
    disconnect: () => {
      const {
        set: t,
        events: i
      } = n.getState();
      if (i.connected) {
        var r;
        Object.entries((r = i.handlers) != null ? r : []).forEach(([s, o]) => {
          if (i && i.connected instanceof HTMLElement) {
            const [a] = My[s];
            i.connected.removeEventListener(a, o);
          }
        }), t((s) => ({
          events: {
            ...s.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
const bB = /* @__PURE__ */ ge.forwardRef(function({
  children: e,
  fallback: t,
  resize: i,
  style: r,
  gl: s,
  events: o = RB,
  eventSource: a,
  eventPrefix: c,
  shadows: f,
  linear: h,
  flat: d,
  legacy: p,
  orthographic: v,
  frameloop: y,
  dpr: w,
  performance: x,
  raycaster: g,
  camera: S,
  scene: M,
  onPointerMissed: T,
  onCreated: U,
  ...P
}, D) {
  ge.useMemo(() => Bb(N4), []);
  const R = CB(), [C, A] = pB({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...i
  }), N = ge.useRef(null), G = ge.useRef(null);
  ge.useImperativeHandle(D, () => N.current);
  const W = Gb(T), [j, Q] = ge.useState(!1), [J, oe] = ge.useState(!1);
  if (j)
    throw j;
  if (J)
    throw J;
  const z = ge.useRef(null);
  return yh(() => {
    const ne = N.current;
    A.width > 0 && A.height > 0 && ne && (z.current || (z.current = cB(ne)), z.current.configure({
      gl: s,
      events: o,
      shadows: f,
      linear: h,
      flat: d,
      legacy: p,
      orthographic: v,
      frameloop: y,
      dpr: w,
      performance: x,
      raycaster: g,
      camera: S,
      scene: M,
      size: A,
      // Pass mutable reference to onPointerMissed so it's free to update
      onPointerMissed: (...he) => W.current == null ? void 0 : W.current(...he),
      onCreated: (he) => {
        he.events.connect == null || he.events.connect(a ? q4(a) ? a.current : a : G.current), c && he.setEvents({
          compute: (Se, ke) => {
            const ce = Se[c + "X"], we = Se[c + "Y"];
            ke.pointer.set(ce / ke.size.width * 2 - 1, -(we / ke.size.height) * 2 + 1), ke.raycaster.setFromCamera(ke.pointer, ke.camera);
          }
        }), U?.(he);
      }
    }), z.current.render(/* @__PURE__ */ en(R, {
      children: /* @__PURE__ */ en(Wb, {
        set: oe,
        children: /* @__PURE__ */ en(ge.Suspense, {
          fallback: /* @__PURE__ */ en(j4, {
            set: Q
          }),
          children: e
        })
      })
    })));
  }), ge.useEffect(() => {
    const ne = N.current;
    if (ne)
      return () => Qb(ne);
  }, []), /* @__PURE__ */ en("div", {
    ref: G,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: a ? "none" : "auto",
      ...r
    },
    ...P,
    children: /* @__PURE__ */ en("div", {
      ref: C,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ en("canvas", {
        ref: N,
        style: {
          display: "block"
        },
        children: t
      })
    })
  });
}), PB = /* @__PURE__ */ ge.forwardRef(function(e, t) {
  return /* @__PURE__ */ en(nP, {
    children: /* @__PURE__ */ en(bB, {
      ...e,
      ref: t
    })
  });
});
function IB(n, e = "pointer", t = "auto", i = document.body) {
  ge.useEffect(() => {
    if (n)
      return i.style.cursor = e, () => void (i.style.cursor = t);
  }, [n]);
}
let Ac = 0;
const LB = /* @__PURE__ */ k1((n) => (uu.onStart = (e, t, i) => {
  n({
    active: !0,
    item: e,
    loaded: t,
    total: i,
    progress: (t - Ac) / (i - Ac) * 100
  });
}, uu.onLoad = () => {
  n({
    active: !1
  });
}, uu.onError = (e) => n((t) => ({
  errors: [...t.errors, e]
})), uu.onProgress = (e, t, i) => {
  t === i && (Ac = i), n({
    active: !0,
    item: e,
    loaded: t,
    total: i,
    progress: (t - Ac) / (i - Ac) * 100 || 100
  });
}, {
  errors: [],
  active: !1,
  progress: 0,
  item: "",
  loaded: 0,
  total: 0
})), DB = (n) => `Loading ${n.toFixed(2)}%`;
function NB({
  containerStyles: n,
  innerStyles: e,
  barStyles: t,
  dataStyles: i,
  dataInterpolation: r = DB,
  initialState: s = (o) => o
}) {
  const {
    active: o,
    progress: a
  } = LB(), c = ge.useRef(0), f = ge.useRef(0), h = ge.useRef(null), [d, p] = ge.useState(s(o));
  ge.useEffect(() => {
    let y;
    return o !== d && (y = setTimeout(() => p(o), 300)), () => clearTimeout(y);
  }, [d, o]);
  const v = ge.useCallback(() => {
    h.current && (c.current += (a - c.current) / 2, (c.current > 0.95 * a || a === 100) && (c.current = a), h.current.innerText = r(c.current), c.current < a && (f.current = requestAnimationFrame(v)));
  }, [r, a]);
  return ge.useEffect(() => (v(), () => cancelAnimationFrame(f.current)), [v]), d ? /* @__PURE__ */ ge.createElement("div", {
    style: {
      ...Tp.container,
      opacity: o ? 1 : 0,
      ...n
    }
  }, /* @__PURE__ */ ge.createElement("div", null, /* @__PURE__ */ ge.createElement("div", {
    style: {
      ...Tp.inner,
      ...e
    }
  }, /* @__PURE__ */ ge.createElement("div", {
    style: {
      ...Tp.bar,
      transform: `scaleX(${a / 100})`,
      ...t
    }
  }), /* @__PURE__ */ ge.createElement("span", {
    ref: h,
    style: {
      ...Tp.data,
      ...i
    }
  })))) : null;
}
const Tp = {
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background: "#171717",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: "opacity 300ms ease",
    zIndex: 1e3
  },
  inner: {
    width: 100,
    height: 3,
    background: "#272727",
    textAlign: "center"
  },
  bar: {
    height: 3,
    width: "100%",
    background: "white",
    transition: "transform 200ms",
    transformOrigin: "left center"
  },
  data: {
    display: "inline-block",
    position: "relative",
    fontVariantNumeric: "tabular-nums",
    marginTop: "0.8em",
    color: "#f0f0f0",
    fontSize: "0.6em",
    fontFamily: '-apple-system, BlinkMacSystemFont, "Inter", "Segoe UI", "Helvetica Neue", Helvetica, Arial, Roboto, Ubuntu, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    whiteSpace: "nowrap"
  }
};
function lf(n, e, t) {
  return e in n ? Object.defineProperty(n, e, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : n[e] = t, n;
}
function q_(n, e) {
  (e == null || e > n.length) && (e = n.length);
  for (var t = 0, i = new Array(e); t < e; t++)
    i[t] = n[t];
  return i;
}
function UB(n, e) {
  if (n) {
    if (typeof n == "string")
      return q_(n, e);
    var t = Object.prototype.toString.call(n).slice(8, -1);
    if (t === "Object" && n.constructor && (t = n.constructor.name), t === "Map" || t === "Set")
      return Array.from(n);
    if (t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))
      return q_(n, e);
  }
}
function OB(n) {
  if (Array.isArray(n))
    return q_(n);
}
function FB(n) {
  if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null)
    return Array.from(n);
}
function kB() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function zB(n) {
  return OB(n) || FB(n) || UB(n) || kB();
}
new _e();
new _e();
function BB(n, e, t) {
  return Math.max(e, Math.min(t, n));
}
function HB(n, e) {
  return BB(n - Math.floor(n / e) * e, 0, e);
}
function VB(n, e) {
  var t = HB(e - n, Math.PI * 2);
  return t > Math.PI && (t -= Math.PI * 2), t;
}
function iP(n, e) {
  if (!(n instanceof e))
    throw new TypeError("Cannot call a class as a function");
}
var Sr = function n(e, t, i) {
  var r = this;
  iP(this, n), lf(this, "dot2", function(s, o) {
    return r.x * s + r.y * o;
  }), lf(this, "dot3", function(s, o, a) {
    return r.x * s + r.y * o + r.z * a;
  }), this.x = e, this.y = t, this.z = i;
}, GB = [new Sr(1, 1, 0), new Sr(-1, 1, 0), new Sr(1, -1, 0), new Sr(-1, -1, 0), new Sr(1, 0, 1), new Sr(-1, 0, 1), new Sr(1, 0, -1), new Sr(-1, 0, -1), new Sr(0, 1, 1), new Sr(0, -1, 1), new Sr(0, 1, -1), new Sr(0, -1, -1)], bT = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180], PT = new Array(512), IT = new Array(512), WB = function(e) {
  e > 0 && e < 1 && (e *= 65536), e = Math.floor(e), e < 256 && (e |= e << 8);
  for (var t = 0; t < 256; t++) {
    var i;
    t & 1 ? i = bT[t] ^ e & 255 : i = bT[t] ^ e >> 8 & 255, PT[t] = PT[t + 256] = i, IT[t] = IT[t + 256] = GB[i % 12];
  }
};
WB(0);
function XB(n) {
  if (typeof n == "number")
    n = Math.abs(n);
  else if (typeof n == "string") {
    var e = n;
    n = 0;
    for (var t = 0; t < e.length; t++)
      n = (n + (t + 1) * (e.charCodeAt(t) % 96)) % 2147483647;
  }
  return n === 0 && (n = 311), n;
}
function LT(n) {
  var e = XB(n);
  return function() {
    var t = e * 48271 % 2147483647;
    return e = t, t / 2147483647;
  };
}
var YB = function n(e) {
  var t = this;
  iP(this, n), lf(this, "seed", 0), lf(this, "init", function(i) {
    t.seed = i, t.value = LT(i);
  }), lf(this, "value", LT(this.seed)), this.init(e);
};
new YB(Math.random());
var qB = function(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.01, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1 / (2 * Math.PI);
  return i / Math.atan(1 / t) * Math.atan(Math.sin(2 * Math.PI * e * r) / t);
}, rP = function(e) {
  return 1 / (1 + e + 0.48 * e * e + 0.235 * e * e * e);
}, jB = function(e) {
  return e;
}, ZB = {
  in: function(e) {
    return 1 - Math.cos(e * Math.PI / 2);
  },
  out: function(e) {
    return Math.sin(e * Math.PI / 2);
  },
  inOut: function(e) {
    return -(Math.cos(Math.PI * e) - 1) / 2;
  }
}, KB = {
  in: function(e) {
    return e * e * e;
  },
  out: function(e) {
    return 1 - Math.pow(1 - e, 3);
  },
  inOut: function(e) {
    return e < 0.5 ? 4 * e * e * e : 1 - Math.pow(-2 * e + 2, 3) / 2;
  }
}, JB = {
  in: function(e) {
    return e * e * e * e * e;
  },
  out: function(e) {
    return 1 - Math.pow(1 - e, 5);
  },
  inOut: function(e) {
    return e < 0.5 ? 16 * e * e * e * e * e : 1 - Math.pow(-2 * e + 2, 5) / 2;
  }
}, QB = {
  in: function(e) {
    return 1 - Math.sqrt(1 - Math.pow(e, 2));
  },
  out: function(e) {
    return Math.sqrt(1 - Math.pow(e - 1, 2));
  },
  inOut: function(e) {
    return e < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * e, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * e + 2, 2)) + 1) / 2;
  }
}, $B = {
  in: function(e) {
    return e * e * e * e;
  },
  out: function(e) {
    return 1 - --e * e * e * e;
  },
  inOut: function(e) {
    return e < 0.5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e;
  }
}, e5 = {
  in: function(e) {
    return e === 0 ? 0 : Math.pow(2, 10 * e - 10);
  },
  out: function(e) {
    return e === 1 ? 1 : 1 - Math.pow(2, -10 * e);
  },
  inOut: function(e) {
    return e === 0 ? 0 : e === 1 ? 1 : e < 0.5 ? Math.pow(2, 20 * e - 10) / 2 : (2 - Math.pow(2, -20 * e + 10)) / 2;
  }
};
function Wn(n, e, t) {
  var i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.25, r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.01, s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1 / 0, o = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : rP, a = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 1e-3, c = "velocity_" + e;
  if (n.__damp === void 0 && (n.__damp = {}), n.__damp[c] === void 0 && (n.__damp[c] = 0), Math.abs(n[e] - t) <= a)
    return n[e] = t, !1;
  i = Math.max(1e-4, i);
  var f = 2 / i, h = o(f * r), d = n[e] - t, p = t, v = s * i;
  d = Math.min(Math.max(d, -v), v), t = n[e] - d;
  var y = (n.__damp[c] + f * d) * r;
  n.__damp[c] = (n.__damp[c] - f * y) * h;
  var w = t + (d + y) * h;
  return p - n[e] > 0 == w > p && (w = p, n.__damp[c] = (w - p) / r), n[e] = w, !0;
}
var t5 = function(e) {
  return e && e.isCamera;
}, n5 = function(e) {
  return e && e.isLight;
}, Cc = /* @__PURE__ */ new B(), DT = /* @__PURE__ */ new Dn(), NT = /* @__PURE__ */ new Dn(), Rc = /* @__PURE__ */ new yt(), wy = /* @__PURE__ */ new B();
function i5(n, e, t, i, r, s, o) {
  typeof e == "number" ? Cc.setScalar(e) : Array.isArray(e) ? Cc.set(e[0], e[1], e[2]) : Cc.copy(e);
  var a = n.parent;
  n.updateWorldMatrix(!0, !1), wy.setFromMatrixPosition(n.matrixWorld), t5(n) || n5(n) ? Rc.lookAt(wy, Cc, n.up) : Rc.lookAt(Cc, wy, n.up), ng(n.quaternion, NT.setFromRotationMatrix(Rc), t, i, r, s, o), a && (Rc.extractRotation(a.matrixWorld), DT.setFromRotationMatrix(Rc), ng(n.quaternion, NT.copy(n.quaternion).premultiply(DT.invert()), t, i, r, s, o));
}
function vu(n, e, t, i, r, s, o, a) {
  return Wn(n, e, n[e] + VB(n[e], t), i, r, s, o, a);
}
var bc = /* @__PURE__ */ new _e(), UT, OT;
function r5(n, e, t, i, r, s, o) {
  return typeof e == "number" ? bc.setScalar(e) : Array.isArray(e) ? bc.set(e[0], e[1]) : bc.copy(e), UT = Wn(n, "x", bc.x, t, i, r, s, o), OT = Wn(n, "y", bc.y, t, i, r, s, o), UT || OT;
}
var Hl = /* @__PURE__ */ new B(), FT, kT, zT;
function j_(n, e, t, i, r, s, o) {
  return typeof e == "number" ? Hl.setScalar(e) : Array.isArray(e) ? Hl.set(e[0], e[1], e[2]) : Hl.copy(e), FT = Wn(n, "x", Hl.x, t, i, r, s, o), kT = Wn(n, "y", Hl.y, t, i, r, s, o), zT = Wn(n, "z", Hl.z, t, i, r, s, o), FT || kT || zT;
}
var va = /* @__PURE__ */ new Vt(), BT, HT, VT, GT;
function s5(n, e, t, i, r, s, o) {
  return typeof e == "number" ? va.setScalar(e) : Array.isArray(e) ? va.set(e[0], e[1], e[2], e[3]) : va.copy(e), BT = Wn(n, "x", va.x, t, i, r, s, o), HT = Wn(n, "y", va.y, t, i, r, s, o), VT = Wn(n, "z", va.z, t, i, r, s, o), GT = Wn(n, "w", va.w, t, i, r, s, o), BT || HT || VT || GT;
}
var Pc = /* @__PURE__ */ new bi(), WT, XT, YT;
function o5(n, e, t, i, r, s, o) {
  return Array.isArray(e) ? Pc.set(e[0], e[1], e[2], e[3]) : Pc.copy(e), WT = vu(n, "x", Pc.x, t, i, r, s, o), XT = vu(n, "y", Pc.y, t, i, r, s, o), YT = vu(n, "z", Pc.z, t, i, r, s, o), WT || XT || YT;
}
var Vl = /* @__PURE__ */ new Qe(), qT, jT, ZT;
function a5(n, e, t, i, r, s, o) {
  return e instanceof Qe ? Vl.copy(e) : Array.isArray(e) ? Vl.setRGB(e[0], e[1], e[2]) : Vl.set(e), qT = Wn(n, "r", Vl.r, t, i, r, s, o), jT = Wn(n, "g", Vl.g, t, i, r, s, o), ZT = Wn(n, "b", Vl.b, t, i, r, s, o), qT || jT || ZT;
}
var Fr = /* @__PURE__ */ new Dn(), Ds = /* @__PURE__ */ new Vt(), KT = /* @__PURE__ */ new Vt(), Ic = /* @__PURE__ */ new Vt(), JT, QT, $T, eA;
function ng(n, e, t, i, r, s, o) {
  var a = n;
  Array.isArray(e) ? Fr.set(e[0], e[1], e[2], e[3]) : Fr.copy(e);
  var c = n.dot(Fr) > 0 ? 1 : -1;
  return Fr.x *= c, Fr.y *= c, Fr.z *= c, Fr.w *= c, JT = Wn(n, "x", Fr.x, t, i, r, s, o), QT = Wn(n, "y", Fr.y, t, i, r, s, o), $T = Wn(n, "z", Fr.z, t, i, r, s, o), eA = Wn(n, "w", Fr.w, t, i, r, s, o), Ds.set(n.x, n.y, n.z, n.w).normalize(), KT.set(a.__damp.velocity_x, a.__damp.velocity_y, a.__damp.velocity_z, a.__damp.velocity_w), Ic.copy(Ds).multiplyScalar(KT.dot(Ds) / Ds.dot(Ds)), a.__damp.velocity_x -= Ic.x, a.__damp.velocity_y -= Ic.y, a.__damp.velocity_z -= Ic.z, a.__damp.velocity_w -= Ic.w, n.set(Ds.x, Ds.y, Ds.z, Ds.w), JT || QT || $T || eA;
}
var Lc = /* @__PURE__ */ new tg(), tA, nA, iA;
function l5(n, e, t, i, r, s, o) {
  return Array.isArray(e) ? Lc.set(e[0], e[1], e[2]) : Lc.copy(e), tA = Wn(n, "radius", Lc.radius, t, i, r, s, o), nA = vu(n, "phi", Lc.phi, t, i, r, s, o), iA = vu(n, "theta", Lc.theta, t, i, r, s, o), tA || nA || iA;
}
var Ap = /* @__PURE__ */ new yt(), rA = /* @__PURE__ */ new B(), sA = /* @__PURE__ */ new Dn(), oA = /* @__PURE__ */ new B(), aA, lA, uA;
function u5(n, e, t, i, r, s, o) {
  var a = n;
  return a.__damp === void 0 && (a.__damp = {
    position: new B(),
    rotation: new Dn(),
    scale: new B()
  }, n.decompose(a.__damp.position, a.__damp.rotation, a.__damp.scale)), Array.isArray(e) ? Ap.set.apply(Ap, zB(e)) : Ap.copy(e), Ap.decompose(rA, sA, oA), aA = j_(a.__damp.position, rA, t, i, r, s, o), lA = ng(a.__damp.rotation, sA, t, i, r, s, o), uA = j_(a.__damp.scale, oA, t, i, r, s, o), n.compose(a.__damp.position, a.__damp.rotation, a.__damp.scale), aA || lA || uA;
}
var cA = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  rsqw: qB,
  exp: rP,
  linear: jB,
  sine: ZB,
  cubic: KB,
  quint: JB,
  circ: QB,
  quart: $B,
  expo: e5,
  damp: Wn,
  dampLookAt: i5,
  dampAngle: vu,
  damp2: r5,
  damp3: j_,
  damp4: s5,
  dampE: o5,
  dampC: a5,
  dampQ: ng,
  dampS: l5,
  dampM: u5
}), Er = Uint8Array, Ao = Uint16Array, Z_ = Uint32Array, sP = new Er([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]), oP = new Er([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]), c5 = new Er([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), aP = function(n, e) {
  for (var t = new Ao(31), i = 0; i < 31; ++i)
    t[i] = e += 1 << n[i - 1];
  for (var r = new Z_(t[30]), i = 1; i < 30; ++i)
    for (var s = t[i]; s < t[i + 1]; ++s)
      r[s] = s - t[i] << 5 | i;
  return [t, r];
}, lP = aP(sP, 2), uP = lP[0], f5 = lP[1];
uP[28] = 258, f5[258] = 28;
var h5 = aP(oP, 0), d5 = h5[0], K_ = new Ao(32768);
for (var fn = 0; fn < 32768; ++fn) {
  var mo = (fn & 43690) >>> 1 | (fn & 21845) << 1;
  mo = (mo & 52428) >>> 2 | (mo & 13107) << 2, mo = (mo & 61680) >>> 4 | (mo & 3855) << 4, K_[fn] = ((mo & 65280) >>> 8 | (mo & 255) << 8) >>> 1;
}
var uf = function(n, e, t) {
  for (var i = n.length, r = 0, s = new Ao(e); r < i; ++r)
    ++s[n[r] - 1];
  var o = new Ao(e);
  for (r = 0; r < e; ++r)
    o[r] = o[r - 1] + s[r - 1] << 1;
  var a;
  if (t) {
    a = new Ao(1 << e);
    var c = 15 - e;
    for (r = 0; r < i; ++r)
      if (n[r])
        for (var f = r << 4 | n[r], h = e - n[r], d = o[n[r] - 1]++ << h, p = d | (1 << h) - 1; d <= p; ++d)
          a[K_[d] >>> c] = f;
  } else
    for (a = new Ao(i), r = 0; r < i; ++r)
      n[r] && (a[r] = K_[o[n[r] - 1]++] >>> 15 - n[r]);
  return a;
}, xh = new Er(288);
for (var fn = 0; fn < 144; ++fn)
  xh[fn] = 8;
for (var fn = 144; fn < 256; ++fn)
  xh[fn] = 9;
for (var fn = 256; fn < 280; ++fn)
  xh[fn] = 7;
for (var fn = 280; fn < 288; ++fn)
  xh[fn] = 8;
var cP = new Er(32);
for (var fn = 0; fn < 32; ++fn)
  cP[fn] = 5;
var p5 = /* @__PURE__ */ uf(xh, 9, 1), m5 = /* @__PURE__ */ uf(cP, 5, 1), Ey = function(n) {
  for (var e = n[0], t = 1; t < n.length; ++t)
    n[t] > e && (e = n[t]);
  return e;
}, kr = function(n, e, t) {
  var i = e / 8 | 0;
  return (n[i] | n[i + 1] << 8) >> (e & 7) & t;
}, Ty = function(n, e) {
  var t = e / 8 | 0;
  return (n[t] | n[t + 1] << 8 | n[t + 2] << 16) >> (e & 7);
}, g5 = function(n) {
  return (n / 8 | 0) + (n & 7 && 1);
}, v5 = function(n, e, t) {
  (e == null || e < 0) && (e = 0), (t == null || t > n.length) && (t = n.length);
  var i = new (n instanceof Ao ? Ao : n instanceof Z_ ? Z_ : Er)(t - e);
  return i.set(n.subarray(e, t)), i;
}, y5 = function(n, e, t) {
  var i = n.length;
  if (!i || t && !t.l && i < 5)
    return e || new Er(0);
  var r = !e || t, s = !t || t.i;
  t || (t = {}), e || (e = new Er(i * 3));
  var o = function(Ee) {
    var De = e.length;
    if (Ee > De) {
      var st = new Er(Math.max(De * 2, Ee));
      st.set(e), e = st;
    }
  }, a = t.f || 0, c = t.p || 0, f = t.b || 0, h = t.l, d = t.d, p = t.m, v = t.n, y = i * 8;
  do {
    if (!h) {
      t.f = a = kr(n, c, 1);
      var w = kr(n, c + 1, 3);
      if (c += 3, w)
        if (w == 1)
          h = p5, d = m5, p = 9, v = 5;
        else if (w == 2) {
          var M = kr(n, c, 31) + 257, T = kr(n, c + 10, 15) + 4, U = M + kr(n, c + 5, 31) + 1;
          c += 14;
          for (var P = new Er(U), D = new Er(19), R = 0; R < T; ++R)
            D[c5[R]] = kr(n, c + R * 3, 7);
          c += T * 3;
          for (var C = Ey(D), A = (1 << C) - 1, N = uf(D, C, 1), R = 0; R < U; ) {
            var G = N[kr(n, c, A)];
            c += G & 15;
            var x = G >>> 4;
            if (x < 16)
              P[R++] = x;
            else {
              var W = 0, j = 0;
              for (x == 16 ? (j = 3 + kr(n, c, 3), c += 2, W = P[R - 1]) : x == 17 ? (j = 3 + kr(n, c, 7), c += 3) : x == 18 && (j = 11 + kr(n, c, 127), c += 7); j--; )
                P[R++] = W;
            }
          }
          var Q = P.subarray(0, M), J = P.subarray(M);
          p = Ey(Q), v = Ey(J), h = uf(Q, p, 1), d = uf(J, v, 1);
        } else
          throw "invalid block type";
      else {
        var x = g5(c) + 4, g = n[x - 4] | n[x - 3] << 8, S = x + g;
        if (S > i) {
          if (s)
            throw "unexpected EOF";
          break;
        }
        r && o(f + g), e.set(n.subarray(x, S), f), t.b = f += g, t.p = c = S * 8;
        continue;
      }
      if (c > y) {
        if (s)
          throw "unexpected EOF";
        break;
      }
    }
    r && o(f + 131072);
    for (var oe = (1 << p) - 1, z = (1 << v) - 1, te = c; ; te = c) {
      var W = h[Ty(n, c) & oe], ne = W >>> 4;
      if (c += W & 15, c > y) {
        if (s)
          throw "unexpected EOF";
        break;
      }
      if (!W)
        throw "invalid length/literal";
      if (ne < 256)
        e[f++] = ne;
      else if (ne == 256) {
        te = c, h = null;
        break;
      } else {
        var he = ne - 254;
        if (ne > 264) {
          var R = ne - 257, Se = sP[R];
          he = kr(n, c, (1 << Se) - 1) + uP[R], c += Se;
        }
        var ke = d[Ty(n, c) & z], ce = ke >>> 4;
        if (!ke)
          throw "invalid distance";
        c += ke & 15;
        var J = d5[ce];
        if (ce > 3) {
          var Se = oP[ce];
          J += Ty(n, c) & (1 << Se) - 1, c += Se;
        }
        if (c > y) {
          if (s)
            throw "unexpected EOF";
          break;
        }
        r && o(f + 131072);
        for (var we = f + he; f < we; f += 4)
          e[f] = e[f - J], e[f + 1] = e[f + 1 - J], e[f + 2] = e[f + 2 - J], e[f + 3] = e[f + 3 - J];
        f = we;
      }
    }
    t.l = h, t.p = te, t.b = f, h && (a = 1, t.m = p, t.d = d, t.n = v);
  } while (!a);
  return f == e.length ? e : v5(e, 0, f);
}, _5 = /* @__PURE__ */ new Er(0), x5 = function(n) {
  if ((n[0] & 15) != 8 || n[0] >>> 4 > 7 || (n[0] << 8 | n[1]) % 31)
    throw "invalid zlib data";
  if (n[1] & 32)
    throw "invalid zlib data: preset dictionaries not supported";
};
function Cp(n, e) {
  return y5((x5(n), n.subarray(2, -4)), e);
}
var S5 = typeof TextDecoder < "u" && /* @__PURE__ */ new TextDecoder(), M5 = 0;
try {
  S5.decode(_5, { stream: !0 }), M5 = 1;
} catch {
}
const w5 = (n) => n && n.isCubeTexture;
class E5 extends Sn {
  constructor(e, t) {
    var i, r;
    const s = w5(e), a = ((r = s ? (i = e.image[0]) == null ? void 0 : i.width : e.image.width) != null ? r : 1024) / 4, c = Math.floor(Math.log2(a)), f = Math.pow(2, c), h = 3 * Math.max(f, 16 * 7), d = 4 * f, p = [
      s ? "#define ENVMAP_TYPE_CUBE" : "",
      `#define CUBEUV_TEXEL_WIDTH ${1 / h}`,
      `#define CUBEUV_TEXEL_HEIGHT ${1 / d}`,
      `#define CUBEUV_MAX_MIP ${c}.0`
    ], v = (
      /* glsl */
      `
        varying vec3 vWorldPosition;
        void main() 
        {
            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );
            vWorldPosition = worldPosition.xyz;
            
            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        }
        `
    ), y = p.join(`
`) + /* glsl */
    `
        #define ENVMAP_TYPE_CUBE_UV
        varying vec3 vWorldPosition;
        uniform float radius;
        uniform float height;
        uniform float angle;
        #ifdef ENVMAP_TYPE_CUBE
            uniform samplerCube map;
        #else
            uniform sampler2D map;
        #endif
        // From: https://www.shadertoy.com/view/4tsBD7
        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) 
        {
            float d = dot ( rd, n );
            
            if( d > 0.0 ) { return 1e6; }
            
            vec3  o = ro - c;
            float t = - dot( n, o ) / d;
            vec3  q = o + rd * t;
            
            return ( dot( q, q ) < r * r ) ? t : 1e6;
        }
        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm
        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) 
        {
            vec3 oc = ro - ce;
            float b = dot( oc, rd );
            float c = dot( oc, oc ) - ra * ra;
            float h = b * b - c;
            
            if( h < 0.0 ) { return -1.0; }
            
            h = sqrt( h );
            
            return - b + h;
        }
        vec3 project() 
        {
            vec3 p = normalize( vWorldPosition );
            vec3 camPos = cameraPosition;
            camPos.y -= height;
            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );
            if( intersection > 0.0 ) {
                
                vec3 h = vec3( 0.0, - height, 0.0 );
                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );
                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;
            } else {
                p = vec3( 0.0, 1.0, 0.0 );
            }
            return p;
        }
        #include <common>
        #include <cube_uv_reflection_fragment>
        void main() 
        {
            vec3 projectedWorldPosition = project();
            
            #ifdef ENVMAP_TYPE_CUBE
                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;
            #else
                vec3 direction = normalize( projectedWorldPosition );
                vec2 uv = equirectUv( direction );
                vec3 outcolor = texture2D( map, uv ).rgb;
            #endif
            gl_FragColor = vec4( outcolor, 1.0 );
            #include <tonemapping_fragment>
            #include <${parseInt(nh.replace(/\D+/g, "")) >= 154 ? "colorspace_fragment" : "encodings_fragment"}>
        }
        `, w = {
      map: { value: e },
      height: { value: t?.height || 15 },
      radius: { value: t?.radius || 100 }
    }, x = new dh(1, 16), g = new qi({
      uniforms: w,
      fragmentShader: y,
      vertexShader: v,
      side: Wr
    });
    super(x, g);
  }
  set radius(e) {
    this.material.uniforms.radius.value = e;
  }
  get radius() {
    return this.material.uniforms.radius.value;
  }
  set height(e) {
    this.material.uniforms.height.value = e;
  }
  get height() {
    return this.material.uniforms.height.value;
  }
}
var T5 = Object.defineProperty, A5 = (n, e, t) => e in n ? T5(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Et = (n, e, t) => (A5(n, typeof e != "symbol" ? e + "" : e, t), t);
const Rp = new el(), fA = new Fs(), C5 = Math.cos(70 * (Math.PI / 180)), hA = (n, e) => (n % e + e) % e;
let R5 = class extends _s {
  constructor(e, t) {
    super(), Et(this, "object"), Et(this, "domElement"), Et(this, "enabled", !0), Et(this, "target", new B()), Et(this, "minDistance", 0), Et(this, "maxDistance", 1 / 0), Et(this, "minZoom", 0), Et(this, "maxZoom", 1 / 0), Et(this, "minPolarAngle", 0), Et(this, "maxPolarAngle", Math.PI), Et(this, "minAzimuthAngle", -1 / 0), Et(this, "maxAzimuthAngle", 1 / 0), Et(this, "enableDamping", !1), Et(this, "dampingFactor", 0.05), Et(this, "enableZoom", !0), Et(this, "zoomSpeed", 1), Et(this, "enableRotate", !0), Et(this, "rotateSpeed", 1), Et(this, "enablePan", !0), Et(this, "panSpeed", 1), Et(this, "screenSpacePanning", !0), Et(this, "keyPanSpeed", 7), Et(this, "zoomToCursor", !1), Et(this, "autoRotate", !1), Et(this, "autoRotateSpeed", 2), Et(this, "reverseOrbit", !1), Et(this, "reverseHorizontalOrbit", !1), Et(this, "reverseVerticalOrbit", !1), Et(this, "keys", { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" }), Et(this, "mouseButtons", {
      LEFT: Sa.ROTATE,
      MIDDLE: Sa.DOLLY,
      RIGHT: Sa.PAN
    }), Et(this, "touches", { ONE: Ma.ROTATE, TWO: Ma.DOLLY_PAN }), Et(this, "target0"), Et(this, "position0"), Et(this, "zoom0"), Et(this, "_domElementKeyEvents", null), Et(this, "getPolarAngle"), Et(this, "getAzimuthalAngle"), Et(this, "setPolarAngle"), Et(this, "setAzimuthalAngle"), Et(this, "getDistance"), Et(this, "listenToKeyEvents"), Et(this, "stopListenToKeyEvents"), Et(this, "saveState"), Et(this, "reset"), Et(this, "update"), Et(this, "connect"), Et(this, "dispose"), this.object = e, this.domElement = t, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = () => h.phi, this.getAzimuthalAngle = () => h.theta, this.setPolarAngle = (ee) => {
      let ye = hA(ee, 2 * Math.PI), ze = h.phi;
      ze < 0 && (ze += 2 * Math.PI), ye < 0 && (ye += 2 * Math.PI);
      let K = Math.abs(ye - ze);
      2 * Math.PI - K < K && (ye < ze ? ye += 2 * Math.PI : ze += 2 * Math.PI), d.phi = ye - ze, i.update();
    }, this.setAzimuthalAngle = (ee) => {
      let ye = hA(ee, 2 * Math.PI), ze = h.theta;
      ze < 0 && (ze += 2 * Math.PI), ye < 0 && (ye += 2 * Math.PI);
      let K = Math.abs(ye - ze);
      2 * Math.PI - K < K && (ye < ze ? ye += 2 * Math.PI : ze += 2 * Math.PI), d.theta = ye - ze, i.update();
    }, this.getDistance = () => i.object.position.distanceTo(i.target), this.listenToKeyEvents = (ee) => {
      ee.addEventListener("keydown", Ve), this._domElementKeyEvents = ee;
    }, this.stopListenToKeyEvents = () => {
      this._domElementKeyEvents.removeEventListener("keydown", Ve), this._domElementKeyEvents = null;
    }, this.saveState = () => {
      i.target0.copy(i.target), i.position0.copy(i.object.position), i.zoom0 = i.object.zoom;
    }, this.reset = () => {
      i.target.copy(i.target0), i.object.position.copy(i.position0), i.object.zoom = i.zoom0, i.object.updateProjectionMatrix(), i.dispatchEvent(r), i.update(), c = a.NONE;
    }, this.update = (() => {
      const ee = new B(), ye = new B(0, 1, 0), ze = new Dn().setFromUnitVectors(e.up, ye), K = ze.clone().invert(), be = new B(), ie = new Dn(), xe = 2 * Math.PI;
      return function() {
        const pt = i.object.position;
        ze.setFromUnitVectors(e.up, ye), K.copy(ze).invert(), ee.copy(pt).sub(i.target), ee.applyQuaternion(ze), h.setFromVector3(ee), i.autoRotate && c === a.NONE && j(G()), i.enableDamping ? (h.theta += d.theta * i.dampingFactor, h.phi += d.phi * i.dampingFactor) : (h.theta += d.theta, h.phi += d.phi);
        let wt = i.minAzimuthAngle, Ht = i.maxAzimuthAngle;
        isFinite(wt) && isFinite(Ht) && (wt < -Math.PI ? wt += xe : wt > Math.PI && (wt -= xe), Ht < -Math.PI ? Ht += xe : Ht > Math.PI && (Ht -= xe), wt <= Ht ? h.theta = Math.max(wt, Math.min(Ht, h.theta)) : h.theta = h.theta > (wt + Ht) / 2 ? Math.max(wt, h.theta) : Math.min(Ht, h.theta)), h.phi = Math.max(i.minPolarAngle, Math.min(i.maxPolarAngle, h.phi)), h.makeSafe(), i.enableDamping === !0 ? i.target.addScaledVector(v, i.dampingFactor) : i.target.add(v), i.zoomToCursor && C || i.object.isOrthographicCamera ? h.radius = Se(h.radius) : h.radius = Se(h.radius * p), ee.setFromSpherical(h), ee.applyQuaternion(K), pt.copy(i.target).add(ee), i.object.matrixAutoUpdate || i.object.updateMatrix(), i.object.lookAt(i.target), i.enableDamping === !0 ? (d.theta *= 1 - i.dampingFactor, d.phi *= 1 - i.dampingFactor, v.multiplyScalar(1 - i.dampingFactor)) : (d.set(0, 0, 0), v.set(0, 0, 0));
        let rn = !1;
        if (i.zoomToCursor && C) {
          let It = null;
          if (i.object instanceof Rn && i.object.isPerspectiveCamera) {
            const Nn = ee.length();
            It = Se(Nn * p);
            const Un = Nn - It;
            i.object.position.addScaledVector(D, Un), i.object.updateMatrixWorld();
          } else if (i.object.isOrthographicCamera) {
            const Nn = new B(R.x, R.y, 0);
            Nn.unproject(i.object), i.object.zoom = Math.max(i.minZoom, Math.min(i.maxZoom, i.object.zoom / p)), i.object.updateProjectionMatrix(), rn = !0;
            const Un = new B(R.x, R.y, 0);
            Un.unproject(i.object), i.object.position.sub(Un).add(Nn), i.object.updateMatrixWorld(), It = ee.length();
          } else
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."), i.zoomToCursor = !1;
          It !== null && (i.screenSpacePanning ? i.target.set(0, 0, -1).transformDirection(i.object.matrix).multiplyScalar(It).add(i.object.position) : (Rp.origin.copy(i.object.position), Rp.direction.set(0, 0, -1).transformDirection(i.object.matrix), Math.abs(i.object.up.dot(Rp.direction)) < C5 ? e.lookAt(i.target) : (fA.setFromNormalAndCoplanarPoint(i.object.up, i.target), Rp.intersectPlane(fA, i.target))));
        } else
          i.object instanceof fs && i.object.isOrthographicCamera && (rn = p !== 1, rn && (i.object.zoom = Math.max(i.minZoom, Math.min(i.maxZoom, i.object.zoom / p)), i.object.updateProjectionMatrix()));
        return p = 1, C = !1, rn || be.distanceToSquared(i.object.position) > f || 8 * (1 - ie.dot(i.object.quaternion)) > f ? (i.dispatchEvent(r), be.copy(i.object.position), ie.copy(i.object.quaternion), rn = !1, !0) : !1;
      };
    })(), this.connect = (ee) => {
      ee === document && console.error(
        'THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'
      ), i.domElement = ee, i.domElement.style.touchAction = "none", i.domElement.addEventListener("contextmenu", Ue), i.domElement.addEventListener("pointerdown", O), i.domElement.addEventListener("pointercancel", Te), i.domElement.addEventListener("wheel", ot);
    }, this.dispose = () => {
      var ee, ye, ze, K, be, ie;
      i.domElement && (i.domElement.style.touchAction = "auto"), (ee = i.domElement) == null || ee.removeEventListener("contextmenu", Ue), (ye = i.domElement) == null || ye.removeEventListener("pointerdown", O), (ze = i.domElement) == null || ze.removeEventListener("pointercancel", Te), (K = i.domElement) == null || K.removeEventListener("wheel", ot), (be = i.domElement) == null || be.ownerDocument.removeEventListener("pointermove", ue), (ie = i.domElement) == null || ie.ownerDocument.removeEventListener("pointerup", Te), i._domElementKeyEvents !== null && i._domElementKeyEvents.removeEventListener("keydown", Ve);
    };
    const i = this, r = { type: "change" }, s = { type: "start" }, o = { type: "end" }, a = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    let c = a.NONE;
    const f = 1e-6, h = new tg(), d = new tg();
    let p = 1;
    const v = new B(), y = new _e(), w = new _e(), x = new _e(), g = new _e(), S = new _e(), M = new _e(), T = new _e(), U = new _e(), P = new _e(), D = new B(), R = new _e();
    let C = !1;
    const A = [], N = {};
    function G() {
      return 2 * Math.PI / 60 / 60 * i.autoRotateSpeed;
    }
    function W() {
      return Math.pow(0.95, i.zoomSpeed);
    }
    function j(ee) {
      i.reverseOrbit || i.reverseHorizontalOrbit ? d.theta += ee : d.theta -= ee;
    }
    function Q(ee) {
      i.reverseOrbit || i.reverseVerticalOrbit ? d.phi += ee : d.phi -= ee;
    }
    const J = (() => {
      const ee = new B();
      return function(ze, K) {
        ee.setFromMatrixColumn(K, 0), ee.multiplyScalar(-ze), v.add(ee);
      };
    })(), oe = (() => {
      const ee = new B();
      return function(ze, K) {
        i.screenSpacePanning === !0 ? ee.setFromMatrixColumn(K, 1) : (ee.setFromMatrixColumn(K, 0), ee.crossVectors(i.object.up, ee)), ee.multiplyScalar(ze), v.add(ee);
      };
    })(), z = (() => {
      const ee = new B();
      return function(ze, K) {
        const be = i.domElement;
        if (be && i.object instanceof Rn && i.object.isPerspectiveCamera) {
          const ie = i.object.position;
          ee.copy(ie).sub(i.target);
          let xe = ee.length();
          xe *= Math.tan(i.object.fov / 2 * Math.PI / 180), J(2 * ze * xe / be.clientHeight, i.object.matrix), oe(2 * K * xe / be.clientHeight, i.object.matrix);
        } else
          be && i.object instanceof fs && i.object.isOrthographicCamera ? (J(
            ze * (i.object.right - i.object.left) / i.object.zoom / be.clientWidth,
            i.object.matrix
          ), oe(
            K * (i.object.top - i.object.bottom) / i.object.zoom / be.clientHeight,
            i.object.matrix
          )) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), i.enablePan = !1);
      };
    })();
    function te(ee) {
      i.object instanceof Rn && i.object.isPerspectiveCamera || i.object instanceof fs && i.object.isOrthographicCamera ? p /= ee : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), i.enableZoom = !1);
    }
    function ne(ee) {
      i.object instanceof Rn && i.object.isPerspectiveCamera || i.object instanceof fs && i.object.isOrthographicCamera ? p *= ee : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), i.enableZoom = !1);
    }
    function he(ee) {
      if (!i.zoomToCursor || !i.domElement)
        return;
      C = !0;
      const ye = i.domElement.getBoundingClientRect(), ze = ee.clientX - ye.left, K = ee.clientY - ye.top, be = ye.width, ie = ye.height;
      R.x = ze / be * 2 - 1, R.y = -(K / ie) * 2 + 1, D.set(R.x, R.y, 1).unproject(i.object).sub(i.object.position).normalize();
    }
    function Se(ee) {
      return Math.max(i.minDistance, Math.min(i.maxDistance, ee));
    }
    function ke(ee) {
      y.set(ee.clientX, ee.clientY);
    }
    function ce(ee) {
      he(ee), T.set(ee.clientX, ee.clientY);
    }
    function we(ee) {
      g.set(ee.clientX, ee.clientY);
    }
    function Ee(ee) {
      w.set(ee.clientX, ee.clientY), x.subVectors(w, y).multiplyScalar(i.rotateSpeed);
      const ye = i.domElement;
      ye && (j(2 * Math.PI * x.x / ye.clientHeight), Q(2 * Math.PI * x.y / ye.clientHeight)), y.copy(w), i.update();
    }
    function De(ee) {
      U.set(ee.clientX, ee.clientY), P.subVectors(U, T), P.y > 0 ? te(W()) : P.y < 0 && ne(W()), T.copy(U), i.update();
    }
    function st(ee) {
      S.set(ee.clientX, ee.clientY), M.subVectors(S, g).multiplyScalar(i.panSpeed), z(M.x, M.y), g.copy(S), i.update();
    }
    function Mt(ee) {
      he(ee), ee.deltaY < 0 ? ne(W()) : ee.deltaY > 0 && te(W()), i.update();
    }
    function dt(ee) {
      let ye = !1;
      switch (ee.code) {
        case i.keys.UP:
          z(0, i.keyPanSpeed), ye = !0;
          break;
        case i.keys.BOTTOM:
          z(0, -i.keyPanSpeed), ye = !0;
          break;
        case i.keys.LEFT:
          z(i.keyPanSpeed, 0), ye = !0;
          break;
        case i.keys.RIGHT:
          z(-i.keyPanSpeed, 0), ye = !0;
          break;
      }
      ye && (ee.preventDefault(), i.update());
    }
    function xt() {
      if (A.length == 1)
        y.set(A[0].pageX, A[0].pageY);
      else {
        const ee = 0.5 * (A[0].pageX + A[1].pageX), ye = 0.5 * (A[0].pageY + A[1].pageY);
        y.set(ee, ye);
      }
    }
    function H() {
      if (A.length == 1)
        g.set(A[0].pageX, A[0].pageY);
      else {
        const ee = 0.5 * (A[0].pageX + A[1].pageX), ye = 0.5 * (A[0].pageY + A[1].pageY);
        g.set(ee, ye);
      }
    }
    function Ie() {
      const ee = A[0].pageX - A[1].pageX, ye = A[0].pageY - A[1].pageY, ze = Math.sqrt(ee * ee + ye * ye);
      T.set(0, ze);
    }
    function Le() {
      i.enableZoom && Ie(), i.enablePan && H();
    }
    function Ge() {
      i.enableZoom && Ie(), i.enableRotate && xt();
    }
    function Me(ee) {
      if (A.length == 1)
        w.set(ee.pageX, ee.pageY);
      else {
        const ze = Be(ee), K = 0.5 * (ee.pageX + ze.x), be = 0.5 * (ee.pageY + ze.y);
        w.set(K, be);
      }
      x.subVectors(w, y).multiplyScalar(i.rotateSpeed);
      const ye = i.domElement;
      ye && (j(2 * Math.PI * x.x / ye.clientHeight), Q(2 * Math.PI * x.y / ye.clientHeight)), y.copy(w);
    }
    function at(ee) {
      if (A.length == 1)
        S.set(ee.pageX, ee.pageY);
      else {
        const ye = Be(ee), ze = 0.5 * (ee.pageX + ye.x), K = 0.5 * (ee.pageY + ye.y);
        S.set(ze, K);
      }
      M.subVectors(S, g).multiplyScalar(i.panSpeed), z(M.x, M.y), g.copy(S);
    }
    function We(ee) {
      const ye = Be(ee), ze = ee.pageX - ye.x, K = ee.pageY - ye.y, be = Math.sqrt(ze * ze + K * K);
      U.set(0, be), P.set(0, Math.pow(U.y / T.y, i.zoomSpeed)), te(P.y), T.copy(U);
    }
    function et(ee) {
      i.enableZoom && We(ee), i.enablePan && at(ee);
    }
    function q(ee) {
      i.enableZoom && We(ee), i.enableRotate && Me(ee);
    }
    function O(ee) {
      var ye, ze;
      i.enabled !== !1 && (A.length === 0 && ((ye = i.domElement) == null || ye.ownerDocument.addEventListener("pointermove", ue), (ze = i.domElement) == null || ze.ownerDocument.addEventListener("pointerup", Te)), Ze(ee), ee.pointerType === "touch" ? Je(ee) : Ae(ee));
    }
    function ue(ee) {
      i.enabled !== !1 && (ee.pointerType === "touch" ? _t(ee) : Ce(ee));
    }
    function Te(ee) {
      var ye, ze, K;
      Nt(ee), A.length === 0 && ((ye = i.domElement) == null || ye.releasePointerCapture(ee.pointerId), (ze = i.domElement) == null || ze.ownerDocument.removeEventListener("pointermove", ue), (K = i.domElement) == null || K.ownerDocument.removeEventListener("pointerup", Te)), i.dispatchEvent(o), c = a.NONE;
    }
    function Ae(ee) {
      let ye;
      switch (ee.button) {
        case 0:
          ye = i.mouseButtons.LEFT;
          break;
        case 1:
          ye = i.mouseButtons.MIDDLE;
          break;
        case 2:
          ye = i.mouseButtons.RIGHT;
          break;
        default:
          ye = -1;
      }
      switch (ye) {
        case Sa.DOLLY:
          if (i.enableZoom === !1)
            return;
          ce(ee), c = a.DOLLY;
          break;
        case Sa.ROTATE:
          if (ee.ctrlKey || ee.metaKey || ee.shiftKey) {
            if (i.enablePan === !1)
              return;
            we(ee), c = a.PAN;
          } else {
            if (i.enableRotate === !1)
              return;
            ke(ee), c = a.ROTATE;
          }
          break;
        case Sa.PAN:
          if (ee.ctrlKey || ee.metaKey || ee.shiftKey) {
            if (i.enableRotate === !1)
              return;
            ke(ee), c = a.ROTATE;
          } else {
            if (i.enablePan === !1)
              return;
            we(ee), c = a.PAN;
          }
          break;
        default:
          c = a.NONE;
      }
      c !== a.NONE && i.dispatchEvent(s);
    }
    function Ce(ee) {
      if (i.enabled !== !1)
        switch (c) {
          case a.ROTATE:
            if (i.enableRotate === !1)
              return;
            Ee(ee);
            break;
          case a.DOLLY:
            if (i.enableZoom === !1)
              return;
            De(ee);
            break;
          case a.PAN:
            if (i.enablePan === !1)
              return;
            st(ee);
            break;
        }
    }
    function ot(ee) {
      i.enabled === !1 || i.enableZoom === !1 || c !== a.NONE && c !== a.ROTATE || (ee.preventDefault(), i.dispatchEvent(s), Mt(ee), i.dispatchEvent(o));
    }
    function Ve(ee) {
      i.enabled === !1 || i.enablePan === !1 || dt(ee);
    }
    function Je(ee) {
      switch (ht(ee), A.length) {
        case 1:
          switch (i.touches.ONE) {
            case Ma.ROTATE:
              if (i.enableRotate === !1)
                return;
              xt(), c = a.TOUCH_ROTATE;
              break;
            case Ma.PAN:
              if (i.enablePan === !1)
                return;
              H(), c = a.TOUCH_PAN;
              break;
            default:
              c = a.NONE;
          }
          break;
        case 2:
          switch (i.touches.TWO) {
            case Ma.DOLLY_PAN:
              if (i.enableZoom === !1 && i.enablePan === !1)
                return;
              Le(), c = a.TOUCH_DOLLY_PAN;
              break;
            case Ma.DOLLY_ROTATE:
              if (i.enableZoom === !1 && i.enableRotate === !1)
                return;
              Ge(), c = a.TOUCH_DOLLY_ROTATE;
              break;
            default:
              c = a.NONE;
          }
          break;
        default:
          c = a.NONE;
      }
      c !== a.NONE && i.dispatchEvent(s);
    }
    function _t(ee) {
      switch (ht(ee), c) {
        case a.TOUCH_ROTATE:
          if (i.enableRotate === !1)
            return;
          Me(ee), i.update();
          break;
        case a.TOUCH_PAN:
          if (i.enablePan === !1)
            return;
          at(ee), i.update();
          break;
        case a.TOUCH_DOLLY_PAN:
          if (i.enableZoom === !1 && i.enablePan === !1)
            return;
          et(ee), i.update();
          break;
        case a.TOUCH_DOLLY_ROTATE:
          if (i.enableZoom === !1 && i.enableRotate === !1)
            return;
          q(ee), i.update();
          break;
        default:
          c = a.NONE;
      }
    }
    function Ue(ee) {
      i.enabled !== !1 && ee.preventDefault();
    }
    function Ze(ee) {
      A.push(ee);
    }
    function Nt(ee) {
      delete N[ee.pointerId];
      for (let ye = 0; ye < A.length; ye++)
        if (A[ye].pointerId == ee.pointerId) {
          A.splice(ye, 1);
          return;
        }
    }
    function ht(ee) {
      let ye = N[ee.pointerId];
      ye === void 0 && (ye = new _e(), N[ee.pointerId] = ye), ye.set(ee.pageX, ee.pageY);
    }
    function Be(ee) {
      const ye = ee.pointerId === A[0].pointerId ? A[1] : A[0];
      return N[ye.pointerId];
    }
    t !== void 0 && this.connect(t), this.update();
  }
};
class b5 extends P1 {
  constructor(e) {
    super(e), this.type = $n;
  }
  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html
  parse(e) {
    const o = function(R, C) {
      switch (R) {
        case 1:
          throw new Error("THREE.RGBELoader: Read Error: " + (C || ""));
        case 2:
          throw new Error("THREE.RGBELoader: Write Error: " + (C || ""));
        case 3:
          throw new Error("THREE.RGBELoader: Bad File Format: " + (C || ""));
        default:
        case 4:
          throw new Error("THREE.RGBELoader: Memory Error: " + (C || ""));
      }
    }, h = `
`, d = function(R, C, A) {
      C = C || 1024;
      let G = R.pos, W = -1, j = 0, Q = "", J = String.fromCharCode.apply(null, new Uint16Array(R.subarray(G, G + 128)));
      for (; 0 > (W = J.indexOf(h)) && j < C && G < R.byteLength; )
        Q += J, j += J.length, G += 128, J += String.fromCharCode.apply(null, new Uint16Array(R.subarray(G, G + 128)));
      return -1 < W ? (A !== !1 && (R.pos += j + W + 1), Q + J.slice(0, W)) : !1;
    }, p = function(R) {
      const C = /^#\?(\S+)/, A = /^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/, N = /^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/, G = /^\s*FORMAT=(\S+)\s*$/, W = /^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/, j = {
        valid: 0,
        string: "",
        comments: "",
        programtype: "RGBE",
        format: "",
        gamma: 1,
        exposure: 1,
        width: 0,
        height: 0
      };
      let Q, J;
      for ((R.pos >= R.byteLength || !(Q = d(R))) && o(1, "no header found"), (J = Q.match(C)) || o(3, "bad initial token"), j.valid |= 1, j.programtype = J[1], j.string += Q + `
`; Q = d(R), Q !== !1; ) {
        if (j.string += Q + `
`, Q.charAt(0) === "#") {
          j.comments += Q + `
`;
          continue;
        }
        if ((J = Q.match(A)) && (j.gamma = parseFloat(J[1])), (J = Q.match(N)) && (j.exposure = parseFloat(J[1])), (J = Q.match(G)) && (j.valid |= 2, j.format = J[1]), (J = Q.match(W)) && (j.valid |= 4, j.height = parseInt(J[1], 10), j.width = parseInt(J[2], 10)), j.valid & 2 && j.valid & 4)
          break;
      }
      return j.valid & 2 || o(3, "missing format specifier"), j.valid & 4 || o(3, "missing image size specifier"), j;
    }, v = function(R, C, A) {
      const N = C;
      if (
        // run length encoding is not allowed so read flat
        N < 8 || N > 32767 || // this file is not run length encoded
        R[0] !== 2 || R[1] !== 2 || R[2] & 128
      )
        return new Uint8Array(R);
      N !== (R[2] << 8 | R[3]) && o(3, "wrong scanline width");
      const G = new Uint8Array(4 * C * A);
      G.length || o(4, "unable to allocate buffer space");
      let W = 0, j = 0;
      const Q = 4 * N, J = new Uint8Array(4), oe = new Uint8Array(Q);
      let z = A;
      for (; z > 0 && j < R.byteLength; ) {
        j + 4 > R.byteLength && o(1), J[0] = R[j++], J[1] = R[j++], J[2] = R[j++], J[3] = R[j++], (J[0] != 2 || J[1] != 2 || (J[2] << 8 | J[3]) != N) && o(3, "bad rgbe scanline format");
        let te = 0, ne;
        for (; te < Q && j < R.byteLength; ) {
          ne = R[j++];
          const Se = ne > 128;
          if (Se && (ne -= 128), (ne === 0 || te + ne > Q) && o(3, "bad scanline data"), Se) {
            const ke = R[j++];
            for (let ce = 0; ce < ne; ce++)
              oe[te++] = ke;
          } else
            oe.set(R.subarray(j, j + ne), te), te += ne, j += ne;
        }
        const he = N;
        for (let Se = 0; Se < he; Se++) {
          let ke = 0;
          G[W] = oe[Se + ke], ke += N, G[W + 1] = oe[Se + ke], ke += N, G[W + 2] = oe[Se + ke], ke += N, G[W + 3] = oe[Se + ke], W += 4;
        }
        z--;
      }
      return G;
    }, y = function(R, C, A, N) {
      const G = R[C + 3], W = Math.pow(2, G - 128) / 255;
      A[N + 0] = R[C + 0] * W, A[N + 1] = R[C + 1] * W, A[N + 2] = R[C + 2] * W, A[N + 3] = 1;
    }, w = function(R, C, A, N) {
      const G = R[C + 3], W = Math.pow(2, G - 128) / 255;
      A[N + 0] = La.toHalfFloat(Math.min(R[C + 0] * W, 65504)), A[N + 1] = La.toHalfFloat(Math.min(R[C + 1] * W, 65504)), A[N + 2] = La.toHalfFloat(Math.min(R[C + 2] * W, 65504)), A[N + 3] = La.toHalfFloat(1);
    }, x = new Uint8Array(e);
    x.pos = 0;
    const g = p(x), S = g.width, M = g.height, T = v(x.subarray(x.pos), S, M);
    let U, P, D;
    switch (this.type) {
      case xn:
        D = T.length / 4;
        const R = new Float32Array(D * 4);
        for (let A = 0; A < D; A++)
          y(T, A * 4, R, A * 4);
        U = R, P = xn;
        break;
      case $n:
        D = T.length / 4;
        const C = new Uint16Array(D * 4);
        for (let A = 0; A < D; A++)
          w(T, A * 4, C, A * 4);
        U = C, P = $n;
        break;
      default:
        throw new Error("THREE.RGBELoader: Unsupported type: " + this.type);
    }
    return {
      width: S,
      height: M,
      data: U,
      header: g.string,
      gamma: g.gamma,
      exposure: g.exposure,
      type: P
    };
  }
  setDataType(e) {
    return this.type = e, this;
  }
  load(e, t, i, r) {
    function s(o, a) {
      switch (o.type) {
        case xn:
        case $n:
          "colorSpace" in o ? o.colorSpace = "srgb-linear" : o.encoding = 3e3, o.minFilter = $t, o.magFilter = $t, o.generateMipmaps = !1, o.flipY = !0;
          break;
      }
      t && t(o, a);
    }
    return super.load(e, s, i, r);
  }
}
const Dc = "colorSpace" in new Kt();
class P5 extends P1 {
  constructor(e) {
    super(e), this.type = $n;
  }
  parse(e) {
    const C = Math.pow(2.7182818, 2.2);
    function A(L, F) {
      for (var $ = 0, I = 0; I < 65536; ++I)
        (I == 0 || L[I >> 3] & 1 << (I & 7)) && (F[$++] = I);
      for (var k = $ - 1; $ < 65536; )
        F[$++] = 0;
      return k;
    }
    function N(L) {
      for (var F = 0; F < 16384; F++)
        L[F] = {}, L[F].len = 0, L[F].lit = 0, L[F].p = null;
    }
    const G = { l: 0, c: 0, lc: 0 };
    function W(L, F, $, I, k) {
      for (; $ < L; )
        F = F << 8 | ee(I, k), $ += 8;
      $ -= L, G.l = F >> $ & (1 << L) - 1, G.c = F, G.lc = $;
    }
    const j = new Array(59);
    function Q(L) {
      for (var F = 0; F <= 58; ++F)
        j[F] = 0;
      for (var F = 0; F < 65537; ++F)
        j[L[F]] += 1;
      for (var $ = 0, F = 58; F > 0; --F) {
        var I = $ + j[F] >> 1;
        j[F] = $, $ = I;
      }
      for (var F = 0; F < 65537; ++F) {
        var k = L[F];
        k > 0 && (L[F] = k | j[k]++ << 6);
      }
    }
    function J(L, F, $, I, k, V, Z) {
      for (var X = $, ae = 0, le = 0; k <= V; k++) {
        if (X.value - $.value > I)
          return !1;
        W(6, ae, le, L, X);
        var pe = G.l;
        if (ae = G.c, le = G.lc, Z[k] = pe, pe == 63) {
          if (X.value - $.value > I)
            throw "Something wrong with hufUnpackEncTable";
          W(8, ae, le, L, X);
          var de = G.l + 6;
          if (ae = G.c, le = G.lc, k + de > V + 1)
            throw "Something wrong with hufUnpackEncTable";
          for (; de--; )
            Z[k++] = 0;
          k--;
        } else if (pe >= 59) {
          var de = pe - 59 + 2;
          if (k + de > V + 1)
            throw "Something wrong with hufUnpackEncTable";
          for (; de--; )
            Z[k++] = 0;
          k--;
        }
      }
      Q(Z);
    }
    function oe(L) {
      return L & 63;
    }
    function z(L) {
      return L >> 6;
    }
    function te(L, F, $, I) {
      for (; F <= $; F++) {
        var k = z(L[F]), V = oe(L[F]);
        if (k >> V)
          throw "Invalid table entry";
        if (V > 14) {
          var Z = I[k >> V - 14];
          if (Z.len)
            throw "Invalid table entry";
          if (Z.lit++, Z.p) {
            var X = Z.p;
            Z.p = new Array(Z.lit);
            for (var ae = 0; ae < Z.lit - 1; ++ae)
              Z.p[ae] = X[ae];
          } else
            Z.p = new Array(1);
          Z.p[Z.lit - 1] = F;
        } else if (V)
          for (var le = 0, ae = 1 << 14 - V; ae > 0; ae--) {
            var Z = I[(k << 14 - V) + le];
            if (Z.len || Z.p)
              throw "Invalid table entry";
            Z.len = V, Z.lit = F, le++;
          }
      }
      return !0;
    }
    const ne = { c: 0, lc: 0 };
    function he(L, F, $, I) {
      L = L << 8 | ee($, I), F += 8, ne.c = L, ne.lc = F;
    }
    const Se = { c: 0, lc: 0 };
    function ke(L, F, $, I, k, V, Z, X, ae, le) {
      if (L == F) {
        I < 8 && (he($, I, k, Z), $ = ne.c, I = ne.lc), I -= 8;
        var pe = $ >> I, pe = new Uint8Array([pe])[0];
        if (ae.value + pe > le)
          return !1;
        for (var de = X[ae.value - 1]; pe-- > 0; )
          X[ae.value++] = de;
      } else if (ae.value < le)
        X[ae.value++] = L;
      else
        return !1;
      Se.c = $, Se.lc = I;
    }
    function ce(L) {
      return L & 65535;
    }
    function we(L) {
      var F = ce(L);
      return F > 32767 ? F - 65536 : F;
    }
    const Ee = { a: 0, b: 0 };
    function De(L, F) {
      var $ = we(L), I = we(F), k = I, V = $ + (k & 1) + (k >> 1), Z = V, X = V - k;
      Ee.a = Z, Ee.b = X;
    }
    function st(L, F) {
      var $ = ce(L), I = ce(F), k = $ - (I >> 1) & 65535, V = I + k - 32768 & 65535;
      Ee.a = V, Ee.b = k;
    }
    function Mt(L, F, $, I, k, V, Z) {
      for (var X = Z < 16384, ae = $ > k ? k : $, le = 1, pe; le <= ae; )
        le <<= 1;
      for (le >>= 1, pe = le, le >>= 1; le >= 1; ) {
        for (var de = 0, Xe = de + V * (k - pe), Pe = V * le, Re = V * pe, je = I * le, nt = I * pe, ct, St, Ye, Ne; de <= Xe; de += Re) {
          for (var mt = de, lt = de + I * ($ - pe); mt <= lt; mt += nt) {
            var gt = mt + je, Gt = mt + Pe, Qt = Gt + je;
            X ? (De(L[mt + F], L[Gt + F]), ct = Ee.a, Ye = Ee.b, De(L[gt + F], L[Qt + F]), St = Ee.a, Ne = Ee.b, De(ct, St), L[mt + F] = Ee.a, L[gt + F] = Ee.b, De(Ye, Ne), L[Gt + F] = Ee.a, L[Qt + F] = Ee.b) : (st(L[mt + F], L[Gt + F]), ct = Ee.a, Ye = Ee.b, st(L[gt + F], L[Qt + F]), St = Ee.a, Ne = Ee.b, st(ct, St), L[mt + F] = Ee.a, L[gt + F] = Ee.b, st(Ye, Ne), L[Gt + F] = Ee.a, L[Qt + F] = Ee.b);
          }
          if ($ & le) {
            var Gt = mt + Pe;
            X ? De(L[mt + F], L[Gt + F]) : st(L[mt + F], L[Gt + F]), ct = Ee.a, L[Gt + F] = Ee.b, L[mt + F] = ct;
          }
        }
        if (k & le)
          for (var mt = de, lt = de + I * ($ - pe); mt <= lt; mt += nt) {
            var gt = mt + je;
            X ? De(L[mt + F], L[gt + F]) : st(L[mt + F], L[gt + F]), ct = Ee.a, L[gt + F] = Ee.b, L[mt + F] = ct;
          }
        pe = le, le >>= 1;
      }
      return de;
    }
    function dt(L, F, $, I, k, V, Z, X, ae, le) {
      for (var pe = 0, de = 0, Xe = X, Pe = Math.trunc(k.value + (V + 7) / 8); k.value < Pe; )
        for (he(pe, de, $, k), pe = ne.c, de = ne.lc; de >= 14; ) {
          var Re = pe >> de - 14 & 16383, je = F[Re];
          if (je.len)
            de -= je.len, ke(je.lit, Z, pe, de, $, I, k, ae, le, Xe), pe = Se.c, de = Se.lc;
          else {
            if (!je.p)
              throw "hufDecode issues";
            var nt;
            for (nt = 0; nt < je.lit; nt++) {
              for (var ct = oe(L[je.p[nt]]); de < ct && k.value < Pe; )
                he(pe, de, $, k), pe = ne.c, de = ne.lc;
              if (de >= ct && z(L[je.p[nt]]) == (pe >> de - ct & (1 << ct) - 1)) {
                de -= ct, ke(
                  je.p[nt],
                  Z,
                  pe,
                  de,
                  $,
                  I,
                  k,
                  ae,
                  le,
                  Xe
                ), pe = Se.c, de = Se.lc;
                break;
              }
            }
            if (nt == je.lit)
              throw "hufDecode issues";
          }
        }
      var St = 8 - V & 7;
      for (pe >>= St, de -= St; de > 0; ) {
        var je = F[pe << 14 - de & 16383];
        if (je.len)
          de -= je.len, ke(je.lit, Z, pe, de, $, I, k, ae, le, Xe), pe = Se.c, de = Se.lc;
        else
          throw "hufDecode issues";
      }
      return !0;
    }
    function xt(L, F, $, I, k, V) {
      var Z = { value: 0 }, X = $.value, ae = Be(F, $), le = Be(F, $);
      $.value += 4;
      var pe = Be(F, $);
      if ($.value += 4, ae < 0 || ae >= 65537 || le < 0 || le >= 65537)
        throw "Something wrong with HUF_ENCSIZE";
      var de = new Array(65537), Xe = new Array(16384);
      N(Xe);
      var Pe = I - ($.value - X);
      if (J(L, F, $, Pe, ae, le, de), pe > 8 * (I - ($.value - X)))
        throw "Something wrong with hufUncompress";
      te(de, ae, le, Xe), dt(de, Xe, L, F, $, pe, le, V, k, Z);
    }
    function H(L, F, $) {
      for (var I = 0; I < $; ++I)
        F[I] = L[F[I]];
    }
    function Ie(L) {
      for (var F = 1; F < L.length; F++) {
        var $ = L[F - 1] + L[F] - 128;
        L[F] = $;
      }
    }
    function Le(L, F) {
      for (var $ = 0, I = Math.floor((L.length + 1) / 2), k = 0, V = L.length - 1; !(k > V || (F[k++] = L[$++], k > V)); )
        F[k++] = L[I++];
    }
    function Ge(L) {
      for (var F = L.byteLength, $ = new Array(), I = 0, k = new DataView(L); F > 0; ) {
        var V = k.getInt8(I++);
        if (V < 0) {
          var Z = -V;
          F -= Z + 1;
          for (var X = 0; X < Z; X++)
            $.push(k.getUint8(I++));
        } else {
          var Z = V;
          F -= 2;
          for (var ae = k.getUint8(I++), X = 0; X < Z + 1; X++)
            $.push(ae);
        }
      }
      return $;
    }
    function Me(L, F, $, I, k, V) {
      var gt = new DataView(V.buffer), Z = $[L.idx[0]].width, X = $[L.idx[0]].height, ae = 3, le = Math.floor(Z / 8), pe = Math.ceil(Z / 8), de = Math.ceil(X / 8), Xe = Z - (pe - 1) * 8, Pe = X - (de - 1) * 8, Re = { value: 0 }, je = new Array(ae), nt = new Array(ae), ct = new Array(ae), St = new Array(ae), Ye = new Array(ae);
      for (let Ot = 0; Ot < ae; ++Ot)
        Ye[Ot] = F[L.idx[Ot]], je[Ot] = Ot < 1 ? 0 : je[Ot - 1] + pe * de, nt[Ot] = new Float32Array(64), ct[Ot] = new Uint16Array(64), St[Ot] = new Uint16Array(pe * 64);
      for (let Ot = 0; Ot < de; ++Ot) {
        var Ne = 8;
        Ot == de - 1 && (Ne = Pe);
        var mt = 8;
        for (let Rt = 0; Rt < pe; ++Rt) {
          Rt == pe - 1 && (mt = Xe);
          for (let zt = 0; zt < ae; ++zt)
            ct[zt].fill(0), ct[zt][0] = k[je[zt]++], at(Re, I, ct[zt]), We(ct[zt], nt[zt]), et(nt[zt]);
          q(nt);
          for (let zt = 0; zt < ae; ++zt)
            O(nt[zt], St[zt], Rt * 64);
        }
        let gn = 0;
        for (let Rt = 0; Rt < ae; ++Rt) {
          const zt = $[L.idx[Rt]].type;
          for (let on = 8 * Ot; on < 8 * Ot + Ne; ++on) {
            gn = Ye[Rt][on];
            for (let fr = 0; fr < le; ++fr) {
              const yi = fr * 64 + (on & 7) * 8;
              gt.setUint16(gn + 0 * 2 * zt, St[Rt][yi + 0], !0), gt.setUint16(gn + 1 * 2 * zt, St[Rt][yi + 1], !0), gt.setUint16(gn + 2 * 2 * zt, St[Rt][yi + 2], !0), gt.setUint16(gn + 3 * 2 * zt, St[Rt][yi + 3], !0), gt.setUint16(gn + 4 * 2 * zt, St[Rt][yi + 4], !0), gt.setUint16(gn + 5 * 2 * zt, St[Rt][yi + 5], !0), gt.setUint16(gn + 6 * 2 * zt, St[Rt][yi + 6], !0), gt.setUint16(gn + 7 * 2 * zt, St[Rt][yi + 7], !0), gn += 8 * 2 * zt;
            }
          }
          if (le != pe)
            for (let on = 8 * Ot; on < 8 * Ot + Ne; ++on) {
              const fr = Ye[Rt][on] + 8 * le * 2 * zt, yi = le * 64 + (on & 7) * 8;
              for (let Qr = 0; Qr < mt; ++Qr)
                gt.setUint16(fr + Qr * 2 * zt, St[Rt][yi + Qr], !0);
            }
        }
      }
      for (var lt = new Uint16Array(Z), gt = new DataView(V.buffer), Gt = 0; Gt < ae; ++Gt) {
        $[L.idx[Gt]].decoded = !0;
        var Qt = $[L.idx[Gt]].type;
        if ($[Gt].type == 2)
          for (var dn = 0; dn < X; ++dn) {
            const Ot = Ye[Gt][dn];
            for (var kt = 0; kt < Z; ++kt)
              lt[kt] = gt.getUint16(Ot + kt * 2 * Qt, !0);
            for (var kt = 0; kt < Z; ++kt)
              gt.setFloat32(Ot + kt * 2 * Qt, ie(lt[kt]), !0);
          }
      }
    }
    function at(L, F, $) {
      for (var I, k = 1; k < 64; )
        I = F[L.value], I == 65280 ? k = 64 : I >> 8 == 255 ? k += I & 255 : ($[k] = I, k++), L.value++;
    }
    function We(L, F) {
      F[0] = ie(L[0]), F[1] = ie(L[1]), F[2] = ie(L[5]), F[3] = ie(L[6]), F[4] = ie(L[14]), F[5] = ie(L[15]), F[6] = ie(L[27]), F[7] = ie(L[28]), F[8] = ie(L[2]), F[9] = ie(L[4]), F[10] = ie(L[7]), F[11] = ie(L[13]), F[12] = ie(L[16]), F[13] = ie(L[26]), F[14] = ie(L[29]), F[15] = ie(L[42]), F[16] = ie(L[3]), F[17] = ie(L[8]), F[18] = ie(L[12]), F[19] = ie(L[17]), F[20] = ie(L[25]), F[21] = ie(L[30]), F[22] = ie(L[41]), F[23] = ie(L[43]), F[24] = ie(L[9]), F[25] = ie(L[11]), F[26] = ie(L[18]), F[27] = ie(L[24]), F[28] = ie(L[31]), F[29] = ie(L[40]), F[30] = ie(L[44]), F[31] = ie(L[53]), F[32] = ie(L[10]), F[33] = ie(L[19]), F[34] = ie(L[23]), F[35] = ie(L[32]), F[36] = ie(L[39]), F[37] = ie(L[45]), F[38] = ie(L[52]), F[39] = ie(L[54]), F[40] = ie(L[20]), F[41] = ie(L[22]), F[42] = ie(L[33]), F[43] = ie(L[38]), F[44] = ie(L[46]), F[45] = ie(L[51]), F[46] = ie(L[55]), F[47] = ie(L[60]), F[48] = ie(L[21]), F[49] = ie(L[34]), F[50] = ie(L[37]), F[51] = ie(L[47]), F[52] = ie(L[50]), F[53] = ie(L[56]), F[54] = ie(L[59]), F[55] = ie(L[61]), F[56] = ie(L[35]), F[57] = ie(L[36]), F[58] = ie(L[48]), F[59] = ie(L[49]), F[60] = ie(L[57]), F[61] = ie(L[58]), F[62] = ie(L[62]), F[63] = ie(L[63]);
    }
    function et(L) {
      const F = 0.5 * Math.cos(0.7853975), $ = 0.5 * Math.cos(3.14159 / 16), I = 0.5 * Math.cos(3.14159 / 8), k = 0.5 * Math.cos(3 * 3.14159 / 16), V = 0.5 * Math.cos(5 * 3.14159 / 16), Z = 0.5 * Math.cos(3 * 3.14159 / 8), X = 0.5 * Math.cos(7 * 3.14159 / 16);
      for (var ae = new Array(4), le = new Array(4), pe = new Array(4), de = new Array(4), Xe = 0; Xe < 8; ++Xe) {
        var Pe = Xe * 8;
        ae[0] = I * L[Pe + 2], ae[1] = Z * L[Pe + 2], ae[2] = I * L[Pe + 6], ae[3] = Z * L[Pe + 6], le[0] = $ * L[Pe + 1] + k * L[Pe + 3] + V * L[Pe + 5] + X * L[Pe + 7], le[1] = k * L[Pe + 1] - X * L[Pe + 3] - $ * L[Pe + 5] - V * L[Pe + 7], le[2] = V * L[Pe + 1] - $ * L[Pe + 3] + X * L[Pe + 5] + k * L[Pe + 7], le[3] = X * L[Pe + 1] - V * L[Pe + 3] + k * L[Pe + 5] - $ * L[Pe + 7], pe[0] = F * (L[Pe + 0] + L[Pe + 4]), pe[3] = F * (L[Pe + 0] - L[Pe + 4]), pe[1] = ae[0] + ae[3], pe[2] = ae[1] - ae[2], de[0] = pe[0] + pe[1], de[1] = pe[3] + pe[2], de[2] = pe[3] - pe[2], de[3] = pe[0] - pe[1], L[Pe + 0] = de[0] + le[0], L[Pe + 1] = de[1] + le[1], L[Pe + 2] = de[2] + le[2], L[Pe + 3] = de[3] + le[3], L[Pe + 4] = de[3] - le[3], L[Pe + 5] = de[2] - le[2], L[Pe + 6] = de[1] - le[1], L[Pe + 7] = de[0] - le[0];
      }
      for (var Re = 0; Re < 8; ++Re)
        ae[0] = I * L[16 + Re], ae[1] = Z * L[16 + Re], ae[2] = I * L[48 + Re], ae[3] = Z * L[48 + Re], le[0] = $ * L[8 + Re] + k * L[24 + Re] + V * L[40 + Re] + X * L[56 + Re], le[1] = k * L[8 + Re] - X * L[24 + Re] - $ * L[40 + Re] - V * L[56 + Re], le[2] = V * L[8 + Re] - $ * L[24 + Re] + X * L[40 + Re] + k * L[56 + Re], le[3] = X * L[8 + Re] - V * L[24 + Re] + k * L[40 + Re] - $ * L[56 + Re], pe[0] = F * (L[Re] + L[32 + Re]), pe[3] = F * (L[Re] - L[32 + Re]), pe[1] = ae[0] + ae[3], pe[2] = ae[1] - ae[2], de[0] = pe[0] + pe[1], de[1] = pe[3] + pe[2], de[2] = pe[3] - pe[2], de[3] = pe[0] - pe[1], L[0 + Re] = de[0] + le[0], L[8 + Re] = de[1] + le[1], L[16 + Re] = de[2] + le[2], L[24 + Re] = de[3] + le[3], L[32 + Re] = de[3] - le[3], L[40 + Re] = de[2] - le[2], L[48 + Re] = de[1] - le[1], L[56 + Re] = de[0] - le[0];
    }
    function q(L) {
      for (var F = 0; F < 64; ++F) {
        var $ = L[0][F], I = L[1][F], k = L[2][F];
        L[0][F] = $ + 1.5747 * k, L[1][F] = $ - 0.1873 * I - 0.4682 * k, L[2][F] = $ + 1.8556 * I;
      }
    }
    function O(L, F, $) {
      for (var I = 0; I < 64; ++I)
        F[$ + I] = La.toHalfFloat(ue(L[I]));
    }
    function ue(L) {
      return L <= 1 ? Math.sign(L) * Math.pow(Math.abs(L), 2.2) : Math.sign(L) * Math.pow(C, Math.abs(L) - 1);
    }
    function Te(L) {
      return new DataView(L.array.buffer, L.offset.value, L.size);
    }
    function Ae(L) {
      var F = L.viewer.buffer.slice(L.offset.value, L.offset.value + L.size), $ = new Uint8Array(Ge(F)), I = new Uint8Array($.length);
      return Ie($), Le($, I), new DataView(I.buffer);
    }
    function Ce(L) {
      var F = L.array.slice(L.offset.value, L.offset.value + L.size), $ = Cp(F), I = new Uint8Array($.length);
      return Ie($), Le($, I), new DataView(I.buffer);
    }
    function ot(L) {
      for (var F = L.viewer, $ = { value: L.offset.value }, I = new Uint16Array(L.width * L.scanlineBlockSize * (L.channels * L.type)), k = new Uint8Array(8192), V = 0, Z = new Array(L.channels), X = 0; X < L.channels; X++)
        Z[X] = {}, Z[X].start = V, Z[X].end = Z[X].start, Z[X].nx = L.width, Z[X].ny = L.lines, Z[X].size = L.type, V += Z[X].nx * Z[X].ny * Z[X].size;
      var ae = xe(F, $), le = xe(F, $);
      if (le >= 8192)
        throw "Something is wrong with PIZ_COMPRESSION BITMAP_SIZE";
      if (ae <= le)
        for (var X = 0; X < le - ae + 1; X++)
          k[X + ae] = ye(F, $);
      var pe = new Uint16Array(65536), de = A(k, pe), Xe = Be(F, $);
      xt(L.array, F, $, Xe, I, V);
      for (var X = 0; X < L.channels; ++X)
        for (var Pe = Z[X], Re = 0; Re < Z[X].size; ++Re)
          Mt(I, Pe.start + Re, Pe.nx, Pe.size, Pe.ny, Pe.nx * Pe.size, de);
      H(pe, I, V);
      for (var je = 0, nt = new Uint8Array(I.buffer.byteLength), ct = 0; ct < L.lines; ct++)
        for (var St = 0; St < L.channels; St++) {
          var Pe = Z[St], Ye = Pe.nx * Pe.size, Ne = new Uint8Array(I.buffer, Pe.end * 2, Ye * 2);
          nt.set(Ne, je), je += Ye * 2, Pe.end += Ye;
        }
      return new DataView(nt.buffer);
    }
    function Ve(L) {
      var F = L.array.slice(L.offset.value, L.offset.value + L.size), $ = Cp(F);
      const I = L.lines * L.channels * L.width, k = L.type == 1 ? new Uint16Array(I) : new Uint32Array(I);
      let V = 0, Z = 0;
      const X = new Array(4);
      for (let ae = 0; ae < L.lines; ae++)
        for (let le = 0; le < L.channels; le++) {
          let pe = 0;
          switch (L.type) {
            case 1:
              X[0] = V, X[1] = X[0] + L.width, V = X[1] + L.width;
              for (let de = 0; de < L.width; ++de) {
                const Xe = $[X[0]++] << 8 | $[X[1]++];
                pe += Xe, k[Z] = pe, Z++;
              }
              break;
            case 2:
              X[0] = V, X[1] = X[0] + L.width, X[2] = X[1] + L.width, V = X[2] + L.width;
              for (let de = 0; de < L.width; ++de) {
                const Xe = $[X[0]++] << 24 | $[X[1]++] << 16 | $[X[2]++] << 8;
                pe += Xe, k[Z] = pe, Z++;
              }
              break;
          }
        }
      return new DataView(k.buffer);
    }
    function Je(L) {
      var F = L.viewer, $ = { value: L.offset.value }, I = new Uint8Array(L.width * L.lines * (L.channels * L.type * 2)), k = {
        version: ze(F, $),
        unknownUncompressedSize: ze(F, $),
        unknownCompressedSize: ze(F, $),
        acCompressedSize: ze(F, $),
        dcCompressedSize: ze(F, $),
        rleCompressedSize: ze(F, $),
        rleUncompressedSize: ze(F, $),
        rleRawSize: ze(F, $),
        totalAcUncompressedCount: ze(F, $),
        totalDcUncompressedCount: ze(F, $),
        acCompression: ze(F, $)
      };
      if (k.version < 2)
        throw "EXRLoader.parse: " + Ni.compression + " version " + k.version + " is unsupported";
      for (var V = new Array(), Z = xe(F, $) - 2; Z > 0; ) {
        var X = _t(F.buffer, $), ae = ye(F, $), le = ae >> 2 & 3, pe = (ae >> 4) - 1, de = new Int8Array([pe])[0], Xe = ye(F, $);
        V.push({
          name: X,
          index: de,
          type: Xe,
          compression: le
        }), Z -= X.length + 3;
      }
      for (var Pe = Ni.channels, Re = new Array(L.channels), je = 0; je < L.channels; ++je) {
        var nt = Re[je] = {}, ct = Pe[je];
        nt.name = ct.name, nt.compression = 0, nt.decoded = !1, nt.type = ct.pixelType, nt.pLinear = ct.pLinear, nt.width = L.width, nt.height = L.lines;
      }
      for (var St = {
        idx: new Array(3)
      }, Ye = 0; Ye < L.channels; ++Ye)
        for (var nt = Re[Ye], je = 0; je < V.length; ++je) {
          var Ne = V[je];
          nt.name == Ne.name && (nt.compression = Ne.compression, Ne.index >= 0 && (St.idx[Ne.index] = Ye), nt.offset = Ye);
        }
      if (k.acCompressedSize > 0)
        switch (k.acCompression) {
          case 0:
            var gt = new Uint16Array(k.totalAcUncompressedCount);
            xt(
              L.array,
              F,
              $,
              k.acCompressedSize,
              gt,
              k.totalAcUncompressedCount
            );
            break;
          case 1:
            var mt = L.array.slice($.value, $.value + k.totalAcUncompressedCount), lt = Cp(mt), gt = new Uint16Array(lt.buffer);
            $.value += k.totalAcUncompressedCount;
            break;
        }
      if (k.dcCompressedSize > 0) {
        var Gt = {
          array: L.array,
          offset: $,
          size: k.dcCompressedSize
        }, Qt = new Uint16Array(Ce(Gt).buffer);
        $.value += k.dcCompressedSize;
      }
      if (k.rleRawSize > 0) {
        var mt = L.array.slice($.value, $.value + k.rleCompressedSize), lt = Cp(mt), dn = Ge(lt.buffer);
        $.value += k.rleCompressedSize;
      }
      for (var kt = 0, Ot = new Array(Re.length), je = 0; je < Ot.length; ++je)
        Ot[je] = new Array();
      for (var gn = 0; gn < L.lines; ++gn)
        for (var Rt = 0; Rt < Re.length; ++Rt)
          Ot[Rt].push(kt), kt += Re[Rt].width * L.type * 2;
      Me(St, Ot, Re, gt, Qt, I);
      for (var je = 0; je < Re.length; ++je) {
        var nt = Re[je];
        if (!nt.decoded)
          switch (nt.compression) {
            case 2:
              for (var zt = 0, on = 0, gn = 0; gn < L.lines; ++gn) {
                for (var fr = Ot[je][zt], yi = 0; yi < nt.width; ++yi) {
                  for (var Qr = 0; Qr < 2 * nt.type; ++Qr)
                    I[fr++] = dn[on + Qr * nt.width * nt.height];
                  on++;
                }
                zt++;
              }
              break;
            case 1:
            default:
              throw "EXRLoader.parse: unsupported channel compression";
          }
      }
      return new DataView(I.buffer);
    }
    function _t(L, F) {
      for (var $ = new Uint8Array(L), I = 0; $[F.value + I] != 0; )
        I += 1;
      var k = new TextDecoder().decode($.slice(F.value, F.value + I));
      return F.value = F.value + I + 1, k;
    }
    function Ue(L, F, $) {
      var I = new TextDecoder().decode(new Uint8Array(L).slice(F.value, F.value + $));
      return F.value = F.value + $, I;
    }
    function Ze(L, F) {
      var $ = ht(L, F), I = Be(L, F);
      return [$, I];
    }
    function Nt(L, F) {
      var $ = Be(L, F), I = Be(L, F);
      return [$, I];
    }
    function ht(L, F) {
      var $ = L.getInt32(F.value, !0);
      return F.value = F.value + 4, $;
    }
    function Be(L, F) {
      var $ = L.getUint32(F.value, !0);
      return F.value = F.value + 4, $;
    }
    function ee(L, F) {
      var $ = L[F.value];
      return F.value = F.value + 1, $;
    }
    function ye(L, F) {
      var $ = L.getUint8(F.value);
      return F.value = F.value + 1, $;
    }
    const ze = function(L, F) {
      let $;
      return "getBigInt64" in DataView.prototype ? $ = Number(L.getBigInt64(F.value, !0)) : $ = L.getUint32(F.value + 4, !0) + Number(L.getUint32(F.value, !0) << 32), F.value += 8, $;
    };
    function K(L, F) {
      var $ = L.getFloat32(F.value, !0);
      return F.value += 4, $;
    }
    function be(L, F) {
      return La.toHalfFloat(K(L, F));
    }
    function ie(L) {
      var F = (L & 31744) >> 10, $ = L & 1023;
      return (L >> 15 ? -1 : 1) * (F ? F === 31 ? $ ? NaN : 1 / 0 : Math.pow(2, F - 15) * (1 + $ / 1024) : 6103515625e-14 * ($ / 1024));
    }
    function xe(L, F) {
      var $ = L.getUint16(F.value, !0);
      return F.value += 2, $;
    }
    function He(L, F) {
      return ie(xe(L, F));
    }
    function pt(L, F, $, I) {
      for (var k = $.value, V = []; $.value < k + I - 1; ) {
        var Z = _t(F, $), X = ht(L, $), ae = ye(L, $);
        $.value += 3;
        var le = ht(L, $), pe = ht(L, $);
        V.push({
          name: Z,
          pixelType: X,
          pLinear: ae,
          xSampling: le,
          ySampling: pe
        });
      }
      return $.value += 1, V;
    }
    function wt(L, F) {
      var $ = K(L, F), I = K(L, F), k = K(L, F), V = K(L, F), Z = K(L, F), X = K(L, F), ae = K(L, F), le = K(L, F);
      return {
        redX: $,
        redY: I,
        greenX: k,
        greenY: V,
        blueX: Z,
        blueY: X,
        whiteX: ae,
        whiteY: le
      };
    }
    function Ht(L, F) {
      var $ = [
        "NO_COMPRESSION",
        "RLE_COMPRESSION",
        "ZIPS_COMPRESSION",
        "ZIP_COMPRESSION",
        "PIZ_COMPRESSION",
        "PXR24_COMPRESSION",
        "B44_COMPRESSION",
        "B44A_COMPRESSION",
        "DWAA_COMPRESSION",
        "DWAB_COMPRESSION"
      ], I = ye(L, F);
      return $[I];
    }
    function rn(L, F) {
      var $ = Be(L, F), I = Be(L, F), k = Be(L, F), V = Be(L, F);
      return { xMin: $, yMin: I, xMax: k, yMax: V };
    }
    function It(L, F) {
      var $ = ["INCREASING_Y"], I = ye(L, F);
      return $[I];
    }
    function Nn(L, F) {
      var $ = K(L, F), I = K(L, F);
      return [$, I];
    }
    function Un(L, F) {
      var $ = K(L, F), I = K(L, F), k = K(L, F);
      return [$, I, k];
    }
    function rl(L, F, $, I, k) {
      if (I === "string" || I === "stringvector" || I === "iccProfile")
        return Ue(F, $, k);
      if (I === "chlist")
        return pt(L, F, $, k);
      if (I === "chromaticities")
        return wt(L, $);
      if (I === "compression")
        return Ht(L, $);
      if (I === "box2i")
        return rn(L, $);
      if (I === "lineOrder")
        return It(L, $);
      if (I === "float")
        return K(L, $);
      if (I === "v2f")
        return Nn(L, $);
      if (I === "v3f")
        return Un(L, $);
      if (I === "int")
        return ht(L, $);
      if (I === "rational")
        return Ze(L, $);
      if (I === "timecode")
        return Nt(L, $);
      if (I === "preview")
        return $.value += k, "skipped";
      $.value += k;
    }
    function Pr(L, F, $) {
      const I = {};
      if (L.getUint32(0, !0) != 20000630)
        throw "THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.";
      I.version = L.getUint8(4);
      const k = L.getUint8(5);
      I.spec = {
        singleTile: !!(k & 2),
        longName: !!(k & 4),
        deepFormat: !!(k & 8),
        multiPart: !!(k & 16)
      }, $.value = 8;
      for (var V = !0; V; ) {
        var Z = _t(F, $);
        if (Z == 0)
          V = !1;
        else {
          var X = _t(F, $), ae = Be(L, $), le = rl(L, F, $, X, ae);
          le === void 0 ? console.warn(`EXRLoader.parse: skipped unknown header attribute type '${X}'.`) : I[Z] = le;
        }
      }
      if (k & -5)
        throw console.error("EXRHeader:", I), "THREE.EXRLoader: provided file is currently unsupported.";
      return I;
    }
    function jo(L, F, $, I, k) {
      const V = {
        size: 0,
        viewer: F,
        array: $,
        offset: I,
        width: L.dataWindow.xMax - L.dataWindow.xMin + 1,
        height: L.dataWindow.yMax - L.dataWindow.yMin + 1,
        channels: L.channels.length,
        bytesPerLine: null,
        lines: null,
        inputSize: null,
        type: L.channels[0].pixelType,
        uncompress: null,
        getter: null,
        format: null,
        [Dc ? "colorSpace" : "encoding"]: null
      };
      switch (L.compression) {
        case "NO_COMPRESSION":
          V.lines = 1, V.uncompress = Te;
          break;
        case "RLE_COMPRESSION":
          V.lines = 1, V.uncompress = Ae;
          break;
        case "ZIPS_COMPRESSION":
          V.lines = 1, V.uncompress = Ce;
          break;
        case "ZIP_COMPRESSION":
          V.lines = 16, V.uncompress = Ce;
          break;
        case "PIZ_COMPRESSION":
          V.lines = 32, V.uncompress = ot;
          break;
        case "PXR24_COMPRESSION":
          V.lines = 16, V.uncompress = Ve;
          break;
        case "DWAA_COMPRESSION":
          V.lines = 32, V.uncompress = Je;
          break;
        case "DWAB_COMPRESSION":
          V.lines = 256, V.uncompress = Je;
          break;
        default:
          throw "EXRLoader.parse: " + L.compression + " is unsupported";
      }
      if (V.scanlineBlockSize = V.lines, V.type == 1)
        switch (k) {
          case xn:
            V.getter = He, V.inputSize = 2;
            break;
          case $n:
            V.getter = xe, V.inputSize = 2;
            break;
        }
      else if (V.type == 2)
        switch (k) {
          case xn:
            V.getter = K, V.inputSize = 4;
            break;
          case $n:
            V.getter = be, V.inputSize = 4;
        }
      else
        throw "EXRLoader.parse: unsupported pixelType " + V.type + " for " + L.compression + ".";
      V.blockCount = (L.dataWindow.yMax + 1) / V.scanlineBlockSize;
      for (var Z = 0; Z < V.blockCount; Z++)
        ze(F, I);
      V.outputChannels = V.channels == 3 ? 4 : V.channels;
      const X = V.width * V.height * V.outputChannels;
      switch (k) {
        case xn:
          V.byteArray = new Float32Array(X), V.channels < V.outputChannels && V.byteArray.fill(1, 0, X);
          break;
        case $n:
          V.byteArray = new Uint16Array(X), V.channels < V.outputChannels && V.byteArray.fill(15360, 0, X);
          break;
        default:
          console.error("THREE.EXRLoader: unsupported type: ", k);
          break;
      }
      return V.bytesPerLine = V.width * V.inputSize * V.channels, V.outputChannels == 4 ? V.format = Ln : V.format = sh, Dc ? V.colorSpace = "srgb-linear" : V.encoding = 3e3, V;
    }
    const Jr = new DataView(e), Ks = new Uint8Array(e), cr = { value: 0 }, Ni = Pr(Jr, e, cr), Ct = jo(Ni, Jr, Ks, cr, this.type), Zo = { value: 0 }, sl = { R: 0, G: 1, B: 2, A: 3, Y: 0 };
    for (let L = 0; L < Ct.height / Ct.scanlineBlockSize; L++) {
      const F = Be(Jr, cr);
      Ct.size = Be(Jr, cr), Ct.lines = F + Ct.scanlineBlockSize > Ct.height ? Ct.height - F : Ct.scanlineBlockSize;
      const I = Ct.size < Ct.lines * Ct.bytesPerLine ? Ct.uncompress(Ct) : Te(Ct);
      cr.value += Ct.size;
      for (let k = 0; k < Ct.scanlineBlockSize; k++) {
        const V = k + L * Ct.scanlineBlockSize;
        if (V >= Ct.height)
          break;
        for (let Z = 0; Z < Ct.channels; Z++) {
          const X = sl[Ni.channels[Z].name];
          for (let ae = 0; ae < Ct.width; ae++) {
            Zo.value = (k * (Ct.channels * Ct.width) + Z * Ct.width + ae) * Ct.inputSize;
            const le = (Ct.height - 1 - V) * (Ct.width * Ct.outputChannels) + ae * Ct.outputChannels + X;
            Ct.byteArray[le] = Ct.getter(I, Zo);
          }
        }
      }
    }
    return {
      header: Ni,
      width: Ct.width,
      height: Ct.height,
      data: Ct.byteArray,
      format: Ct.format,
      [Dc ? "colorSpace" : "encoding"]: Ct[Dc ? "colorSpace" : "encoding"],
      type: this.type
    };
  }
  setDataType(e) {
    return this.type = e, this;
  }
  load(e, t, i, r) {
    function s(o, a) {
      Dc ? o.colorSpace = a.colorSpace : o.encoding = a.encoding, o.minFilter = $t, o.magFilter = $t, o.generateMipmaps = !1, o.flipY = !1, t && t(o, a);
    }
    return super.load(e, s, i, r);
  }
}
const Ay = (n) => n === Object(n) && !Array.isArray(n) && typeof n != "function";
function Kf(n, e) {
  const t = zi((s) => s.gl), i = ku(Jg, Ay(n) ? Object.values(n) : n);
  return ge.useLayoutEffect(() => {
    e?.(i);
  }, [e]), ge.useEffect(() => {
    if ("initTexture" in t) {
      let s = [];
      Array.isArray(i) ? s = i : i instanceof Kt ? s = [i] : Ay(i) && (s = Object.values(i)), s.forEach((o) => {
        o instanceof Kt && t.initTexture(o);
      });
    }
  }, [t, i]), ge.useMemo(() => {
    if (Ay(n)) {
      const s = {};
      let o = 0;
      for (const a in n)
        s[a] = i[o++];
      return s;
    } else
      return i;
  }, [n, i]);
}
Kf.preload = (n) => ku.preload(Jg, n);
Kf.clear = (n) => ku.clear(Jg, n);
const I5 = /* @__PURE__ */ ge.forwardRef(({
  makeDefault: n,
  camera: e,
  regress: t,
  domElement: i,
  enableDamping: r = !0,
  keyEvents: s = !1,
  onChange: o,
  onStart: a,
  onEnd: c,
  ...f
}, h) => {
  const d = zi((P) => P.invalidate), p = zi((P) => P.camera), v = zi((P) => P.gl), y = zi((P) => P.events), w = zi((P) => P.setEvents), x = zi((P) => P.set), g = zi((P) => P.get), S = zi((P) => P.performance), M = e || p, T = i || y.connected || v.domElement, U = ge.useMemo(() => new R5(M), [M]);
  return _h(() => {
    U.enabled && U.update();
  }, -1), ge.useEffect(() => (s && U.connect(s === !0 ? T : s), U.connect(T), () => void U.dispose()), [s, T, t, U, d]), ge.useEffect(() => {
    const P = (C) => {
      d(), t && S.regress(), o && o(C);
    }, D = (C) => {
      a && a(C);
    }, R = (C) => {
      c && c(C);
    };
    return U.addEventListener("change", P), U.addEventListener("start", D), U.addEventListener("end", R), () => {
      U.removeEventListener("start", D), U.removeEventListener("end", R), U.removeEventListener("change", P);
    };
  }, [o, a, c, U, d, w]), ge.useEffect(() => {
    if (n) {
      const P = g().controls;
      return x({
        controls: U
      }), () => x({
        controls: P
      });
    }
  }, [n, U]), /* @__PURE__ */ ge.createElement("primitive", Mm({
    ref: h,
    object: U,
    enableDamping: r
  }, f));
}), L5 = 3e3, D5 = 3001, N5 = /* @__PURE__ */ ge.forwardRef(({
  children: n,
  enabled: e = !0,
  speed: t = 1,
  rotationIntensity: i = 1,
  floatIntensity: r = 1,
  floatingRange: s = [-0.1, 0.1],
  ...o
}, a) => {
  const c = ge.useRef(null);
  ge.useImperativeHandle(a, () => c.current, []);
  const f = ge.useRef(Math.random() * 1e4);
  return _h((h) => {
    var d, p;
    if (!e || t === 0)
      return;
    const v = f.current + h.clock.getElapsedTime();
    c.current.rotation.x = Math.cos(v / 4 * t) / 8 * i, c.current.rotation.y = Math.sin(v / 4 * t) / 8 * i, c.current.rotation.z = Math.sin(v / 4 * t) / 20 * i;
    let y = Math.sin(v / 4 * t) / 10;
    y = a1.mapLinear(y, -0.1, 0.1, (d = s?.[0]) !== null && d !== void 0 ? d : -0.1, (p = s?.[1]) !== null && p !== void 0 ? p : 0.1), c.current.position.y = y * r, c.current.updateMatrix();
  }), /* @__PURE__ */ ge.createElement("group", o, /* @__PURE__ */ ge.createElement("group", {
    ref: c,
    matrixAutoUpdate: !1
  }, n));
}), fP = (n, e, t) => {
  let i;
  switch (n) {
    case Yi:
      i = new Uint8ClampedArray(e * t * 4);
      break;
    case $n:
      i = new Uint16Array(e * t * 4);
      break;
    case ys:
      i = new Uint32Array(e * t * 4);
      break;
    case Sg:
      i = new Int8Array(e * t * 4);
      break;
    case Mg:
      i = new Int16Array(e * t * 4);
      break;
    case rh:
      i = new Int32Array(e * t * 4);
      break;
    case xn:
      i = new Float32Array(e * t * 4);
      break;
    default:
      throw new Error("Unsupported data type");
  }
  return i;
};
let bp;
const U5 = (n, e, t, i) => {
  if (bp !== void 0)
    return bp;
  const r = new ar(1, 1, i);
  e.setRenderTarget(r);
  const s = new Sn(new Xo(), new Ti({ color: 16777215 }));
  e.render(s, t), e.setRenderTarget(null);
  const o = fP(n, r.width, r.height);
  return e.readRenderTargetPixels(r, 0, 0, r.width, r.height, o), r.dispose(), s.geometry.dispose(), s.material.dispose(), bp = o[0] !== 0, bp;
};
class G1 {
  /**
   * Constructs a new QuadRenderer
   *
   * @param options Parameters for this QuadRenderer
   */
  constructor(e) {
    var t, i, r, s, o, a, c, f, h, d, p, v, y, w, x, g;
    this._rendererIsDisposable = !1, this._supportsReadPixels = !0, this.render = () => {
      this._renderer.setRenderTarget(this._renderTarget);
      try {
        this._renderer.render(this._scene, this._camera);
      } catch (M) {
        throw this._renderer.setRenderTarget(null), M;
      }
      this._renderer.setRenderTarget(null);
    }, this._width = e.width, this._height = e.height, this._type = e.type, this._colorSpace = e.colorSpace;
    const S = {
      // fixed options
      format: Ln,
      depthBuffer: !1,
      stencilBuffer: !1,
      // user options
      type: this._type,
      // set in class property
      colorSpace: this._colorSpace,
      // set in class property
      anisotropy: ((t = e.renderTargetOptions) === null || t === void 0 ? void 0 : t.anisotropy) !== void 0 ? (i = e.renderTargetOptions) === null || i === void 0 ? void 0 : i.anisotropy : 1,
      generateMipmaps: ((r = e.renderTargetOptions) === null || r === void 0 ? void 0 : r.generateMipmaps) !== void 0 ? (s = e.renderTargetOptions) === null || s === void 0 ? void 0 : s.generateMipmaps : !1,
      magFilter: ((o = e.renderTargetOptions) === null || o === void 0 ? void 0 : o.magFilter) !== void 0 ? (a = e.renderTargetOptions) === null || a === void 0 ? void 0 : a.magFilter : $t,
      minFilter: ((c = e.renderTargetOptions) === null || c === void 0 ? void 0 : c.minFilter) !== void 0 ? (f = e.renderTargetOptions) === null || f === void 0 ? void 0 : f.minFilter : $t,
      samples: ((h = e.renderTargetOptions) === null || h === void 0 ? void 0 : h.samples) !== void 0 ? (d = e.renderTargetOptions) === null || d === void 0 ? void 0 : d.samples : void 0,
      wrapS: ((p = e.renderTargetOptions) === null || p === void 0 ? void 0 : p.wrapS) !== void 0 ? (v = e.renderTargetOptions) === null || v === void 0 ? void 0 : v.wrapS : Bn,
      wrapT: ((y = e.renderTargetOptions) === null || y === void 0 ? void 0 : y.wrapT) !== void 0 ? (w = e.renderTargetOptions) === null || w === void 0 ? void 0 : w.wrapT : Bn
    };
    if (this._material = e.material, e.renderer ? this._renderer = e.renderer : (this._renderer = G1.instantiateRenderer(), this._rendererIsDisposable = !0), this._scene = new bu(), this._camera = new fs(), this._camera.position.set(0, 0, 10), this._camera.left = -0.5, this._camera.right = 0.5, this._camera.top = 0.5, this._camera.bottom = -0.5, this._camera.updateProjectionMatrix(), !U5(this._type, this._renderer, this._camera, S)) {
      let M;
      switch (this._type) {
        case $n:
          M = this._renderer.extensions.has("EXT_color_buffer_float") ? xn : void 0;
          break;
      }
      M !== void 0 ? (console.warn(`This browser does not support reading pixels from ${this._type} RenderTargets, switching to ${xn}`), this._type = M) : (this._supportsReadPixels = !1, console.warn("This browser dos not support toArray or toDataTexture, calls to those methods will result in an error thrown"));
    }
    this._quad = new Sn(new Xo(), this._material), this._quad.geometry.computeBoundingBox(), this._scene.add(this._quad), this._renderTarget = new ar(this.width, this.height, S), this._renderTarget.texture.mapping = ((x = e.renderTargetOptions) === null || x === void 0 ? void 0 : x.mapping) !== void 0 ? (g = e.renderTargetOptions) === null || g === void 0 ? void 0 : g.mapping : Fo;
  }
  /**
   * Instantiates a temporary renderer
   *
   * @returns
   */
  static instantiateRenderer() {
    const e = new g1();
    return e.setSize(128, 128), e;
  }
  /**
   * Obtains a Buffer containing the rendered texture.
   *
   * @throws Error if the browser cannot read pixels from this RenderTarget type.
   * @returns a TypedArray containing RGBA values from this renderer
   */
  toArray() {
    if (!this._supportsReadPixels)
      throw new Error("Can't read pixels in this browser");
    const e = fP(this._type, this._width, this._height);
    return this._renderer.readRenderTargetPixels(this._renderTarget, 0, 0, this._width, this._height, e), e;
  }
  /**
   * Performs a readPixel operation in the renderTarget
   * and returns a DataTexture containing the read data
   *
   * @params options
   * @returns
   */
  toDataTexture(e) {
    const t = new qr(
      // fixed values
      this.toArray(),
      this.width,
      this.height,
      Ln,
      this._type,
      // user values
      e?.mapping || Fo,
      e?.wrapS || Bn,
      e?.wrapT || Bn,
      e?.magFilter || $t,
      e?.minFilter || $t,
      e?.anisotropy || 1,
      // fixed value
      br
    );
    return t.generateMipmaps = e?.generateMipmaps !== void 0 ? e?.generateMipmaps : !1, t;
  }
  /**
   * If using a disposable renderer, it will dispose it.
   */
  disposeOnDemandRenderer() {
    this._renderer.setRenderTarget(null), this._rendererIsDisposable && (this._renderer.dispose(), this._renderer.forceContextLoss());
  }
  /**
   * Will dispose of **all** assets used by this renderer.
   *
   *
   * @param disposeRenderTarget will dispose of the renderTarget which will not be usable later
   * set this to true if you passed the `renderTarget.texture` to a `PMREMGenerator`
   * or are otherwise done with it.
   *
   * @example
   * ```js
   * const loader = new HDRJPGLoader(renderer)
   * const result = await loader.loadAsync('gainmap.jpeg')
   * const mesh = new Mesh(geometry, new MeshBasicMaterial({ map: result.renderTarget.texture }) )
   * // DO NOT dispose the renderTarget here,
   * // it is used directly in the material
   * result.dispose()
   * ```
   *
   * @example
   * ```js
   * const loader = new HDRJPGLoader(renderer)
   * const pmremGenerator = new PMREMGenerator( renderer );
   * const result = await loader.loadAsync('gainmap.jpeg')
   * const envMap = pmremGenerator.fromEquirectangular(result.renderTarget.texture)
   * const mesh = new Mesh(geometry, new MeshStandardMaterial({ envMap }) )
   * // renderTarget can be disposed here
   * // because it was used to generate a PMREM texture
   * result.dispose(true)
   * ```
   */
  dispose(e) {
    this.disposeOnDemandRenderer(), e && this.renderTarget.dispose(), this.material instanceof qi && Object.values(this.material.uniforms).forEach((t) => {
      t.value instanceof Kt && t.value.dispose();
    }), Object.values(this.material).forEach((t) => {
      t instanceof Kt && t.dispose();
    }), this.material.dispose(), this._quad.geometry.dispose();
  }
  /**
   * Width of the texture
   */
  get width() {
    return this._width;
  }
  set width(e) {
    this._width = e, this._renderTarget.setSize(this._width, this._height);
  }
  /**
   * Height of the texture
   */
  get height() {
    return this._height;
  }
  set height(e) {
    this._height = e, this._renderTarget.setSize(this._width, this._height);
  }
  /**
   * The renderer used
   */
  get renderer() {
    return this._renderer;
  }
  /**
   * The `WebGLRenderTarget` used.
   */
  get renderTarget() {
    return this._renderTarget;
  }
  set renderTarget(e) {
    this._renderTarget = e, this._width = e.width, this._height = e.height;
  }
  /**
   * The `Material` used.
   */
  get material() {
    return this._material;
  }
  /**
   *
   */
  get type() {
    return this._type;
  }
  get colorSpace() {
    return this._colorSpace;
  }
}
const O5 = (
  /* glsl */
  `
varying vec2 vUv;

void main() {
  vUv = uv;
  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}
`
), F5 = (
  /* glsl */
  `
// min half float value
#define HALF_FLOAT_MIN vec3( -65504, -65504, -65504 )
// max half float value
#define HALF_FLOAT_MAX vec3( 65504, 65504, 65504 )

uniform sampler2D sdr;
uniform sampler2D gainMap;
uniform vec3 gamma;
uniform vec3 offsetHdr;
uniform vec3 offsetSdr;
uniform vec3 gainMapMin;
uniform vec3 gainMapMax;
uniform float weightFactor;

varying vec2 vUv;

void main() {
  vec3 rgb = texture2D( sdr, vUv ).rgb;
  vec3 recovery = texture2D( gainMap, vUv ).rgb;
  vec3 logRecovery = pow( recovery, gamma );
  vec3 logBoost = gainMapMin * ( 1.0 - logRecovery ) + gainMapMax * logRecovery;
  vec3 hdrColor = (rgb + offsetSdr) * exp2( logBoost * weightFactor ) - offsetHdr;
  vec3 clampedHdrColor = max( HALF_FLOAT_MIN, min( HALF_FLOAT_MAX, hdrColor ));
  gl_FragColor = vec4( clampedHdrColor , 1.0 );
}
`
);
class k5 extends qi {
  /**
   *
   * @param params
   */
  constructor({ gamma: e, offsetHdr: t, offsetSdr: i, gainMapMin: r, gainMapMax: s, maxDisplayBoost: o, hdrCapacityMin: a, hdrCapacityMax: c, sdr: f, gainMap: h }) {
    super({
      name: "GainMapDecoderMaterial",
      vertexShader: O5,
      fragmentShader: F5,
      uniforms: {
        sdr: { value: f },
        gainMap: { value: h },
        gamma: { value: new B(1 / e[0], 1 / e[1], 1 / e[2]) },
        offsetHdr: { value: new B().fromArray(t) },
        offsetSdr: { value: new B().fromArray(i) },
        gainMapMin: { value: new B().fromArray(r) },
        gainMapMax: { value: new B().fromArray(s) },
        weightFactor: {
          value: (Math.log2(o) - a) / (c - a)
        }
      },
      blending: ps,
      depthTest: !1,
      depthWrite: !1
    }), this._maxDisplayBoost = o, this._hdrCapacityMin = a, this._hdrCapacityMax = c, this.needsUpdate = !0, this.uniformsNeedUpdate = !0;
  }
  get sdr() {
    return this.uniforms.sdr.value;
  }
  set sdr(e) {
    this.uniforms.sdr.value = e;
  }
  get gainMap() {
    return this.uniforms.gainMap.value;
  }
  set gainMap(e) {
    this.uniforms.gainMap.value = e;
  }
  /**
   * @see {@link GainMapMetadata.offsetHdr}
   */
  get offsetHdr() {
    return this.uniforms.offsetHdr.value.toArray();
  }
  set offsetHdr(e) {
    this.uniforms.offsetHdr.value.fromArray(e);
  }
  /**
   * @see {@link GainMapMetadata.offsetSdr}
   */
  get offsetSdr() {
    return this.uniforms.offsetSdr.value.toArray();
  }
  set offsetSdr(e) {
    this.uniforms.offsetSdr.value.fromArray(e);
  }
  /**
   * @see {@link GainMapMetadata.gainMapMin}
   */
  get gainMapMin() {
    return this.uniforms.gainMapMin.value.toArray();
  }
  set gainMapMin(e) {
    this.uniforms.gainMapMin.value.fromArray(e);
  }
  /**
   * @see {@link GainMapMetadata.gainMapMax}
   */
  get gainMapMax() {
    return this.uniforms.gainMapMax.value.toArray();
  }
  set gainMapMax(e) {
    this.uniforms.gainMapMax.value.fromArray(e);
  }
  /**
   * @see {@link GainMapMetadata.gamma}
   */
  get gamma() {
    const e = this.uniforms.gamma.value;
    return [1 / e.x, 1 / e.y, 1 / e.z];
  }
  set gamma(e) {
    const t = this.uniforms.gamma.value;
    t.x = 1 / e[0], t.y = 1 / e[1], t.z = 1 / e[2];
  }
  /**
   * @see {@link GainMapMetadata.hdrCapacityMin}
   * @remarks Logarithmic space
   */
  get hdrCapacityMin() {
    return this._hdrCapacityMin;
  }
  set hdrCapacityMin(e) {
    this._hdrCapacityMin = e, this.calculateWeight();
  }
  /**
   * @see {@link GainMapMetadata.hdrCapacityMin}
   * @remarks Logarithmic space
   */
  get hdrCapacityMax() {
    return this._hdrCapacityMax;
  }
  set hdrCapacityMax(e) {
    this._hdrCapacityMax = e, this.calculateWeight();
  }
  /**
   * @see {@link GainmapDecodingParameters.maxDisplayBoost}
   * @remarks Non Logarithmic space
   */
  get maxDisplayBoost() {
    return this._maxDisplayBoost;
  }
  set maxDisplayBoost(e) {
    this._maxDisplayBoost = Math.max(1, Math.min(65504, e)), this.calculateWeight();
  }
  calculateWeight() {
    const e = (Math.log2(this._maxDisplayBoost) - this._hdrCapacityMin) / (this._hdrCapacityMax - this._hdrCapacityMin);
    this.uniforms.weightFactor.value = Math.max(0, Math.min(1, e));
  }
}
class hP extends Error {
}
class dP extends Error {
}
const Nc = (n, e, t) => {
  var i;
  let r;
  const s = (i = n.attributes.getNamedItem(e)) === null || i === void 0 ? void 0 : i.nodeValue;
  if (s)
    r = s;
  else {
    const o = n.getElementsByTagName(e)[0];
    if (o) {
      const a = o.getElementsByTagName("rdf:li");
      if (a.length === 3)
        r = Array.from(a).map((c) => c.innerHTML);
      else
        throw new Error(`Gainmap metadata contains an array of items for ${e} but its length is not 3`);
    } else {
      if (t)
        return t;
      throw new Error(`Can't find ${e} in gainmap metadata`);
    }
  }
  return r;
}, z5 = (n) => {
  var e, t;
  let i;
  typeof TextDecoder < "u" ? i = new TextDecoder().decode(n) : i = n.toString();
  let r = i.indexOf("<x:xmpmeta");
  const s = new DOMParser();
  for (; r !== -1; ) {
    const o = i.indexOf("x:xmpmeta>", r);
    i.slice(r, o + 10);
    const a = i.slice(r, o + 10);
    try {
      const f = s.parseFromString(a, "text/xml").getElementsByTagName("rdf:Description")[0], h = Nc(f, "hdrgm:GainMapMin", "0"), d = Nc(f, "hdrgm:GainMapMax"), p = Nc(f, "hdrgm:Gamma", "1"), v = Nc(f, "hdrgm:OffsetSDR", "0.015625"), y = Nc(f, "hdrgm:OffsetHDR", "0.015625");
      let w = (e = f.attributes.getNamedItem("hdrgm:HDRCapacityMin")) === null || e === void 0 ? void 0 : e.nodeValue;
      w || (w = "0");
      const x = (t = f.attributes.getNamedItem("hdrgm:HDRCapacityMax")) === null || t === void 0 ? void 0 : t.nodeValue;
      if (!x)
        throw new Error("Incomplete gainmap metadata");
      return {
        gainMapMin: Array.isArray(h) ? h.map((g) => parseFloat(g)) : [parseFloat(h), parseFloat(h), parseFloat(h)],
        gainMapMax: Array.isArray(d) ? d.map((g) => parseFloat(g)) : [parseFloat(d), parseFloat(d), parseFloat(d)],
        gamma: Array.isArray(p) ? p.map((g) => parseFloat(g)) : [parseFloat(p), parseFloat(p), parseFloat(p)],
        offsetSdr: Array.isArray(v) ? v.map((g) => parseFloat(g)) : [parseFloat(v), parseFloat(v), parseFloat(v)],
        offsetHdr: Array.isArray(y) ? y.map((g) => parseFloat(g)) : [parseFloat(y), parseFloat(y), parseFloat(y)],
        hdrCapacityMin: parseFloat(w),
        hdrCapacityMax: parseFloat(x)
      };
    } catch {
    }
    r = i.indexOf("<x:xmpmeta", o);
  }
};
class B5 {
  constructor(e) {
    this.options = {
      debug: e && e.debug !== void 0 ? e.debug : !1,
      extractFII: e && e.extractFII !== void 0 ? e.extractFII : !0,
      extractNonFII: e && e.extractNonFII !== void 0 ? e.extractNonFII : !0
    };
  }
  extract(e) {
    return new Promise((t, i) => {
      const r = this.options.debug, s = new DataView(e.buffer);
      if (s.getUint16(0) !== 65496) {
        i(new Error("Not a valid jpeg"));
        return;
      }
      const o = s.byteLength;
      let a = 2, c = 0, f;
      for (; a < o; ) {
        if (++c > 250) {
          i(new Error(`Found no marker after ${c} loops 😵`));
          return;
        }
        if (s.getUint8(a) !== 255) {
          i(new Error(`Not a valid marker at offset 0x${a.toString(16)}, found: 0x${s.getUint8(a).toString(16)}`));
          return;
        }
        if (f = s.getUint8(a + 1), r && console.log(`Marker: ${f.toString(16)}`), f === 226) {
          r && console.log("Found APP2 marker (0xffe2)");
          const h = a + 4;
          if (s.getUint32(h) === 1297106432) {
            const d = h + 4;
            let p;
            if (s.getUint16(d) === 18761)
              p = !1;
            else if (s.getUint16(d) === 19789)
              p = !0;
            else {
              i(new Error("No valid endianness marker found in TIFF header"));
              return;
            }
            if (s.getUint16(d + 2, !p) !== 42) {
              i(new Error("Not valid TIFF data! (no 0x002A marker)"));
              return;
            }
            const v = s.getUint32(d + 4, !p);
            if (v < 8) {
              i(new Error("Not valid TIFF data! (First offset less than 8)"));
              return;
            }
            const y = d + v, w = s.getUint16(y, !p), x = y + 2;
            let g = 0;
            for (let U = x; U < x + 12 * w; U += 12)
              s.getUint16(U, !p) === 45057 && (g = s.getUint32(U + 8, !p));
            const S = 4, M = y + 2 + w * 12 + S, T = [];
            for (let U = M; U < M + g * 16; U += 16) {
              const P = {
                MPType: s.getUint32(U, !p),
                size: s.getUint32(U + 4, !p),
                // This offset is specified relative to the address of the MP Endian
                // field in the MP Header, unless the image is a First Individual Image,
                // in which case the value of the offset shall be NULL (0x00000000).
                dataOffset: s.getUint32(U + 8, !p),
                dependantImages: s.getUint32(U + 12, !p),
                start: -1,
                end: -1,
                isFII: !1
              };
              P.dataOffset ? (P.start = d + P.dataOffset, P.isFII = !1) : (P.start = 0, P.isFII = !0), P.end = P.start + P.size, T.push(P);
            }
            if (this.options.extractNonFII && T.length) {
              const U = new Blob([s]), P = [];
              for (const D of T) {
                if (D.isFII && !this.options.extractFII)
                  continue;
                const R = U.slice(D.start, D.end + 1, "image/jpeg");
                P.push(R);
              }
              t(P);
            }
          }
        }
        a += 2 + s.getUint16(a + 2);
      }
    });
  }
}
const H5 = async (n) => {
  const e = z5(n);
  if (!e)
    throw new dP("Gain map XMP metadata not found");
  const i = await new B5({ extractFII: !0, extractNonFII: !0 }).extract(n);
  if (i.length !== 2)
    throw new hP("Gain map recovery image not found");
  return {
    sdr: new Uint8Array(await i[0].arrayBuffer()),
    gainMap: new Uint8Array(await i[1].arrayBuffer()),
    metadata: e
  };
}, dA = (n) => new Promise((e, t) => {
  const i = document.createElement("img");
  i.onload = () => {
    e(i);
  }, i.onerror = (r) => {
    t(r);
  }, i.src = URL.createObjectURL(n);
});
class pP extends Di {
  /**
   *
   * @param renderer
   * @param manager
   */
  constructor(e, t) {
    super(t), e && (this._renderer = e), this._internalLoadingManager = new Kg();
  }
  /**
   * Specify the renderer to use when rendering the gain map
   *
   * @param renderer
   * @returns
   */
  setRenderer(e) {
    return this._renderer = e, this;
  }
  /**
   * Specify the renderTarget options to use when rendering the gain map
   *
   * @param options
   * @returns
   */
  setRenderTargetOptions(e) {
    return this._renderTargetOptions = e, this;
  }
  /**
   * @private
   * @returns
   */
  prepareQuadRenderer() {
    this._renderer || console.warn("WARNING: An existing WebGL Renderer was not passed to this Loader constructor or in setRenderer, the result of this Loader will need to be converted to a Data Texture with toDataTexture() before you can use it in your renderer.");
    const e = new k5({
      gainMapMax: [1, 1, 1],
      gainMapMin: [0, 0, 0],
      gamma: [1, 1, 1],
      offsetHdr: [1, 1, 1],
      offsetSdr: [1, 1, 1],
      hdrCapacityMax: 1,
      hdrCapacityMin: 0,
      maxDisplayBoost: 1,
      gainMap: new Kt(),
      sdr: new Kt()
    });
    return new G1({
      width: 16,
      height: 16,
      type: $n,
      colorSpace: br,
      material: e,
      renderer: this._renderer,
      renderTargetOptions: this._renderTargetOptions
    });
  }
  /**
  * @private
  * @param quadRenderer
  * @param metadata
  * @param sdrBuffer
  * @param gainMapBuffer
  */
  async render(e, t, i, r) {
    const s = r ? new Blob([r], { type: "image/jpeg" }) : void 0, o = new Blob([i], { type: "image/jpeg" });
    let a, c, f = !1;
    if (typeof createImageBitmap > "u") {
      const p = await Promise.all([
        s ? dA(s) : Promise.resolve(void 0),
        dA(o)
      ]);
      c = p[0], a = p[1], f = !0;
    } else {
      const p = await Promise.all([
        s ? createImageBitmap(s, { imageOrientation: "flipY" }) : Promise.resolve(void 0),
        createImageBitmap(o, { imageOrientation: "flipY" })
      ]);
      c = p[0], a = p[1];
    }
    const h = new Kt(c || new ImageData(2, 2), Fo, Bn, Bn, $t, I_, Ln, Yi, 1, br);
    h.flipY = f, h.needsUpdate = !0;
    const d = new Kt(a, Fo, Bn, Bn, $t, I_, Ln, Yi, 1, Bi);
    d.flipY = f, d.needsUpdate = !0, e.width = a.width, e.height = a.height, e.material.gainMap = h, e.material.sdr = d, e.material.gainMapMin = t.gainMapMin, e.material.gainMapMax = t.gainMapMax, e.material.offsetHdr = t.offsetHdr, e.material.offsetSdr = t.offsetSdr, e.material.gamma = t.gamma, e.material.hdrCapacityMin = t.hdrCapacityMin, e.material.hdrCapacityMax = t.hdrCapacityMax, e.material.maxDisplayBoost = Math.pow(2, t.hdrCapacityMax), e.material.needsUpdate = !0, e.render();
  }
}
class V5 extends pP {
  /**
   * Loads a gainmap using separate data
   * * sdr image
   * * gain map image
   * * metadata json
   *
   * useful for webp gain maps
   *
   * @param urls An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]
   * @param onLoad Load complete callback, will receive the result
   * @param onProgress Progress callback, will receive a {@link ProgressEvent}
   * @param onError Error callback
   * @returns
   */
  load([e, t, i], r, s, o) {
    const a = this.prepareQuadRenderer();
    let c, f, h;
    const d = async () => {
      if (c && f && h) {
        try {
          await this.render(a, h, c, f);
        } catch (C) {
          this.manager.itemError(e), this.manager.itemError(t), this.manager.itemError(i), typeof o == "function" && o(C), a.disposeOnDemandRenderer();
          return;
        }
        typeof r == "function" && r(a), this.manager.itemEnd(e), this.manager.itemEnd(t), this.manager.itemEnd(i), a.disposeOnDemandRenderer();
      }
    };
    let p = !0, v = 0, y = 0, w = !0, x = 0, g = 0, S = !0, M = 0, T = 0;
    const U = () => {
      if (typeof s == "function") {
        const C = v + x + M, A = y + g + T, N = p && w && S;
        s(new ProgressEvent("progress", { lengthComputable: N, loaded: A, total: C }));
      }
    };
    this.manager.itemStart(e), this.manager.itemStart(t), this.manager.itemStart(i);
    const P = new sr(this._internalLoadingManager);
    P.setResponseType("arraybuffer"), P.setRequestHeader(this.requestHeader), P.setPath(this.path), P.setWithCredentials(this.withCredentials), P.load(e, async (C) => {
      if (typeof C == "string")
        throw new Error("Invalid sdr buffer");
      c = C, await d();
    }, (C) => {
      p = C.lengthComputable, y = C.loaded, v = C.total, U();
    }, (C) => {
      this.manager.itemError(e), typeof o == "function" && o(C);
    });
    const D = new sr(this._internalLoadingManager);
    D.setResponseType("arraybuffer"), D.setRequestHeader(this.requestHeader), D.setPath(this.path), D.setWithCredentials(this.withCredentials), D.load(t, async (C) => {
      if (typeof C == "string")
        throw new Error("Invalid gainmap buffer");
      f = C, await d();
    }, (C) => {
      w = C.lengthComputable, g = C.loaded, x = C.total, U();
    }, (C) => {
      this.manager.itemError(t), typeof o == "function" && o(C);
    });
    const R = new sr(this._internalLoadingManager);
    return R.setRequestHeader(this.requestHeader), R.setPath(this.path), R.setWithCredentials(this.withCredentials), R.load(i, async (C) => {
      if (typeof C != "string")
        throw new Error("Invalid metadata string");
      h = JSON.parse(C), await d();
    }, (C) => {
      S = C.lengthComputable, T = C.loaded, M = C.total, U();
    }, (C) => {
      this.manager.itemError(i), typeof o == "function" && o(C);
    }), a;
  }
}
class G5 extends pP {
  /**
   * Loads a JPEG containing gain map metadata
   * Renders a normal SDR image if gainmap data is not found
   *
   * @param url An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]
   * @param onLoad Load complete callback, will receive the result
   * @param onProgress Progress callback, will receive a {@link ProgressEvent}
   * @param onError Error callback
   * @returns
   */
  load(e, t, i, r) {
    const s = this.prepareQuadRenderer(), o = new sr(this._internalLoadingManager);
    return o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setPath(this.path), o.setWithCredentials(this.withCredentials), this.manager.itemStart(e), o.load(e, async (a) => {
      if (typeof a == "string")
        throw new Error("Invalid buffer, received [string], was expecting [ArrayBuffer]");
      const c = new Uint8Array(a);
      let f, h, d;
      try {
        const p = await H5(c);
        f = p.sdr, h = p.gainMap, d = p.metadata;
      } catch (p) {
        if (p instanceof dP || p instanceof hP)
          console.warn(`Failure to reconstruct an HDR image from ${e}: Gain map metadata not found in the file, HDRJPGLoader will render the SDR jpeg`), d = {
            gainMapMin: [0, 0, 0],
            gainMapMax: [1, 1, 1],
            gamma: [1, 1, 1],
            hdrCapacityMin: 0,
            hdrCapacityMax: 1,
            offsetHdr: [0, 0, 0],
            offsetSdr: [0, 0, 0]
          }, f = c;
        else
          throw p;
      }
      try {
        await this.render(s, d, f, h);
      } catch (p) {
        this.manager.itemError(e), typeof r == "function" && r(p), s.disposeOnDemandRenderer();
        return;
      }
      typeof t == "function" && t(s), this.manager.itemEnd(e), s.disposeOnDemandRenderer();
    }, i, (a) => {
      this.manager.itemError(e), typeof r == "function" && r(a);
    }), s;
  }
}
const Cy = {
  apartment: "lebombo_1k.hdr",
  city: "potsdamer_platz_1k.hdr",
  dawn: "kiara_1_dawn_1k.hdr",
  forest: "forest_slope_1k.hdr",
  lobby: "st_fagans_interior_1k.hdr",
  night: "dikhololo_night_1k.hdr",
  park: "rooitou_park_1k.hdr",
  studio: "studio_small_03_1k.hdr",
  sunset: "venice_sunset_1k.hdr",
  warehouse: "empty_warehouse_01_1k.hdr"
}, W5 = "https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/", Pp = (n) => Array.isArray(n);
function mP({
  files: n = ["/px.png", "/nx.png", "/py.png", "/ny.png", "/pz.png", "/nz.png"],
  path: e = "",
  preset: t = void 0,
  encoding: i = void 0,
  extensions: r
} = {}) {
  var s;
  let o = null, a = !1, c;
  if (t) {
    if (!(t in Cy))
      throw new Error("Preset must be one of: " + Object.keys(Cy).join(", "));
    n = Cy[t], e = W5;
  }
  const f = Pp(n) && n.length === 6, h = Pp(n) && n.length === 3 && n.some((x) => x.endsWith("json")), d = Pp(n) ? n[0] : n;
  if (a = Pp(n), c = f ? "cube" : h ? "webp" : d.startsWith("data:application/exr") ? "exr" : d.startsWith("data:application/hdr") ? "hdr" : d.startsWith("data:image/jpeg") ? "jpg" : (s = d.split(".").pop()) == null || (s = s.split("?")) == null || (s = s.shift()) == null ? void 0 : s.toLowerCase(), o = c === "cube" ? Mb : c === "hdr" ? b5 : c === "exr" ? P5 : c === "jpg" || c === "jpeg" ? G5 : c === "webp" ? V5 : null, !o)
    throw new Error("useEnvironment: Unrecognized file extension: " + n);
  const p = zi((x) => x.gl), v = ku(
    // @ts-expect-error
    o,
    a ? [n] : n,
    (x) => {
      (c === "webp" || c === "jpg" || c === "jpeg") && x.setRenderer(p), x.setPath == null || x.setPath(e), r && r(x);
    }
  );
  let y = a ? (
    // @ts-ignore
    v[0]
  ) : v;
  if (c === "jpg" || c === "jpeg" || c === "webp") {
    var w;
    y = (w = y.renderTarget) == null ? void 0 : w.texture;
  }
  return y.mapping = f ? vs : Tu, "colorSpace" in y ? y.colorSpace = i ?? f ? "srgb" : "srgb-linear" : y.encoding = i ?? f ? D5 : L5, y;
}
const X5 = (n) => n.current && n.current.isScene, Y5 = (n) => X5(n) ? n.current : n;
function W1(n, e, t, i, r = {}) {
  var s, o, a, c, f;
  r = {
    backgroundBlurriness: (s = r.blur) !== null && s !== void 0 ? s : 0,
    backgroundIntensity: 1,
    backgroundRotation: [0, 0, 0],
    environmentIntensity: 1,
    environmentRotation: [0, 0, 0],
    ...r
  };
  const h = Y5(e || t), d = h.background, p = h.environment, v = {
    // @ts-ignore
    backgroundBlurriness: h.backgroundBlurriness,
    // @ts-ignore
    backgroundIntensity: h.backgroundIntensity,
    // @ts-ignore
    backgroundRotation: (o = (a = h.backgroundRotation) == null || a.clone == null ? void 0 : a.clone()) !== null && o !== void 0 ? o : [0, 0, 0],
    // @ts-ignore
    environmentIntensity: h.environmentIntensity,
    // @ts-ignore
    environmentRotation: (c = (f = h.environmentRotation) == null || f.clone == null ? void 0 : f.clone()) !== null && c !== void 0 ? c : [0, 0, 0]
  };
  return n !== "only" && (h.environment = i), n && (h.background = i), yo(h, r), () => {
    n !== "only" && (h.environment = p), n && (h.background = d), yo(h, v);
  };
}
function X1({
  scene: n,
  background: e = !1,
  map: t,
  ...i
}) {
  const r = zi((s) => s.scene);
  return ge.useLayoutEffect(() => {
    if (t)
      return W1(e, n, r, t, i);
  }), null;
}
function gP({
  background: n = !1,
  scene: e,
  blur: t,
  backgroundBlurriness: i,
  backgroundIntensity: r,
  backgroundRotation: s,
  environmentIntensity: o,
  environmentRotation: a,
  ...c
}) {
  const f = mP(c), h = zi((d) => d.scene);
  return ge.useLayoutEffect(() => W1(n, e, h, f, {
    blur: t,
    backgroundBlurriness: i,
    backgroundIntensity: r,
    backgroundRotation: s,
    environmentIntensity: o,
    environmentRotation: a
  })), null;
}
function q5({
  children: n,
  near: e = 1,
  far: t = 1e3,
  resolution: i = 256,
  frames: r = 1,
  map: s,
  background: o = !1,
  blur: a,
  backgroundBlurriness: c,
  backgroundIntensity: f,
  backgroundRotation: h,
  environmentIntensity: d,
  environmentRotation: p,
  scene: v,
  files: y,
  path: w,
  preset: x = void 0,
  extensions: g
}) {
  const S = zi((R) => R.gl), M = zi((R) => R.scene), T = ge.useRef(null), [U] = ge.useState(() => new bu()), P = ge.useMemo(() => {
    const R = new f1(i);
    return R.texture.type = $n, R;
  }, [i]);
  ge.useLayoutEffect(() => (r === 1 && T.current.update(S, U), W1(o, v, M, P.texture, {
    blur: a,
    backgroundBlurriness: c,
    backgroundIntensity: f,
    backgroundRotation: h,
    environmentIntensity: d,
    environmentRotation: p
  })), [n, U, P.texture, v, M, o, r, S]);
  let D = 1;
  return _h(() => {
    (r === 1 / 0 || D < r) && (T.current.update(S, U), D++);
  }), /* @__PURE__ */ ge.createElement(ge.Fragment, null, hB(/* @__PURE__ */ ge.createElement(ge.Fragment, null, n, /* @__PURE__ */ ge.createElement("cubeCamera", {
    ref: T,
    args: [e, t, P]
  }), y || x ? /* @__PURE__ */ ge.createElement(gP, {
    background: !0,
    files: y,
    preset: x,
    path: w,
    extensions: g
  }) : s ? /* @__PURE__ */ ge.createElement(X1, {
    background: !0,
    map: s,
    extensions: g
  }) : null), U));
}
function j5(n) {
  var e, t, i, r;
  const s = mP(n), o = n.map || s;
  ge.useMemo(() => Bb({
    GroundProjectedEnvImpl: E5
  }), []);
  const a = ge.useMemo(() => [o], [o]), c = (e = n.ground) == null ? void 0 : e.height, f = (t = n.ground) == null ? void 0 : t.radius, h = (i = (r = n.ground) == null ? void 0 : r.scale) !== null && i !== void 0 ? i : 1e3;
  return /* @__PURE__ */ ge.createElement(ge.Fragment, null, /* @__PURE__ */ ge.createElement(X1, Mm({}, n, {
    map: o
  })), /* @__PURE__ */ ge.createElement("groundProjectedEnvImpl", {
    args: a,
    scale: h,
    height: c,
    radius: f
  }));
}
function Z5(n) {
  return n.ground ? /* @__PURE__ */ ge.createElement(j5, n) : n.map ? /* @__PURE__ */ ge.createElement(X1, n) : n.children ? /* @__PURE__ */ ge.createElement(q5, n) : /* @__PURE__ */ ge.createElement(gP, n);
}
let K5 = 0;
function J5(n, e) {
  const t = `atom${++K5}`, i = {
    toString: () => t
  };
  return typeof n == "function" ? i.read = n : (i.init = n, i.read = Q5, i.write = $5), e && (i.write = e), i;
}
function Q5(n) {
  return n(this);
}
function $5(n, e, t) {
  return e(
    this,
    typeof t == "function" ? t(n(this)) : t
  );
}
const Ry = (n, e) => n.unstable_is ? n.unstable_is(e) : e === n, pA = (n) => "init" in n, mA = (n) => !!n.write, ig = /* @__PURE__ */ new WeakMap(), eH = (n, e) => {
  ig.set(n, e), n.catch(() => {
  }).finally(() => ig.delete(n));
}, gA = (n, e) => {
  const t = ig.get(n);
  t && (ig.delete(n), t(e));
}, vA = (n, e) => {
  n.status = "fulfilled", n.value = e;
}, yA = (n, e) => {
  n.status = "rejected", n.reason = e;
}, tH = (n) => typeof n?.then == "function", Uc = (n, e) => !!n && "v" in n && "v" in e && Object.is(n.v, e.v), _A = (n, e) => !!n && "e" in n && "e" in e && Object.is(n.e, e.e), Gl = (n) => !!n && "v" in n && n.v instanceof Promise, nH = (n, e) => "v" in n && "v" in e && n.v.orig && n.v.orig === e.v.orig, Ip = (n) => {
  if ("e" in n)
    throw n.e;
  return n.v;
}, iH = () => {
  const n = /* @__PURE__ */ new WeakMap(), e = /* @__PURE__ */ new WeakMap(), t = [], i = /* @__PURE__ */ new WeakMap();
  let r, s;
  const o = (R) => n.get(R), a = (R, C) => {
    C.d.forEach((A, N) => {
      if (!i.has(N)) {
        const G = o(N);
        i.set(N, [G, /* @__PURE__ */ new Set()]), G && a(N, G);
      }
      i.get(N)[1].add(R);
    });
  }, c = (R, C) => {
    var A;
    const N = o(R);
    if (n.set(R, C), (A = t[t.length - 1]) == null || A.add(R), i.has(R) || (i.set(R, [N, /* @__PURE__ */ new Set()]), a(R, C)), Gl(N)) {
      const G = "v" in C ? C.v instanceof Promise ? C.v : Promise.resolve(C.v) : Promise.reject(C.e);
      N.v !== G && gA(N.v, G);
    }
  }, f = (R, C, A, N) => {
    const G = new Map(
      N ? C.d : null
    );
    let W = !1;
    A.forEach((j, Q) => {
      !j && Ry(R, Q) && (j = C), j && (G.set(Q, j), C.d.get(Q) !== j && (W = !0));
    }), (W || C.d.size !== G.size) && (C.d = G);
  }, h = (R, C, A, N) => {
    const G = o(R), W = {
      d: G?.d || /* @__PURE__ */ new Map(),
      v: C
    };
    if (A && f(
      R,
      W,
      A,
      N
    ), Uc(G, W) && G.d === W.d)
      return G;
    if (Gl(G) && Gl(W) && nH(G, W)) {
      if (G.d === W.d)
        return G;
      W.v = G.v;
    }
    return c(R, W), W;
  }, d = (R, C, A, N) => {
    if (tH(C)) {
      let G;
      const W = () => {
        const Q = o(R);
        if (!Gl(Q) || Q.v !== j)
          return;
        const J = h(
          R,
          j,
          A
        );
        e.has(R) && Q.d !== J.d && U(R, J, Q.d);
      }, j = new Promise((Q, J) => {
        let oe = !1;
        C.then(
          (z) => {
            oe || (oe = !0, vA(j, z), Q(z), W());
          },
          (z) => {
            oe || (oe = !0, yA(j, z), J(z), W());
          }
        ), G = (z) => {
          oe || (oe = !0, z.then(
            (te) => vA(j, te),
            (te) => yA(j, te)
          ), Q(z));
        };
      });
      return j.orig = C, j.status = "pending", eH(j, (Q) => {
        Q && (G(Q), N?.());
      }), h(R, j, A, !0);
    }
    return h(R, C, A);
  }, p = (R, C, A) => {
    const N = o(R), G = {
      d: N?.d || /* @__PURE__ */ new Map(),
      e: C
    };
    return A && f(R, G, A), _A(N, G) && N.d === G.d ? N : (c(R, G), G);
  }, v = (R, C) => {
    const A = o(R);
    if (!C?.(R) && A && (e.has(R) || Array.from(A.d).every(([oe, z]) => {
      if (oe === R)
        return !0;
      const te = v(oe, C);
      return te === z || Uc(te, z);
    })))
      return A;
    const N = /* @__PURE__ */ new Map();
    let G = !0;
    const W = (oe) => {
      if (Ry(R, oe)) {
        const te = o(oe);
        if (te)
          return N.set(oe, te), Ip(te);
        if (pA(oe))
          return N.set(oe, void 0), oe.init;
        throw new Error("no atom init");
      }
      const z = v(oe, C);
      return N.set(oe, z), Ip(z);
    };
    let j, Q;
    const J = {
      get signal() {
        return j || (j = new AbortController()), j.signal;
      },
      get setSelf() {
        return !Q && mA(R) && (Q = (...oe) => {
          if (!G)
            return g(R, ...oe);
        }), Q;
      }
    };
    try {
      const oe = R.read(W, J);
      return d(
        R,
        oe,
        N,
        () => j?.abort()
      );
    } catch (oe) {
      return p(R, oe, N);
    } finally {
      G = !1;
    }
  }, y = (R) => Ip(v(R)), w = (R) => {
    const C = (Q) => {
      var J, oe;
      const z = new Set((J = e.get(Q)) == null ? void 0 : J.t);
      return (oe = i.get(Q)) == null || oe[1].forEach((te) => {
        z.add(te);
      }), z;
    }, A = new Array(), N = /* @__PURE__ */ new Set(), G = (Q) => {
      if (!N.has(Q)) {
        N.add(Q);
        for (const J of C(Q))
          Q !== J && G(J);
        A.push(Q);
      }
    };
    G(R);
    const W = /* @__PURE__ */ new Set([R]), j = (Q) => N.has(Q);
    for (let Q = A.length - 1; Q >= 0; --Q) {
      const J = A[Q], oe = o(J);
      if (!oe)
        continue;
      let z = !1;
      for (const te of oe.d.keys())
        if (te !== J && W.has(te)) {
          z = !0;
          break;
        }
      if (z) {
        const te = v(J, j);
        a(J, te), Uc(oe, te) || W.add(J);
      }
      N.delete(J);
    }
  }, x = (R, ...C) => {
    const A = (W) => Ip(v(W)), N = (W, ...j) => {
      const Q = t.length > 0;
      Q || t.push(/* @__PURE__ */ new Set([W]));
      let J;
      if (Ry(R, W)) {
        if (!pA(W))
          throw new Error("atom not writable");
        const oe = o(W), z = d(W, j[0]);
        Uc(oe, z) || w(W);
      } else
        J = x(W, ...j);
      if (!Q) {
        const oe = P(t.pop());
      }
      return J;
    };
    return R.write(A, N, ...C);
  }, g = (R, ...C) => {
    t.push(/* @__PURE__ */ new Set([R]));
    const A = x(R, ...C), N = P(t.pop());
    return A;
  }, S = (R, C, A) => {
    var N;
    const G = e.get(R);
    if (G)
      return C && G.t.add(C), G;
    const W = A || [];
    (N = o(R)) == null || N.d.forEach((Q, J) => {
      J !== R && S(J, R, W);
    }), v(R);
    const j = {
      t: new Set(C && [C]),
      l: /* @__PURE__ */ new Set()
    };
    if (e.set(R, j), mA(R) && R.onMount) {
      const { onMount: Q } = R;
      W.push(() => {
        const J = Q((...oe) => g(R, ...oe));
        J && (j.u = J);
      });
    }
    return A || W.forEach((Q) => Q()), j;
  }, M = (R, C) => !C.l.size && (!C.t.size || C.t.size === 1 && C.t.has(R)), T = (R, C) => {
    if (!M(R, C))
      return;
    const A = C.u;
    A && A(), e.delete(R);
    const N = o(R);
    N && (Gl(N) && gA(N.v), N.d.forEach((G, W) => {
      if (W !== R) {
        const j = e.get(W);
        j && (j.t.delete(R), T(W, j));
      }
    }));
  }, U = (R, C, A) => {
    const N = new Set(C.d.keys()), G = /* @__PURE__ */ new Set();
    A?.forEach((W, j) => {
      if (N.has(j)) {
        N.delete(j);
        return;
      }
      G.add(j);
      const Q = e.get(j);
      Q && Q.t.delete(R);
    }), N.forEach((W) => {
      S(W, R);
    }), G.forEach((W) => {
      const j = e.get(W);
      j && T(W, j);
    });
  }, P = (R) => {
    let C;
    const A = [], N = (G) => {
      var W;
      if (!i.has(G))
        return;
      const [j, Q] = i.get(G);
      i.delete(G), A.push([G, j]), Q.forEach(N), (W = o(G)) == null || W.d.forEach((J, oe) => N(oe));
    };
    R.forEach(N), A.forEach(([G, W]) => {
      const j = o(G);
      if (j && j !== W) {
        const Q = e.get(G);
        Q && j.d !== W?.d && U(G, j, W?.d), Q && !// TODO This seems pretty hacky. Hope to fix it.
        // Maybe we could `mountDependencies` in `setAtomState`?
        (!Gl(W) && (Uc(W, j) || _A(W, j))) && Q.l.forEach((J) => J());
      }
    });
  };
  return {
    get: y,
    set: g,
    sub: (R, C) => {
      const A = S(R), N = P([R]), G = A.l;
      return G.add(C), () => {
        G.delete(C), T(R, A);
      };
    }
  };
};
let by;
const rH = () => (by || (by = iH()), by), sH = rH, oH = ge.createContext(
  void 0
), vP = (n) => {
  const e = ge.useContext(oH);
  return n?.store || e || sH();
}, aH = (n) => typeof n?.then == "function", lH = ix.use || ((n) => {
  if (n.status === "pending")
    throw n;
  if (n.status === "fulfilled")
    return n.value;
  throw n.status === "rejected" ? n.reason : (n.status = "pending", n.then(
    (e) => {
      n.status = "fulfilled", n.value = e;
    },
    (e) => {
      n.status = "rejected", n.reason = e;
    }
  ), n);
});
function uH(n, e) {
  const t = vP(e), [[i, r, s], o] = ge.useReducer(
    (f) => {
      const h = t.get(n);
      return Object.is(f[0], h) && f[1] === t && f[2] === n ? f : [h, t, n];
    },
    void 0,
    () => [t.get(n), t, n]
  );
  let a = i;
  (r !== t || s !== n) && (o(), a = t.get(n));
  const c = e?.delay;
  return ge.useEffect(() => {
    const f = t.sub(n, () => {
      if (typeof c == "number") {
        setTimeout(o, c);
        return;
      }
      o();
    });
    return o(), f;
  }, [t, n, c]), ge.useDebugValue(a), aH(a) ? lH(a) : a;
}
function cH(n, e) {
  const t = vP(e);
  return ge.useCallback(
    (...r) => t.set(n, ...r),
    [t, n]
  );
}
function yP(n, e) {
  return [
    uH(n, e),
    // We do wrong type assertion here, which results in throwing an error.
    cH(n, e)
  ];
}
const fH = Math.PI / 180;
function xA(n) {
  return n * fH;
}
let SA = 0, MA = 0;
const hH = 0.16889, dH = 5e-3, pH = 9e-3, Y1 = 1.28, mH = 1.71, J_ = 1e-3, q1 = 80, Kp = Y1 / q1, Sh = new Wo(
  Y1,
  mH,
  J_,
  q1,
  2
);
Sh.translate(Y1 / 2, 0, 0);
const wA = Sh.attributes.position, EA = new B(), _P = [], xP = [], gH = window._gh_page_data.splice(0, 1), vH = window._gh_page_data.splice(window._gh_page_data.length - 1, 1), Mo = window._gh_page_data, Ja = [
  {
    front: gH,
    back: Mo[0]
  }
];
for (let n = 1; n < Mo.length - 1; n += 2)
  Ja.push({
    front: Mo[n % Mo.length],
    back: Mo[(n + 1) % Mo.length]
  });
Ja.push({
  front: Mo[Mo.length - 1],
  back: vH
});
const SP = J5(window._gh_reader_order ? 0 : Ja.length + 1);
for (let n = 0; n < wA.count; n++) {
  EA.fromBufferAttribute(wA, n);
  const e = EA.x, t = Math.max(0, Math.floor(e / Kp));
  let i = e % Kp / Kp;
  _P.push(t, t + 1, 0, 0), xP.push(1 - i, i, 0, 0);
}
Sh.setAttribute(
  "skinIndex",
  new Pg(_P, 4)
);
Sh.setAttribute(
  "skinWeight",
  new rt(xP, 4)
);
const Py = new Qe("#ffffff"), yH = [
  new Ti({
    color: Py,
    emissiveIntensity: 0
    // 禁用任何发光效果
  }),
  new Ti({
    color: "#111",
    emissiveIntensity: 0
    // 禁用任何发光效果
  }),
  new Ti({
    color: Py,
    emissiveIntensity: 0
    // 禁用任何发光效果
  }),
  new Ti({
    color: Py,
    emissiveIntensity: 0
    // 禁用任何发光效果
  })
];
Ja.forEach((n) => {
  Kf.preload(n.front), Kf.preload(n.back);
});
window._gh_book_reader_pages = Ja;
const _H = ({ number: n, front: e, back: t, page: i, opened: r, bookClosed: s, ...o }) => {
  window._gh_book_reader_page_index = n;
  const [a, c, f] = Kf([e, t]);
  a.colorSpace = c.colorSpace = Bi;
  const h = ge.useRef(), d = ge.useRef(0), p = ge.useRef(r), v = ge.useRef(), y = ge.useMemo(() => {
    const M = [];
    for (let D = 0; D <= q1; D++) {
      let R = new Ug();
      M.push(R), D === 0 ? R.position.x = 0 : R.position.x = Kp, D > 0 && M[D - 1].add(R);
    }
    const T = new fh(M), U = [
      ...yH,
      new Ti({
        map: a,
        // Front texture
        emissiveIntensity: 0,
        // Disable glow
        toneMapped: !1
        // Disable tone mapping
      }),
      new Ti({
        map: c,
        // Back texture
        emissiveIntensity: 0,
        // Disable glow
        toneMapped: !1
        // Disable tone mapping
      })
    ], P = new y1(Sh, U);
    return P.castShadow = !0, P.receiveShadow = !0, P.frustumCulled = !1, P.add(T.bones[0]), P.bind(T), P;
  }, []);
  _h((M, T) => {
    if (!v.current)
      return;
    const U = g ? 0.22 : 0;
    v.current.material[4].emissiveIntensity = v.current.material[5].emissiveIntensity = a1.lerp(
      v.current.material[4].emissiveIntensity,
      U,
      0.1
    ), p.current !== r && (d.current = +new Date(), p.current = r);
    let P = Math.min(400, new Date() - d.current) / 400;
    P = Math.sin(P * Math.PI);
    let D = r ? -Math.PI / 2 : Math.PI / 2;
    s || (D += xA(n * 0.8));
    const R = v.current.skeleton.bones;
    for (let C = 0; C < R.length; C++) {
      const A = C === 0 ? h.current : R[C], N = C < 8 ? Math.sin(C * 0.2 + 0.25) : 0, G = C >= 8 ? Math.cos(C * 0.3 + 0.09) : 0, W = Math.sin(C * Math.PI * (1 / R.length)) * P;
      let j = hH * N * D - dH * G * D + pH * W * D, Q = xA(Math.sign(D) * 2);
      s && (C === 0 ? (j = D, Q = 0) : (j = 0, Q = 0)), cA.dampAngle(
        A.rotation,
        "y",
        j,
        SA,
        T
      );
      const J = C > 8 ? Math.sin(C * Math.PI * (1 / R.length) - 0.5) * P : 0;
      cA.dampAngle(
        A.rotation,
        "x",
        Q * J,
        MA,
        T
      );
    }
  });
  const [w, x] = yP(SP), [g, S] = ge.useState(!1);
  return IB(g), ge.useEffect(() => {
    v.current && setTimeout(() => {
      SA = 0.5, MA = 0.3;
    }, 100);
  }, []), /* @__PURE__ */ en(
    "group",
    {
      ...o,
      ref: h,
      onPointerEnter: (M) => {
        M.stopPropagation(), S(!0);
      },
      onPointerLeave: (M) => {
        M.stopPropagation(), S(!1);
      },
      onClick: (M) => {
        M.stopPropagation(), x(r ? n : n + 1), S(!1);
      },
      children: /* @__PURE__ */ en(
        "primitive",
        {
          object: y,
          ref: v,
          "position-z": -n * J_ + i * J_
        }
      )
    }
  );
}, xH = ({ ...n }) => {
  const [e, t] = yP(SP), [i, r] = ge.useState(e);
  return window._gh_book_reader_setPage = t, ge.useEffect(() => {
    let s;
    const o = () => {
      r((a) => {
        if (e === a)
          return a;
        if (s = setTimeout(
          () => {
            o();
          },
          Math.abs(e - a) > 2 ? 50 : 150
        ), e > a)
          return a + 1;
        if (e < a)
          return a - 1;
      });
    };
    return o(), () => {
      clearTimeout(s);
    };
  }, [e]), /* @__PURE__ */ en("group", { ...n, "rotation-y": -Math.PI / 2, children: [...Ja].map((s, o) => /* @__PURE__ */ en(
    _H,
    {
      page: i,
      number: o,
      opened: i > o,
      bookClosed: i === 0 || i === Ja.length,
      ...s
    },
    o
  )) });
}, SH = () => {
  const n = ge.useRef(), e = ge.useRef(), t = new B(
    -0.009413320160896431,
    0.18566404342052567,
    5.675864714066441
  ), i = new bi(
    -0.032699487019871874,
    -0.0016575940125112952,
    -54221776060966095e-21,
    "XYZ"
  );
  return _h(({ camera: r }) => {
    n.current && e.current && e.current.quaternion.copy(n.current.object.quaternion);
  }), ge.useEffect(() => {
    const r = n.current?.object;
    r && (r.position.copy(t), r.setRotationFromEuler(i));
  }, []), /* @__PURE__ */ DA(rx, { children: [
    /* @__PURE__ */ en(N5, { floatIntensity: 0, speed: 0, rotationIntensity: 0, children: /* @__PURE__ */ en(xH, { ref: e }) }),
    /* @__PURE__ */ en(
      I5,
      {
        ref: n
      }
    ),
    /* @__PURE__ */ en(Z5, { preset: "studio" })
  ] });
};
var MH = Object.defineProperty, wH = (n, e, t) => e in n ? MH(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Lp = (n, e, t) => wH(n, typeof e != "symbol" ? e + "" : e, t);
const EH = {
  stringify: (n) => n ? "true" : "false",
  parse: (n) => /^[ty1-9]/i.test(n)
}, TH = {
  stringify: (n) => n.name,
  parse: (n, e, t) => {
    const i = (() => {
      if (typeof window < "u" && n in window)
        return window[n];
      if (typeof global < "u" && n in global)
        return global[n];
    })();
    return typeof i == "function" ? i.bind(t) : void 0;
  }
}, AH = {
  stringify: (n) => JSON.stringify(n),
  parse: (n) => JSON.parse(n)
}, CH = {
  stringify: (n) => `${n}`,
  parse: (n) => parseFloat(n)
}, RH = {
  stringify: (n) => n,
  parse: (n) => n
}, Iy = {
  string: RH,
  number: CH,
  boolean: EH,
  function: TH,
  json: AH
};
function bH(n) {
  return n.replace(
    /([a-z0-9])([A-Z])/g,
    (e, t, i) => `${t}-${i.toLowerCase()}`
  );
}
const Dp = Symbol.for("r2wc.render"), Np = Symbol.for("r2wc.connected"), ya = Symbol.for("r2wc.context"), Ns = Symbol.for("r2wc.props");
function PH(n, e, t) {
  var i, r, s;
  e.props || (e.props = n.propTypes ? Object.keys(n.propTypes) : []), e.events || (e.events = []);
  const o = Array.isArray(e.props) ? e.props.slice() : Object.keys(e.props), a = Array.isArray(e.events) ? e.events.slice() : Object.keys(e.events), c = {}, f = {}, h = {}, d = {};
  for (const v of o) {
    c[v] = Array.isArray(e.props) ? "string" : e.props[v];
    const y = bH(v);
    h[v] = y, d[y] = v;
  }
  for (const v of a)
    f[v] = Array.isArray(e.events) ? {} : e.events[v];
  class p extends HTMLElement {
    constructor() {
      super(), Lp(this, s, !0), Lp(this, r), Lp(this, i, {}), Lp(this, "container"), e.shadow ? this.container = this.attachShadow({
        mode: e.shadow
      }) : this.container = this, this[Ns].container = this.container;
      for (const y of o) {
        const w = h[y], x = this.getAttribute(w), g = c[y], S = g ? Iy[g] : null;
        S != null && S.parse && x && (this[Ns][y] = S.parse(x, w, this));
      }
      for (const y of a)
        this[Ns][y] = (w) => {
          const x = y.replace(/^on/, "").toLowerCase();
          this.dispatchEvent(
            new CustomEvent(x, { detail: w, ...f[y] })
          );
        };
    }
    static get observedAttributes() {
      return Object.keys(d);
    }
    connectedCallback() {
      this[Np] = !0, this[Dp]();
    }
    disconnectedCallback() {
      this[Np] = !1, this[ya] && t.unmount(this[ya]), delete this[ya];
    }
    attributeChangedCallback(y, w, x) {
      const g = d[y], S = c[g], M = S ? Iy[S] : null;
      g in c && M != null && M.parse && x && (this[Ns][g] = M.parse(x, y, this), this[Dp]());
    }
    [(s = Np, r = ya, i = Ns, Dp)]() {
      this[Np] && (this[ya] ? t.update(this[ya], this[Ns]) : this[ya] = t.mount(
        this.container,
        n,
        this[Ns]
      ));
    }
  }
  for (const v of o) {
    const y = h[v], w = c[v];
    Object.defineProperty(p.prototype, v, {
      enumerable: !0,
      configurable: !0,
      get() {
        return this[Ns][v];
      },
      set(x) {
        this[Ns][v] = x;
        const g = w ? Iy[w] : null;
        if (g != null && g.stringify) {
          const S = g.stringify(x, y, this);
          this.getAttribute(y) !== S && this.setAttribute(y, S);
        } else
          this[Dp]();
      }
    });
  }
  return p;
}
function IH(n, e, t, i = {}) {
  function r(a, c, f) {
    const h = e.createElement(c, f);
    if ("createRoot" in t) {
      const d = t.createRoot(a);
      return d.render(h), {
        container: a,
        root: d,
        ReactComponent: c
      };
    }
    if ("render" in t)
      return t.render(h, a), {
        container: a,
        ReactComponent: c
      };
    throw new Error("Invalid ReactDOM instance provided.");
  }
  function s({ container: a, root: c, ReactComponent: f }, h) {
    const d = e.createElement(f, h);
    if (c) {
      c.render(d);
      return;
    }
    if ("render" in t) {
      t.render(d, a);
      return;
    }
  }
  function o({ container: a, root: c }) {
    if (c) {
      c.unmount();
      return;
    }
    if ("unmountComponentAtNode" in t) {
      t.unmountComponentAtNode(a);
      return;
    }
  }
  return PH(n, i, { mount: r, unmount: o, update: s });
}
const LH = IH(MP, ix, kL);
customElements.define("book-component", LH);
function MP() {
  return /* @__PURE__ */ DA(rx, { children: [
    /* @__PURE__ */ en(NB, {}),
    /* @__PURE__ */ en(
      PB,
      {
        shadows: !0,
        camera: {
          position: [-0.5, 4, window.innerWidth > 800 ? 4 : 9],
          fov: 18
        },
        children: /* @__PURE__ */ en("group", { "position-y": 0, children: /* @__PURE__ */ en(ge.Suspense, { fallback: null, children: /* @__PURE__ */ en(SH, {}) }) })
      }
    )
  ] });
}
Ly.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ en(ix.StrictMode, { children: /* @__PURE__ */ en(MP, {}) })
);
